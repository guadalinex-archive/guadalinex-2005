#!/usr/bin/env python
# -*- coding: UTF8 -*-

"""
bb-assist - A DSL Assistant Configurator

Copyright (C) 2005 Junta de Andalucía

Autor/es (Author/s):

- Vicente J. Ruiz Jurado <vjrj@tid.es>

Este fichero es parte de bb-assist.

bb-assist es software libre. Puede redistribuirlo y/o modificarlo 
bajo los términos de la Licencia Pública General de GNU según es 
publicada por la Free Software Foundation, bien de la versión 2 de dicha
Licencia o bien (según su elección) de cualquier versión posterior. 

bb-assist se distribuye con la esperanza de que sea útil, 
pero SIN NINGUNA GARANTÍA, incluso sin la garantía MERCANTIL 
implícita o sin garantizar la CONVENIENCIA PARA UN PROPÓSITO 
PARTICULAR. Véase la Licencia Pública General de GNU para más detalles. 

Debería haber recibido una copia de la Licencia Pública General 
junto con bb-assist. Si no ha sido así, escriba a la Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA.

-------------------------------------------------------------------------

This file is part of bb-assist.

bb-assist is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
at your option) any later version.

bb-assist is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Foobar; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
"""

import pygtk
pygtk.require("2.0")

import gtk
import gtk.glade
import gnome.ui
import gnome
import getopt, sys, os, tempfile, time
import gettext, locale
import socket, struct
import dbus
import bbexpbackend
import bbsysbackend
from bbutils import *
from xml.dom.ext.reader import PyExpat
from xml.xpath          import Evaluate
from Ft.Xml             import MarkupWriter
from Ft.Xml.Xslt        import Processor
from Ft.Xml             import InputSource
from Ft.Lib.Uri         import OsPathToUri;

app_name = "bb-assist"
app_version = "0.0.1"
diri18n = 'i18n'

# i18n
_=gettext.gettext
locale.setlocale(locale.LC_ALL, '')
gtk.glade.bindtextdomain(app_name, diri18n)
gtk.glade.textdomain(app_name)
gettext.install(app_name, diri18n, unicode=1)
#msg_lang = locale.getlocale()[0]
msg_lang = 'es_ES' # Only Spanish support now

def getParams():
    try:
        (opts, args) = getopt.getopt(sys.argv[1:], "v", ["verbose"])
    except getopt.GetoptError:
        usage()
        sys.exit()
    global verbose 
    verbose = False
    for o in opts:
        if o[0] in ("-v", "--verbose"):
            verbose = True
    
def usage():
    sys.stderr.write("Usage: %s [--verbose] [--help]\n\t%s\n" %(sys.argv[0], ""))

def error_dialog(message, parent_dialog):
    dialog = gtk.MessageDialog(parent_dialog,
                               gtk.DIALOG_MODAL|gtk.DIALOG_DESTROY_WITH_PARENT,
                               gtk.MESSAGE_ERROR, gtk.BUTTONS_OK, message)
    dialog.set_position (gtk.WIN_POS_CENTER)
    ret = dialog.run()
    dialog.destroy()
    return ret

class Assist:
    def initdbus(self):

        try: self.bus = dbus.SystemBus()
        except:
            self.dbusrunning = False
            return
        self.hal_manager_obj = self.bus.get_object("org.freedesktop.Hal",
                                                   "/org/freedesktop/Hal/Manager")
        self.hal_manager = dbus.Interface(self.hal_manager_obj,
                                          "org.freedesktop.Hal.Manager")
        
    def __init__(self):
        self.dbusrunning = True
        self.providers = []
        self.devs = []
        self.pub_operations = []
        self.provider = None
        self.devcf = None
        self.operation_sel = None
        self.ethlist = []
        self.ttylist = []
        self.tty_to_use = None # we use this to access the dev
        self.eth_to_use = None # we use this to access the dev
        
        self.oper_result = None
        self.finish_assist = False
        self.portsGuiConf = False
        
        # load the interface
        self.glade = gtk.glade.XML('%s/bb-assist.glade' % GLADEDIR)
    
        # get widgets
        for widget in self.glade.get_widget_prefix(""):
            setattr(self, widget.get_name(), widget)

        self.glade.signal_autoconnect(self)
    
        self.windowIni.connect("delete_event", self.on_druid1_cancel)

        # dbus init
        self.initdbus()
                
        self.druid1.finish.set_label('gtk-close')
        self.windowIni.set_icon_from_file(os.path.join(PIXMAPSDIR, "bb-assist16.png"))
        self.dialogCancelDestroy.set_icon_from_file(os.path.join(PIXMAPSDIR, "bb-assist16.png"))
        
        # Workaround for some bug in glade and pixmap directories
        self.imageProgressBar.set_from_file(os.path.join(PIXMAPSDIR, "bb-assist48.png"))
        self.logo = gtk.gdk.pixbuf_new_from_file(os.path.join(PIXMAPSDIR, "bb-assist48.png"))
        path_druid_pages = "druid_page"
        druid_pages_to_update = searchPathXml(path_druid_pages, 'druidpages.xml')
        for druid_page in druid_pages_to_update:
            druid_page_to_act = gtk.glade.XML.get_widget(self.glade, druid_page.getAttribute("id"))
            druid_page_to_act.set_logo(self.logo)        

        # Show Start_Page and Finish Page in druid
        # http://www.async.com.br/faq/pygtk/index.py?req=show&file=faq23.013.htp       
        self.druidpagestart.set_logo_bg_color(gtk.gdk.color_parse("#087021"))
        self.druidpagestart.set_bg_color(gtk.gdk.color_parse("#087021"))
        self.druidpagefinish.set_logo_bg_color(gtk.gdk.color_parse("#087021"))
        self.druidpagefinish.set_bg_color(gtk.gdk.color_parse("#087021"))
        self.druidpagestart.show()
        self.druidpagefinish.show()
        
    # Watch cursors

    def show_cursor_watch(self, *args):
        cursor = gtk.gdk.Cursor(gtk.gdk.WATCH)
        self.windowIni.window.set_cursor(cursor)
        gtk.gdk.flush()

    def hide_cursor_watch(self, *args):
        self.windowIni.window.set_cursor(None)

    # Cancel events and dialog and Finish
    
    def on_druid1_cancel(self, *args):
        self.dialogCancelDestroy.connect("delete_event",
                                         self.on_dialogCancelDestroy_close)
        self.dialogCancelDestroy.show()
        self.windowIni.set_sensitive(False)
        return True

    def on_dialogCancelDestroy_delete_event(self, *args):
        self.dialogCancelDestroy.hide()
        self.windowIni.set_sensitive(True)
        return True
    
    def on_cancelbutton1_clicked(self, *args):
        self.dialogCancelDestroy.hide()
        self.windowIni.set_sensitive(True)
        
    def on_okbutton1_clicked(self, *args):
        gtk.main_quit()
        
    def on_dialogCancelDestroy_close(self, *args):
        self.dialogCancelDestroy.hide()
        self.windowIni.set_sensitive(True)

    # Verifications

    def on_druidVerificationResults_prepare(self, *args):
        self.show_cursor_watch()
        founded_eth = False
        founded_serial = False
        founded_usb = False
        ethlist = []
        ttylist = []
        msg = ""
        if not self.dbusrunning:
            # We use dbus/hal to get interfaces and ports info
            msg = msg + _("<b>ERROR:</b> Dbus/Hal no está funcionando correctamente" + ".\n"
                          "No se puede continuar con el asistente.")
            self.iniVerifResults.set_text(msg)
            self.iniVerifResults.set_use_markup(True)
            self.finish_assist = True
            self.hide_cursor_watch()
            return
        for udi in self.hal_manager.FindDeviceByCapability ('net'):
            obj = self.bus.get_object('org.freedesktop.Hal', udi)
            obj = dbus.Interface(obj, 'org.freedesktop.Hal.Device')
            interface = obj.GetPropertyString('net.interface')
            info_cat = obj.GetPropertyString('info.category')
            if info_cat == 'net.80203':
                #msg = msg + '* ' + _('Interfaz Ethernet') + " " + \
                #      interface + " " + _('encontrado') + '\n'
                founded_eth = True
                self.ethlist += [interface]
        if founded_eth:
            msg = msg + _('<b>Se han encontrado</b> interfaces Ethernet') + '\n'
        else:
            msg = msg + _('<b>No se han encontrado</b> interfaces Ethernet') + '\n'
        msg = msg + "   " + _('Estos son necesarios para poder usar y/o configurar ciertos equipos tipo router') + '\n'
        for udi in self.hal_manager.FindDeviceByCapability ('serial'):
            obj = self.bus.get_object('org.freedesktop.Hal', udi)
            obj = dbus.Interface(obj, 'org.freedesktop.Hal.Device')
            serial = obj.GetPropertyString('linux.device_file')
            #msg = msg + '* ' + _('Puerto serie') + " " + serial + " " + \
            #      _('encontrado') + '\n'
            founded_serial = True
            self.ttylist += [serial]
        if founded_serial:
             msg = msg + _('<b>Se han encontrado</b> puertos serie (COM)') + '\n'
        else:
            msg = msg + _('<b>No se han encontrado</b> puertos serie (COM)') + '\n'
        msg = msg + "   " + _('Estos son necesarios para poder configurar ciertos equipos tipo router') + '\n'           
        for udi in self.hal_manager.FindDeviceStringMatch('info.bus','usb'):
            founded_usb = True
        if founded_usb:
             msg = msg + _('<b>Se han encontrado</b> puertos USB') + '\n'
        else:
            msg = msg + _('<b>No se han encontrado</b> puertos USB') + '\n'
        msg = msg + "   " +  _('Estos son necesarios para poder configurar equipos USB') + '\n'
        self.iniVerifResults.set_text(msg)
        self.iniVerifResults.set_use_markup(True)
        self.hide_cursor_watch()

    def on_druidVerificationResults_next(self, *args):
        if self.finish_assist:
            self.oper_result="ExitVerifErrors"
            self.druid1.set_page(self.druidpagefinish)
            
    # Provider and Device Select

    def getProviders(self, *args):
        path_prov = "provider"
        providernodes = searchPathXml(path_prov, 'providers.xml')
        for providernode in providernodes:
            self.providers += [provider(providernode)]
            self.comboprovider.append_text(providernode.getAttribute("name"))
            self.comboprovider.set_sensitive(True)
        if len(self.providers) == 0:
            self.comboprovider.append_text(_("No hay operadoras disponibles"))
            self.comboprovider.set_sensitive(False)
        self.comboprovider.set_active(0)
        
    def remProviders(self, *args):
        for prov in self.providers:
            self.comboprovider.remove_text(0)
        self.providers = []
        self.provider = None
        
    def on_druidProviderSelect_prepare(self, *args):
        if self.provider:
            #self.druid1.set_buttons_sensitive(True, True, True, True)
            pass
        else:
            #self.druid1.set_buttons_sensitive(True, False, True, True)
            self.remProviders()
            self.getProviders()

    def getDevices(self, *args):
        path_dev = "bb_device/provider_list/provider[@id=" + \
                   self.provider.prov_id + "]/../.."
        devnodes = searchPathXml(path_dev, 'bb-device.xml')
        for devnode in devnodes:
            supported = Evaluate("support/text( )", devnode)[0].nodeValue
            if supported == '1':
                self.devs += [bb_device(devnode, self.provider)]
                self.combodevicesel.append_text(devnode.getAttribute("name"))
                self.combodevicesel.set_sensitive(True)
        if len(self.devs) == 0:
            self.combodevicesel.append_text(_("No hay dispositivos disponibles"))
            self.combodevicesel.set_sensitive(False)
        self.combodevicesel.set_active(0)

    def remDevices(self, *args):
        if len(self.devs) == 0:
            self.combodevicesel.remove_text(0) # Erase also "No dev message"
        for dev in self.devs:
            self.combodevicesel.remove_text(0)
        self.devs = []
        self.devcf = None
        
    def getOperations(self, *args):
        path_oper = "operation[@bb_device=" + self.devcf.id \
                    + " and @supported='1' and @ui_public='1']"
        opernodes = searchPathXml(path_oper, 'operations.xml')
        for opernode in opernodes:
            self.pub_operations += [operation(opernode)]
            combotext_xpath = "opername_list/opername[@lang='" + msg_lang  + "']"
            self.combooperationsel.append_text(Evaluate(combotext_xpath,
                                                        opernode)[0].getAttribute("name"))
            self.combooperationsel.set_sensitive(True)
        if len(self.pub_operations) == 0:
            self.combooperationsel.append_text(_("No hay operaciones disponibles"))
            self.combooperationsel.set_sensitive(False)
        self.combooperationsel.set_active(0)    

    def remOperations(self, *args):
        if len(self.pub_operations) == 0:
            self.combooperationsel.remove_text(0) # Erase also "No operations message"
        for oper in self.pub_operations:
            self.combooperationsel.remove_text(0)
        self.pub_operations = []
        self.operation_sel = None
    
    def on_druidDeviceSel_prepare(self, *args):
        if self.devcf:
            self.druid1.set_buttons_sensitive(True, True, True, True)
        else:
            self.druid1.set_buttons_sensitive(True, False, True, True)
            
    def on_comboprovider_changed(self, *args):
        if len(self.providers) != 0:
            self.provider = self.providers[self.comboprovider.get_active()]
            self.druid1.set_buttons_sensitive(True, True, True, True)
            self.remDevices()
            self.getDevices()

    def on_combodevicesel_changed(self, *args):          
        if len(self.devs) != 0:
            self.devcf = bb_device_conf(self.devs[self.combodevicesel.get_active()])
            self.druid1.set_buttons_sensitive(True, True, True, True)
            self.remOperations()
            self.getOperations()

    # Operation Select

    def hideDruidPagesOptional(self, *args):
        path_druid_pages = "druid_page[@optional='1']"
        druid_pages_to_hide = searchPathXml(path_druid_pages, 'druidpages.xml')
        for druid_page in druid_pages_to_hide:
            druid_page_to_act = gtk.glade.XML.get_widget(self.glade, druid_page.getAttribute("id"))
            druid_page_to_act.hide()
            
    def on_druidOperationSelect_prepare(self, *args):
        if self.operation_sel:
            self.druid1.set_buttons_sensitive(True, True, True, True)
        else:
            self.druid1.set_buttons_sensitive(True, False, True, True)
            self.hideDruidPagesOptional()
            
    def on_combooperationsel_changed(self, *args):
        if len(self.pub_operations) != 0:
            self.devcf.param = {} # FIXME: check if it's correct
            self.operation_sel = self.pub_operations[self.combooperationsel.get_active()]
            self.druid1.set_buttons_sensitive(True, True, True, True)
            druid_pages_to_act = self.operation_sel.druid_page_list
            self.hideDruidPagesOptional()
            for druid_page in druid_pages_to_act:
                druid_page_to_act = gtk.glade.XML.get_widget(self.glade, druid_page)
                druid_page_to_act.show()

    def on_druidOperationSelect_next(self, *args):
        self.devcf.param['mod_conf'] = ""
        if self.operation_sel.id == '0002' or self.operation_sel.id == '0008':
            self.devcf.param['mod_conf'] = "monostatic"
        elif self.operation_sel.id == '0003' or self.operation_sel.id == '0009':
            self.devcf.param['mod_conf'] = "monodinamic"
        elif self.operation_sel.id == '0004' or self.operation_sel.id == '0010':
            self.devcf.param['mod_conf'] = "multistatic"
            self.devcf.param['dhcp'] = 'True'
        elif self.operation_sel.id == '0005' or self.operation_sel.id == '0011':
            self.devcf.param['mod_conf'] = "multidinamic"
            self.devcf.param['dhcp'] = 'True'
        if self.portsGuiConf == False:
            # Do this only one time (eth/ser don't change)
            for act_tty in self.ttylist:
                self.comboboxserialport.append_text(act_tty)
                self.comboboxserialport.set_active(0)
                self.tty_to_use = self.comboboxserialport.get_active_text()
            for act_eth in self.ethlist:
                self.comboboxetheport.append_text(act_eth)
                self.comboboxetheport.set_active(0)
                self.eth_to_use = self.comboboxetheport.get_active_text()
            self.portsGuiConf = True
            
    # Conf Params

    def on_druidUsuIP_next(self, *args):
        try: self.devcf.param['usu_ip'] = socket.inet_ntoa(socket.inet_aton(self.usuIP.get_text()))
        except socket.error:
            error_dialog(_("Error en") + ": " + \
                         self.usuIpLabel.get_text(), self.windowIni)
            self.druid1.set_page(self.druidUsuIP)
            return True
        try: self.devcf.param['usu_mask'] = socket.inet_ntoa(socket.inet_aton(self.usuMask.get_text()))
        except socket.error:
            error_dialog(_("Error en") + ": " + \
                         self.usuMaskLabel.get_text(), self.windowIni)
            self.druid1.set_page(self.druidUsuIP)
            return True

    def on_druidGestIP_next(self, *args):
        try: socket.inet_aton(self.gestIP.get_text())
        except socket.error:
            error_dialog(_("Error en") + ": " + \
                         self.gestIpLabel.get_text(), self.windowIni)
            self.druid1.set_page(self.druidGestIP)
            return True
        try: socket.inet_aton(self.gestMask.get_text())
        except socket.error:
            error_dialog(_("Error en") + ": " + \
                         self.gestMaskLabel.get_text(), self.windowIni)
            self.druid1.set_page(self.druidGestIP)
            return True

    def on_druidDinamConf_next(self, *args):
        self.devcf.param['PPPuser'] = self.PPPuser.get_text()
        self.devcf.param['PPPpasswd'] = self.PPPpasswd.get_text()
        if self.devcf.param['PPPuser'] == "":
            error_dialog(_("Usuario incorrecto"), self.windowIni)
            return True
        if self.devcf.param['PPPpasswd'] == "":
            error_dialog(_("Password incorrecta"), self.windowIni)
            return True

    def on_druidMultiConf_next(self, *args):
        if self.devcf.param['dhcp'] == 'True':
            try: socket.inet_aton(self.dhcpIPaddressEntry.get_text())
            except socket.error:
                error_dialog(_("Error en") + ": " + \
                             self.dhcpIPaddressLabel.get_text(), self.windowIni)
                self.druid1.set_page(self.druidMultiConf)
                return True
            try: socket.inet_aton(self.dhcpMaskEntry.get_text())
            except socket.error:
                error_dialog(_("Error en") + ": " + \
                             self.dhcpMaskLabel.get_text(), self.windowIni)
                self.druid1.set_page(self.druidMultiConf)
                return True
        else:
            try: socket.inet_aton(self.IPaddressPcEntry.get_text())
            except socket.error:
                error_dialog(_("Error en") + ": " + \
                             self.IPaddressPcLabel.get_text(), self.windowIni)
                self.druid1.set_page(self.druidMultiConf)
                return True
            try: socket.inet_aton(self.maskAddressPcEntry.get_text())
            except socket.error:
                error_dialog(_("Error en") + ": " + \
                             self.maskAddressPcLabel.get_text(), self.windowIni)
                self.druid1.set_page(self.druidMultiConf)
                return True
        try: socket.inet_aton(self.ipGatewayEntry.get_text())
        except socket.error:
            error_dialog(_("Error en") + ": " + \
                         self.ipGatewayLabel.get_text(), self.windowIni)
            self.druid1.set_page(self.druidMultiConf)
            return True
        
    def on_sinDhcpRadioButton_clicked(self, *args):
        if self.dhcpRadioButton.get_active():
            self.devcf.param['dhcp'] = 'True'
            self.IPaddressPcEntry.set_sensitive(False)
            self.maskAddressPcEntry.set_sensitive(False)
            self.dhcpIPaddressEntry.set_sensitive(True)
            self.dhcpMaskEntry.set_sensitive(True)   
        else:
            self.devcf.param['dhcp'] = 'False'
            self.IPaddressPcEntry.set_sensitive(True)
            self.maskAddressPcEntry.set_sensitive(True)
            self.dhcpIPaddressEntry.set_sensitive(False)
            self.dhcpMaskEntry.set_sensitive(False)

    def on_checkbuttonDefPasswd_toggled(self, *args):
        if self.checkbuttonDefPasswd.get_active():
            self.entryOtherPasswd.set_sensitive(True)
        else:
            self.entryOtherPasswd.set_sensitive(False)
                    
    def on_druidPasswdSel_next(self, *args):
        if self.checkbuttonDefPasswd.get_active():
            if self.entryOtherPasswd.get_text() == "":
                error_dialog(_("Introduzca una contraseña correcta"), \
                             self.windowIni)
                self.druid1.set_page(self.druidPasswdSel)
                return True

    def on_druidNewPasswd_next(self, *args):
        if self.entryNewPasswd.get_text() == "":
            error_dialog(_("Introduzca una contraseña correcta"), \
                         self.windowIni)
            self.druid1.set_page(self.druidNewPasswd)
            return True
    
    def on_comboboxSerialPort_changed(self, *args):
        self.tty_to_use = self.comboboxserialport.get_active_text()
        self.eth_to_use = None

    def on_comboboxEthePort_changed(self, *args):
        self.eth_to_use = self.comboboxetheport.get_active_text()
        self.tty_to_use = None

    def on_druidSelecInterface_next(self, *args):
        if self.radiobuttonSerialPort.get_active():
            self.tty_to_use = self.comboboxserialport.get_active_text()
            self.eth_to_use = None
        else:
            self.tty_to_use = None
            self.eth_to_use = self.comboboxetheport.get_active_text()
            try: socket.inet_aton(self.entryIpDevToConf.get_text())
            except socket.error:
                error_dialog(_("Error en") + ": " + \
                             self.ipAddressDevActLabel.get_text(), self.windowIni)
                self.druid1.set_page(self.druidSelecInterface)
                return True

    def on_druidVerifParamsConf_prepare(self, *args):
        # Commons vars
        if self.checkbuttonDefPasswd.get_active():
            self.devcf.param['passwd1'] = self.entryOtherPasswd.get_text()
        else:  
            self.devcf.param['passwd1'] = self.devcf.default_passwd

        if (self.devcf.param['mod_conf'] == "monostatic"):
            self.devcf.param['remote_ip']       = ipMasqIncrem(self.gestIP.get_text(),
                                                               self.gestMask.get_text(), 2)
            self.devcf.param['remote_mask']     = self.gestMask.get_text()
            self.devcf.param['ext_ip_router']   = self.gestIP.get_text()
            self.devcf.param['ext_mask_router'] = self.gestMask.get_text()
            self.devcf.param['int_ip_router']   = ipMasqIncrem(self.usuIP.get_text(),
                                                               self.usuMask.get_text(), 1)
            self.devcf.param['int_mask_router'] = self.usuMask.get_text()
            self.devcf.param['ip_computer']     = self.usuIP.get_text()
            self.devcf.param['mask_computer']   = self.usuMask.get_text()
            self.devcf.param['gw_computer']     = self.devcf.param['int_ip_router']
            # FIXME: configure Ethernet Computer

        if (self.devcf.param['mod_conf'] == "monodinamic"):
            self.devcf.param['remote_ip']       = '' # Bridged
            self.devcf.param['remote_mask']     = '' # Bridged
            self.devcf.param['ext_ip_router']   = '' # Bridged
            self.devcf.param['ext_mask_router'] = '' # Bridged
            self.devcf.param['int_ip_router']   = '' # Bridged
            self.devcf.param['int_mask_router'] = '' # Bridged
            self.devcf.param['ip_computer']     = '' # PPPOE
            self.devcf.param['mask_computer']   = '' # PPPOE
            self.devcf.param['gw_computer']     = '' # PPPOE
            # FIXME : Configure PPPOE

        if (self.devcf.param['mod_conf'] == "multistatic"):
            self.devcf.param['remote_ip']       = ipMasqIncrem(self.usuIP.get_text(),
                                                               self.usuMask.get_text(), 2)
            self.devcf.param['remote_mask']     = self.usuMask.get_text()
            self.devcf.param['ext_ip_router']   = self.usuIP.get_text()
            self.devcf.param['ext_mask_router'] = self.usuMask.get_text()
            self.devcf.param['int_ip_router']   = self.ipGatewayEntry.get_text()
            if self.devcf.param['dhcp'] == 'True':
                self.devcf.param['int_mask_router'] = self.dhcpMaskEntry.get_text()
            else:
                self.devcf.param['int_mask_router'] = self.maskAddressPcEntry.get_text()
                                    
        if (self.devcf.param['mod_conf'] == "multidinamic"):
            self.devcf.param['remote_ip']       = '' # PPPOA
            self.devcf.param['remote_mask']     = '' # PPPOA
            self.devcf.param['ext_ip_router']   = '' # PPPOA
            self.devcf.param['ext_mask_router'] = '' # PPPOA
            self.devcf.param['int_ip_router']   = self.ipGatewayEntry.get_text()
            if self.devcf.param['dhcp'] == 'True':
                self.devcf.param['int_mask_router'] = self.dhcpMaskEntry.get_text()
            else:
                self.devcf.param['int_mask_router'] = self.maskAddressPcEntry.get_text()
                
        if (self.devcf.param['mod_conf'] == "multidinamic") or \
               (self.devcf.param['mod_conf'] == "multistatic"):
            if self.devcf.param['dhcp'] == 'True':
                self.devcf.param['dhcp_ip_start'] = self.dhcpIPaddressEntry.get_text()
                broad = struct.unpack('>L',socket.inet_aton(self.dhcpIPaddressEntry.get_text()))[0] | \
                        (struct.unpack('>L',socket.inet_aton('255.255.255.255'))[0] - \
                         struct.unpack('>L',socket.inet_aton(self.dhcpMaskEntry.get_text()))[0])
                self.devcf.param['dhcp_ip_end'] = socket.inet_ntoa(struct.pack('>L', broad))
                self.devcf.param['dhcp_mask'] = self.dhcpMaskEntry.get_text()
                self.devcf.param['dhcp_ip_gw'] = self.ipGatewayEntry.get_text()
                self.devcf.param['dns1'] = self.provider.dns1
                self.devcf.param['dns2'] = self.provider.dns2
                # ip_computer = mask_computer = gw_computer = [configuredByDHCP]
                # FIMXE: configure Ethernet with DHCP
            else:
                self.devcf.param['ip_computer']   = self.IPaddressPcEntry.get_text()
                self.devcf.param['mask_computer'] = self.maskAddressPcEntry.get_text()
                self.devcf.param['gw_computer']   = self.ipGatewayEntry.get_text()
                # FIXME: configure Ethernet Computer
     
        if self.operation_sel.id == '0006':
            self.devcf.param['passwd2'] = self.entryNewPasswd.get_text()
            # FIXME check sizes
        
        msg =  boldme(_("Operación")) + ": " + self.operation_sel.opername[msg_lang] + "\n"
        msg += boldme(_("Dispositivo")) + ": " + self.devcf.name + "\n"

        if self.tty_to_use:
            msg += boldme(_('Parámetros serie')) + ": "
            msg += 'tty: ' + self.tty_to_use + ", "
            msg += 'baudrate: ' + self.devcf.tty_conf.tty_baudrate + ", "
            msg += 'bits: ' + self.devcf.tty_conf.tty_bits + ", "
            msg += 'parity: ' + self.devcf.tty_conf.tty_parity + ", "
            msg += 'stopbits: ' + self.devcf.tty_conf.tty_stopbits + ", "
            msg += 'xonxoff: ' + self.devcf.tty_conf.tty_xonxoff + ", "
            msg += 'rtscts: ' + self.devcf.tty_conf.tty_rtscts + "\n"
        else:
            msg += boldme(_('Parámetros ethernet')) + ": "
            msg += 'dev: ' + self.eth_to_use + ", "
            msg += 'ip: ' + self.entryIpDevToConf.get_text() + ", "
            msg += 'port: ' + self.devcf.eth_conf_port + "\n"

        msg += boldme(_('Otros Parámetros de la operación')) + ":\n"
        for actparam in self.devcf.param.keys():
            if len(self.devcf.param[actparam]) > 0:
                msg += "* " + actparam + ": " + self.devcf.param[actparam] + "\n"
        
        self.verifParamConfLabel.set_text(msg)
        self.verifParamConfLabel.set_use_markup(True)

    def on_druidRunOper_prepare(self, *args):
        self.druid1.next.set_label('gtk-apply')

    def on_druidRunOper_back(self, *args):
        self.druid1.next.set_label('gtk-go-forward')

    def callBackEnd(self, *args):
        self.show_cursor_watch()
        output_xmlfile = tempfile.NamedTemporaryFile()
        writer = MarkupWriter(output_xmlfile, encoding='iso-8859-1', indent=u"yes")
        writer.startDocument()
        writer.startElement(u'operation')
        writer.startElement(u'model')
        writer.text(self.devcf.name)
        writer.endElement(u'model')
        writer.startElement(u'initial_func')
        writer.text(self.operation_sel.initial_func)
        writer.endElement(u'initial_func')
        writer.startElement(u'default_timeout')
        writer.text(self.operation_sel.default_timeout)
        writer.endElement(u'default_timeout')
        writer.startElement(u'send_delay')
        writer.text(self.operation_sel.send_delay)
        writer.endElement(u'send_delay')
        if self.tty_to_use:
            writer.startElement(u'serial_params')
            writer.attribute(u'tty', unicode(self.tty_to_use.strip("/dev/ttyS")))
            writer.attribute(u'baudrate', unicode(self.devcf.tty_conf.tty_baudrate))
            writer.attribute(u'bits', unicode(self.devcf.tty_conf.tty_bits))
            writer.attribute(u'parity', unicode(self.devcf.tty_conf.tty_parity))
            writer.attribute(u'stopbits', unicode(self.devcf.tty_conf.tty_stopbits))
            writer.attribute(u'xonxoff', unicode(self.devcf.tty_conf.tty_xonxoff))
            writer.attribute(u'rtscts', unicode(self.devcf.tty_conf.tty_rtscts))
            writer.endElement(u'serial_params')
        else:
            writer.startElement(u'eth_params')
            writer.attribute(u'dev', unicode(self.eth_to_use))
            writer.attribute(u'ip', unicode(self.entryIpDevToConf.get_text()))
            writer.attribute(u'port', unicode(self.devcf.eth_conf_port))
            writer.endElement(u'eth_params')
        for actparam in self.devcf.param.keys():
            writer.startElement(unicode(actparam))
            writer.text(unicode(self.devcf.param[actparam]))
            writer.endElement(unicode(actparam))
        writer.endElement(u'operation')
        writer.endDocument()
        output_xmlfile.flush()        

        processor = Processor.Processor()
        xsl_cmd_list  = InputSource.DefaultFactory.fromUri(OsPathToUri(os.path.join(PATH, "cmd-list.xsl")))
        xml_operation = InputSource.DefaultFactory.fromUri(OsPathToUri(output_xmlfile.name))
        processor.appendStylesheet(xsl_cmd_list)
        cmd_lines_result = processor.run(xml_operation)
        msg =  "\n"
        msg += "********************************************\n"
        msg +=  _("XML operation") + "\n" # Debug msg
        msg += "********************************************\n"
        msg += open(output_xmlfile.name).read( )
        msg += "\n"
        msg += "\n"
        msg += "********************************************\n"
        msg += _("XSL/XML command lines") + "\n"
        msg += "********************************************\n"
        msg += cmd_lines_result
        msg += "\n"

        # Show debug temporary output
        self.labelOperDebug.set_text(msg)
        self.labelOperDebug.set_use_markup(False)

        # Exec operation
        exp_input_file  = tempfile.NamedTemporaryFile()
        exp_output_file = tempfile.NamedTemporaryFile()
        exp_input_file.writelines(cmd_lines_result)
        exp_input_file.flush()

        try: retOper = bbexpbackend.processOper(exp_input_file, exp_output_file)
        except:
            self.hide_cursor_watch()
            msg += _("Error en la sintaxis de la operación")
        exp_output_file.flush()        
        msg += "\n"
        msg += "********************************************\n"
        msg += _("Operation output") + "\n" # Debug msg
        msg += "********************************************\n"
        msg += open(exp_output_file.name).read( )
        msg += "\n"

        if retOper == BBNOERR:
            msgResult = _("Operación realizada con éxito")
        elif retOper == BBERRGEN:
            msgResult = _("Error en la operación") + ": " + \
                        _("Por favor envíe un informe de error con los detalles de la operación al foro FIXME")
        elif retOper == BBERREOF:
            msgResult = _("Error en la operación") + ": " + \
                        _("Se ha interrumpido la conexión con el equipo inesperadamente")
        elif retOper == BBERRTOUT:
            msgResult = _("Error en la operación") + ": " + \
                        _("Tiempo de espera excedido")
        elif retOper == BBERRPWD:
            msgResult = _("Error en la operación") + ": " + \
                        _("No se ha podido autenticar contra el equipo.")
        elif retOper == BBERRDHCP:
            msgResult = _("Error configurando el servidor DHCP") + ": " + \
                        _("Parámetros incorrectos.")
        elif retOper == BBERRLOCK:
            msgResult = _("Error en la operación") + ": " + \
                        _("Puerto serie bloqueado.")
        else:
            msgResult = _("Error en la operación") + ": " + \
                        _("Resultado inexperado.")
        if retOper != BBNOERR:
            msgResult = boldme(msgResult) + "\n\n" + \
                        _("Puede intentar reintentar la operación ") + \
                        _("pulsando <b>Atrás</b> cambiando algún parámetro ") + \
                        _("y luego volviendo a <b>Aplicar</b>.")
        else:
            msgResult = boldme(msgResult)
        self.labelOperDebug.set_text(msg)
        self.labelOperDebug.set_use_markup(False)
        self.labelOperResult.set_text(msgResult)
        self.labelOperResult.set_use_markup(True)
        self.hide_cursor_watch()

    def on_druidRunOper_next(self, *args):
        self.druid1.next.set_label('gtk-go-forward')
        self.callBackEnd()
        # self.druid1.back.hide() # With this we can't repeat operations

    # Finish
                     
    def on_druidpagefinish_finish(self, *args):
        gtk.main_quit()

    def on_druidpagefinish_back(self, *args):
        if self.oper_result == "ExitVerifErrors":
            self.druid1.set_page(self.druidVerificationResults)
            return True
        
    def main(self):
        gtk.main()
       
if __name__ == "__main__":
    gnome.program_init(app_name, app_version)
    getParams()
    if os.geteuid() != 0:
        dialogNotRoot = gtk.MessageDialog(None, 0, gtk.MESSAGE_ERROR, gtk.BUTTONS_OK,
                                   _("Necesita ser root para ejecutar este programa"))
        dialogNotRoot.run()
        dialogNotRoot.destroy()
        sys.exit(1)
    assist = Assist()
    assist.main()
