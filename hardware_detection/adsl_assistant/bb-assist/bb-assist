#!/usr/bin/env python
# -*- coding: UTF8 -*-

"""
bb-assist - A DSL Assistant Configurator

Copyright (C) 2005 Junta de Andalucía

Autor/es (Author/s):

- Vicente J. Ruiz Jurado <vjrj@tid.es>

Este fichero es parte de bb-assist.

bb-assist es software libre. Puede redistribuirlo y/o modificarlo 
bajo los términos de la Licencia Pública General de GNU según es 
publicada por la Free Software Foundation, bien de la versión 2 de dicha
Licencia o bien (según su elección) de cualquier versión posterior. 

bb-assist se distribuye con la esperanza de que sea útil, 
pero SIN NINGUNA GARANTÍA, incluso sin la garantía MERCANTIL 
implícita o sin garantizar la CONVENIENCIA PARA UN PROPÓSITO 
PARTICULAR. Véase la Licencia Pública General de GNU para más detalles. 

Debería haber recibido una copia de la Licencia Pública General 
junto con bb-assist. Si no ha sido así, escriba a la Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA.

-------------------------------------------------------------------------

This file is part of bb-assist.

bb-assist is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
at your option) any later version.

bb-assist is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Foobar; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
"""

import pygtk
pygtk.require("2.0")

import gtk
import gtk.glade
import gnome.ui
import gnome
import getopt, sys, os, tempfile
import gettext, locale
import socket
import dbus
from xml.dom.ext.reader import PyExpat
from xml.xpath          import Evaluate
from Ft.Xml             import MarkupWriter
from Ft.Xml.Xslt        import Processor
from Ft.Xml             import InputSource
from Ft.Lib.Uri         import OsPathToUri;

app_name = "bb-assist"
app_version = "0.0.1"
diri18n = 'i18n'

# i18n
_=gettext.gettext
locale.setlocale(locale.LC_ALL, '')
gtk.glade.bindtextdomain(app_name, diri18n)
gtk.glade.textdomain(app_name)
gettext.install(app_name, diri18n, unicode=1)
#msg_lang = locale.getlocale()[0]
msg_lang = 'es_ES' # Only Spanish support now

# Paths
PATH = '/usr/share/bb-assist/'
#PATH = './'
GLADEDIR = os.path.join(PATH, 'glade')
PIXMAPSDIR = os.path.join(GLADEDIR, 'pixmaps')

def getParams():
    try:
        (opts, args) = getopt.getopt(sys.argv[1:], "v", ["verbose"])
    except getopt.GetoptError:
        usage()
        sys.exit()
    global verbose 
    verbose = False
    for o in opts:
        if o[0] in ("-v", "--verbose"):
            verbose = True

def boldme(string):
    return "<b>" + string + "</b>"
    
def usage():
    sys.stderr.write("Usage: %s [--verbose] [--help]\n\t%s\n" %(sys.argv[0], ""))

def error_dialog(message, parent_dialog):
    dialog = gtk.MessageDialog(parent_dialog,
                               gtk.DIALOG_MODAL|gtk.DIALOG_DESTROY_WITH_PARENT,
                               gtk.MESSAGE_ERROR, gtk.BUTTONS_OK, message)
    dialog.set_position (gtk.WIN_POS_CENTER)
    ret = dialog.run()
    dialog.destroy()
    return ret

def searchPathXml(search_path, xmlfile):
    reader = PyExpat.Reader( )
    xml_file = open(os.path.join(PATH, xmlfile), "r")
    dom = reader.fromStream(xml_file)
    return Evaluate(search_path, dom.documentElement)

class provider:
    def __init__(self, xpath_devnode = None):
        if xpath_devnode == None:
            self.prov_id = ""
            self.prov_name = ""
        else:
            self.prov_id   = xpath_devnode.getAttribute("id")
            self.prov_name = xpath_devnode.getAttribute("name")
    def __str__(self):      
        return "%s %s" % (self.prov_id, self.prov_name)

class tty_conf:
    def __init__(self, id_tty = ""):
        if id_tty == "":
            self.tty_id = ""
            self.tty_baudrate = ""
            self.tty_bits = ""
            self.tty_parity = ""
            self.tty_stopbits = ""
            self.tty_xonxoff = ""
            self.tty_rtscts = ""
        else:
            path_tty = "tty_conf[@id=" + id_tty + "]"
            devnode = searchPathXml(path_tty, 'ttyconf.xml')
            if (len(devnode) <> 1):
                raise SyntaxError, _("en tty_conf")
            self.tty_id = id_tty
            self.tty_baudrate = devnode[0].getAttribute("baudrate")
            self.tty_bits = devnode[0].getAttribute("bits")
            self.tty_parity = devnode[0].getAttribute("parity")
            self.tty_stopbits = devnode[0].getAttribute("stopbits")
            self.tty_xonxoff = devnode[0].getAttribute("xonxoff")
            self.tty_rtscts = devnode[0].getAttribute("rtscts")
    def __str__(self):      
        return "%s %s" % (self.tty_id, self.tty_baudrate)

class devicetype:
    def __init__(self, id_devtype = ""):
        if id_devtype == "":
            self.dt_id = ""
            self.dt_name = ""
        else:
            self.dt_id = id_devtype
            path_dt = "devicetype[@id=" + id_devtype + "]"
            devnode = searchPathXml(path_dt, 'devicetypes.xml')
            if (len(devnode) <> 1):
                raise SyntaxError, _("en devicetype")
            self.dt_name = devnode[0].getAttribute("name")
    def __str__(self):      
        return "%s %s" % (self.dt_id, self.dt_name)

class bb_device:
    def __init__(self, devnode = None, devprovider = None):
        if devnode == None:
            self.devnode = None
            self.name = None
            self.id = None
            self.console = None
            self.support = None
            self.device_type = None
            self.tty_conf = None
            self.provider = provider()
        else:
            self.devnode = devnode
            self.name = devnode.getAttribute("name")
            self.id = devnode.getAttribute("id")

            self.console = Evaluate("console/text( )", devnode)[0].nodeValue           
            self.support = Evaluate("support/text( )", devnode)[0].nodeValue            
            self.device_type = devicetype(Evaluate("device_type", devnode)[0].getAttribute("id"))
            if self.device_type.dt_id == '0001':
                #DSL USB
                self.tty_conf = None
                # FIXME: get usb_conf
            else:
                #DSL Router
                self.tty_conf = tty_conf(Evaluate("tty_conf", devnode)[0].getAttribute("id"))
            if devprovider != None:
                self.provider = devprovider
            else:
                self.provider = provider()
        # FIXME: get operations
        self.numoper = 0

    def __str__(self):
        return "%s %s %s %s %s (%s) (%s) %s" % \
                (self.name, self.id, self.console, self.support,
                 self.device_type, self.tty_conf, self.provider, self.numoper)

class bb_device_conf(bb_device):
    __bb = bb_device
    def __init__(self, ini_bb_dev = None):
        if ini_bb_dev:
            self.__bb.__init__(self, ini_bb_dev.devnode, ini_bb_dev.provider)
        else:
            self.__bb.__init__(self)
        # Dynamic parameters
        self.param = {}
        
class operation:
    def __init__(self, opernode = None):
        if opernode == None:
            self.id = None
            self.bb_device = None
            self.supported = 0
            self.ui_public = 0
            self.opername = None
            self.firmware = None
            self.initial_cmd = None
            self.default_timeout = None
            self.druid_page_list = []
        else:
            self.id = opernode.getAttribute("id")
            self.bb_device = opernode.getAttribute("bb_device")
            self.supported = opernode.getAttribute("supported")
            self.ui_public = opernode.getAttribute("ui_public")
            self.opername = {}
            for opername_node in Evaluate("opername_list/opername", opernode):
                self.opername[opername_node.getAttribute("lang")] = opername_node.getAttribute("name")
            self.firmware = Evaluate("firmware/text( )", opernode)[0].nodeValue
            self.initial_cmd = Evaluate("initial_cmd/text( )", opernode)[0].nodeValue
            self.default_timeout = Evaluate("default_timeout/text( )", opernode)[0].nodeValue
            self.druid_page_list = []
            for druid_page_node in Evaluate("druid_page_list/druid_page/text( )", opernode):
                self.druid_page_list += [druid_page_node.nodeValue]
    def __str__(self):      
        return "%s %s %s %s %s %s %s %s %s" % \
               (self.id, self.bb_device, self.supported, self.ui_public, self.opername,
                self.firmware, self.initial_cmd, self.default_timeout, self.druid_page_list)

class Assist:
    def initdbus(self):

        try: self.bus = dbus.SystemBus()
        except:
            self.dbusrunning = False
            return
        self.hal_manager_obj = self.bus.get_object("org.freedesktop.Hal",
                                                   "/org/freedesktop/Hal/Manager")
        self.hal_manager = dbus.Interface(self.hal_manager_obj,
                                          "org.freedesktop.Hal.Manager")
        
    def __init__(self):
        self.dbusrunning = True
        self.providers = []
        self.devs = []
        self.pub_operations = []
        self.provider = None
        self.devcf = None
        self.operation_sel = None
        self.ethlist = []
        self.ttylist = []
        self.tty_to_use = None # we use this to access the dev
        self.eth_to_use = None # we use this to access the dev
        
        self.oper_result = None
        self.finish_assist = False
        self.portsGuiConf = False
        

        # load the interface
        self.glade = gtk.glade.XML('%s/bb-assist.glade' % GLADEDIR)
    
        # get widgets
        for widget in self.glade.get_widget_prefix(""):
            setattr(self, widget.get_name(), widget)

        self.glade.signal_autoconnect(self)
    
        self.windowIni.connect("delete_event", self.on_druid1_cancel)

        # dbus init
        self.initdbus()
                
        self.druid1.finish.set_label('gtk-close')
        self.windowIni.set_icon_from_file(os.path.join(PIXMAPSDIR, "bb-assist16.png"))
        self.dialogCancelDestroy.set_icon_from_file(os.path.join(PIXMAPSDIR, "bb-assist16.png"))
        
        # Workaround for some bug in glade and pixmap directories
        self.imageProgressBar.set_from_file(os.path.join(PIXMAPSDIR, "bb-assist48.png"))
        self.logo = gtk.gdk.pixbuf_new_from_file(os.path.join(PIXMAPSDIR, "bb-assist48.png"))
        path_druid_pages = "druid_page"
        druid_pages_to_update = searchPathXml(path_druid_pages, 'druidpages.xml')
        for druid_page in druid_pages_to_update:
            druid_page_to_act = gtk.glade.XML.get_widget(self.glade, druid_page.getAttribute("id"))
            druid_page_to_act.set_logo(self.logo)        

        # Show Start_Page and Finish Page in druid
        # http://www.async.com.br/faq/pygtk/index.py?req=show&file=faq23.013.htp       
        self.druidpagestart.set_logo_bg_color(gtk.gdk.color_parse("#087021"))
        self.druidpagestart.set_bg_color(gtk.gdk.color_parse("#087021"))
        self.druidpagefinish.set_logo_bg_color(gtk.gdk.color_parse("#087021"))
        self.druidpagefinish.set_bg_color(gtk.gdk.color_parse("#087021"))
        self.druidpagestart.show()
        self.druidpagefinish.show()
        
    # Cancel events and dialog and Finish
    
    def on_druid1_cancel(self, *args):
        self.dialogCancelDestroy.connect("delete_event",
                                         self.on_dialogCancelDestroy_close)
        self.dialogCancelDestroy.show()
        self.windowIni.set_sensitive(False)
        return True

    def on_dialogCancelDestroy_delete_event(self, *args):
        self.dialogCancelDestroy.hide()
        self.windowIni.set_sensitive(True)
        return True
    
    def on_cancelbutton1_clicked(self, *args):
        self.dialogCancelDestroy.hide()
        self.windowIni.set_sensitive(True)
        
    def on_okbutton1_clicked(self, *args):
        gtk.main_quit()
        
    def on_dialogCancelDestroy_close(self, *args):
        self.dialogCancelDestroy.hide()
        self.windowIni.set_sensitive(True)

    # Verifications

    def on_druidVerificationResults_prepare(self, *args):
        founded_eth = False
        founded_serial = False
        founded_usb = False
        ethlist = []
        ttylist = []
        msg = ""
        if not self.dbusrunning:
            # We use dbus/hal to get interfaces and ports info
            msg = msg + _("<b>ERROR:</b> Dbus/Hal no está funcionando correctamente" + ".\n"
                          "No se puede continuar con el asistente.")
            self.iniVerifResults.set_text(msg)
            self.iniVerifResults.set_use_markup(True)
            self.finish_assist = True
            return
        for udi in self.hal_manager.FindDeviceByCapability ('net'):
            obj = self.bus.get_object('org.freedesktop.Hal', udi)
            obj = dbus.Interface(obj, 'org.freedesktop.Hal.Device')
            interface = obj.GetPropertyString('net.interface')
            info_cat = obj.GetPropertyString('info.category')
            if info_cat == 'net.80203':
                #msg = msg + '* ' + _('Interfaz Ethernet') + " " + \
                #      interface + " " + _('encontrado') + '\n'
                founded_eth = True
                self.ethlist += [interface]
        if founded_eth:
            msg = msg + _('<b>Se han encontrado</b> interfaces Ethernet') + '\n'
        else:
            msg = msg + _('<b>No se han encontrado</b> interfaces Ethernet') + '\n'
        msg = msg + "   " + _('Estos son necesarios para poder usar y/o configurar ciertos equipos tipo router') + '\n'
        for udi in self.hal_manager.FindDeviceByCapability ('serial'):
            obj = self.bus.get_object('org.freedesktop.Hal', udi)
            obj = dbus.Interface(obj, 'org.freedesktop.Hal.Device')
            serial = obj.GetPropertyString('linux.device_file')
            #msg = msg + '* ' + _('Puerto serie') + " " + serial + " " + \
            #      _('encontrado') + '\n'
            founded_serial = True
            self.ttylist += [serial]
        if founded_serial:
             msg = msg + _('<b>Se han encontrado</b> puertos serie (COM)') + '\n'
        else:
            msg = msg + _('<b>No se han encontrado</b> puertos serie (COM)') + '\n'
        msg = msg + "   " + _('Estos son necesarios para poder configurar ciertos equipos tipo router') + '\n'           
        for udi in self.hal_manager.FindDeviceStringMatch('info.bus','usb'):
            founded_usb = True
        if founded_usb:
             msg = msg + _('<b>Se han encontrado</b> puertos USB') + '\n'
        else:
            msg = msg + _('<b>No se han encontrado</b> puertos USB') + '\n'
        msg = msg + "   " +  _('Estos son necesarios para poder configurar equipos USB') + '\n'
        self.iniVerifResults.set_text(msg)
        self.iniVerifResults.set_use_markup(True)

    def on_druidVerificationResults_next(self, *args):
        if self.finish_assist:
            self.oper_result="ExitVerifErrors"
            self.druid1.set_page(self.druidpagefinish)
            
    # Provider and Device Select

    def getProviders(self, *args):
        path_prov = "provider"
        providernodes = searchPathXml(path_prov, 'providers.xml')
        for providernode in providernodes:
            self.providers += [provider(providernode)]
            self.comboprovider.append_text(providernode.getAttribute("name"))
            self.comboprovider.set_sensitive(True)
        if len(self.providers) == 0:
            self.comboprovider.append_text(_("No hay operadoras disponibles"))
            self.comboprovider.set_sensitive(False)
        self.comboprovider.set_active(0)
        
    def remProviders(self, *args):
        for prov in self.providers:
            self.comboprovider.remove_text(0)
        self.providers = []
        self.provider = None
        
    def on_druidProviderSelect_prepare(self, *args):
        if self.provider:
            self.druid1.set_buttons_sensitive(True, True, True, True)
        else:
            self.druid1.set_buttons_sensitive(True, False, True, True)
            self.remProviders()
            self.getProviders()

    def getDevices(self, *args):
        path_dev = "bb_device/provider_list/provider[@id=" + \
                   self.provider.prov_id + "]/../.."
        devnodes = searchPathXml(path_dev, 'bb-device.xml')
        for devnode in devnodes:
            supported = Evaluate("support/text( )", devnode)[0].nodeValue
            if supported == '1':
                self.devs += [bb_device(devnode, self.provider)]
                self.combodevicesel.append_text(devnode.getAttribute("name"))
                self.combodevicesel.set_sensitive(True)
        if len(self.devs) == 0:
            self.combodevicesel.append_text(_("No hay dispositivos disponibles"))
            self.combodevicesel.set_sensitive(False)
        self.combodevicesel.set_active(0)

    def remDevices(self, *args):
        if len(self.devs) == 0:
            self.combodevicesel.remove_text(0) # Erase also "No dev message"
        for dev in self.devs:
            self.combodevicesel.remove_text(0)
        self.devs = []
        self.devcf = None
        
    def getOperations(self, *args):
        path_oper = "operation[@bb_device=" + self.devcf.id \
                    + " and @supported='1' and @ui_public='1']"
        opernodes = searchPathXml(path_oper, 'operations.xml')
        for opernode in opernodes:
            self.pub_operations += [operation(opernode)]
            combotext_xpath = "opername_list/opername[@lang='" + msg_lang  + "']"
            self.combooperationsel.append_text(Evaluate(combotext_xpath,
                                                        opernode)[0].getAttribute("name"))
            self.combooperationsel.set_sensitive(True)
        if len(self.pub_operations) == 0:
            self.combooperationsel.append_text(_("No hay operaciones disponibles"))
            self.combooperationsel.set_sensitive(False)
        self.combooperationsel.set_active(0)    

    def remOperations(self, *args):
        if len(self.pub_operations) == 0:
            self.combooperationsel.remove_text(0) # Erase also "No operations message"
        for oper in self.pub_operations:
            self.combooperationsel.remove_text(0)
        self.pub_operations = []
        self.operation_sel = None
    
    def on_druidDeviceSel_prepare(self, *args):
        if self.devcf:
            self.druid1.set_buttons_sensitive(True, True, True, True)
        else:
            self.druid1.set_buttons_sensitive(True, False, True, True)
            
    def on_comboprovider_changed(self, *args):
        if len(self.providers) != 0:
            self.provider = self.providers[self.comboprovider.get_active()]
            self.druid1.set_buttons_sensitive(True, True, True, True)
            self.remDevices()
            self.getDevices()

    def on_combodevicesel_changed(self, *args):          
        if len(self.devs) != 0:
            self.devcf = bb_device_conf(self.devs[self.combodevicesel.get_active()])
            self.druid1.set_buttons_sensitive(True, True, True, True)
            self.remOperations()
            self.getOperations()

    # Operation Select

    def hideDruidPagesOptional(self, *args):
        path_druid_pages = "druid_page[@optional='1']"
        druid_pages_to_hide = searchPathXml(path_druid_pages, 'druidpages.xml')
        for druid_page in druid_pages_to_hide:
            druid_page_to_act = gtk.glade.XML.get_widget(self.glade, druid_page.getAttribute("id"))
            druid_page_to_act.hide()
            
    def on_druidOperationSelect_prepare(self, *args):
        if self.operation_sel:
            self.druid1.set_buttons_sensitive(True, True, True, True)
        else:
            self.druid1.set_buttons_sensitive(True, False, True, True)
            self.hideDruidPagesOptional()
            
    def on_combooperationsel_changed(self, *args):
        if len(self.pub_operations) != 0:
            self.operation_sel = self.pub_operations[self.combooperationsel.get_active()]
            self.druid1.set_buttons_sensitive(True, True, True, True)
            druid_pages_to_act = self.operation_sel.druid_page_list
            self.hideDruidPagesOptional()
            for druid_page in druid_pages_to_act:
                druid_page_to_act = gtk.glade.XML.get_widget(self.glade, druid_page)
                druid_page_to_act.show()

    def on_druidOperationSelect_next(self, *args):
        self.devcf.param['mod_conf'] = ""
        if self.operation_sel.id == '0001': # verif 3com
            pass
        elif self.operation_sel.id == '0002':
            self.devcf.param['mod_conf'] = "monostatic"
        elif self.operation_sel.id == '0003':
            self.devcf.param['mod_conf'] = "monodinamic"
        elif self.operation_sel.id == '0004':
            self.devcf.param['mod_conf'] = "multistatic"
            self.devcf.param['withDhcp'] = True
        elif self.operation_sel.id == '0005':
            self.devcf.param['mod_conf'] = "multidinamic"
            self.devcf.param['withDhcp'] = True
        elif self.operation_sel.id == '0006': # change passd 3com
            pass
        if self.portsGuiConf == False:
            # Do this only one time (eth/ser don't change)
            for act_tty in self.ttylist:
                self.comboboxserialport.append_text(act_tty)
            for act_eth in self.ethlist:
                self.comboboxetheport.append_text(act_eth)
            self.portsGuiConf = True
            
    # Conf Params

    def on_druidUsuIP_next(self, *args):
        try: self.devcf.param['usu_ip'] = socket.inet_aton(self.usuIP.get_text())
        except socket.error:
            error_dialog(_("Error en") + ": " + \
                         self.usuIpLabel.get_text(), self.windowIni)
            self.druid1.set_page(self.druidUsuIP)
            return True
        try: self.devcf.param['usu_mask'] = socket.inet_aton(self.usuMask.get_text())
        except socket.error:
            error_dialog(_("Error en") + ": " + \
                         self.usuMaskLabel.get_text(), self.windowIni)
            self.druid1.set_page(self.druidUsuIP)
            return True

    def on_druidGestIP_next(self, *args):
        try: self.devcf.param['gest_ip'] = socket.inet_aton(self.gestIP.get_text())
        except socket.error:
            error_dialog(_("Error en") + ": " + \
                         self.gestIpLabel.get_text(), self.windowIni)
            self.druid1.set_page(self.druidGestIP)
            return True
        try: self.devcf.param['gest_mask'] = socket.inet_aton(self.gestMask.get_text())
        except socket.error:
            error_dialog(_("Error en") + ": " + \
                         self.gestMaskLabel.get_text(), self.windowIni)
            self.druid1.set_page(self.druidGestIP)
            return True

    def on_druidDinamConf_next(self, *args):
        self.devcf.param['ppp_user'] = self.PPPuser.get_text()
        self.devcf.param['ppp_passwd'] = self.PPPpasswd.get_text()
        if self.devcf.param['ppp_user'] == "":
            error_dialog(_("Usuario incorrecto"), self.windowIni)
            return True
        if self.devcf.param['ppp_passwd'] == "":
            error_dialog(_("Password incorrecta"), self.windowIni)
            return True

    def on_druidMultiConf_next(self, *args):
        if self.devcf.param['withDhcp']:
            try: self.dhcpIPaddress = socket.inet_aton(self.dhcpIPaddressEntry.get_text())
            except socket.error:
                error_dialog(_("Error en") + ": " + \
                             self.dhcpIPaddressLabel.get_text(), self.windowIni)
                self.druid1.set_page(self.druidMultiConf)
                return True
            try: self.dhcpMask = socket.inet_aton(self.dhcpMaskEntry.get_text())
            except socket.error:
                error_dialog(_("Error en") + ": " + \
                             self.dhcpMaskLabel.get_text(), self.windowIni)
                self.druid1.set_page(self.druidMultiConf)
                return True
        else:
            try: self.IPaddressPc = socket.inet_aton(self.IPaddressPcEntry.get_text())
            except socket.error:
                error_dialog(_("Error en") + ": " + \
                             self.IPaddressPcLabel.get_text(), self.windowIni)
                self.druid1.set_page(self.druidMultiConf)
                return True
            try: self.maskAddressPc = socket.inet_aton(self.maskAddressPcEntry.get_text())
            except socket.error:
                error_dialog(_("Error en") + ": " + \
                             self.maskAddressPcLabel.get_text(), self.windowIni)
                self.druid1.set_page(self.druidMultiConf)
                return True
        try: self.ipGateway = socket.inet_aton(self.ipGatewayEntry.get_text())
        except socket.error:
            error_dialog(_("Error en") + ": " + \
                         self.ipGatewayLabel.get_text(), self.windowIni)
            self.druid1.set_page(self.druidMultiConf)
            return True
        
    def on_sinDhcpRadioButton_clicked(self, *args):
        if self.dhcpRadioButton.get_active():
            self.devcf.param['withDhcp'] = True
            self.IPaddressPcEntry.set_sensitive(False)
            self.maskAddressPcEntry.set_sensitive(False)
            self.dhcpIPaddressEntry.set_sensitive(True)
            self.dhcpMaskEntry.set_sensitive(True)   
        else:
            self.devcf.param['withDhcp'] = False
            self.IPaddressPcEntry.set_sensitive(True)
            self.maskAddressPcEntry.set_sensitive(True)
            self.dhcpIPaddressEntry.set_sensitive(False)
            self.dhcpMaskEntry.set_sensitive(False)

    def on_druidSelecInterface_prepare(self, *args):
        if self.tty_to_use:
            self.druid1.set_buttons_sensitive(True, True, True, True)
        else:
            self.druid1.set_buttons_sensitive(True, False, True, True)
            pass

    def on_checkbuttonDefPasswd_toggled(self, *args):
        if self.checkbuttonDefPasswd.get_active():
            self.entryOtherPasswd.set_sensitive(True)
        else:
            self.entryOtherPasswd.set_sensitive(False)
                    
    def on_druidPasswdSel_next(self, *args):
        if self.checkbuttonDefPasswd.get_active():
            if self.entryOtherPasswd.get_text() == "":
                error_dialog(_("Introduzca una contraseña correcta"), \
                             self.windowIni)
                self.druid1.set_page(self.druidPasswdSel)
                return True

    def on_druidNewPasswd_next(self, *args):
        if self.entryNewPasswd.get_text() == "":
            error_dialog(_("Introduzca una contraseña correcta"), \
                         self.windowIni)
            self.druid1.set_page(self.druidNewPasswd)
            return True
    
    def on_comboboxSerialPort_changed(self, *args):          
        self.tty_to_use = self.comboboxserialport.get_active_text()
        self.druid1.set_buttons_sensitive(True, True, True, True)
    
    def on_druidVerifParamsConf_prepare(self, *args):
        msg = boldme(_("Operación")) + ": "
        if self.devcf.param['mod_conf'] != "":
            msg += _("Reconfiguración de dispositivo de Banda Ancha") + "\n"
            msg += boldme(_("Modo de Configuración:")) + " "
            if self.devcf.param['mod_conf'] == "monostatic":
                msg += _("Monopuesto Estático") + "\n"
            elif self.devcf.param['mod_conf'] == "monodinamic":
                msg += _("Monopuesto Dinámico") + "\n"
            elif self.devcf.param['mod_conf'] == "multistatic":
                msg += _("Multipuesto Estático") + "\n"
            elif self.devcf.param['mod_conf'] == "multidinamic":
                msg += _("Multipuesto Dinámico") + "\n"
            if self.devcf.param['mod_conf'] == "monostatic" or self.devcf.param['mod_conf'] == "multistatic":
                msg += boldme(self.usuIpLabel.get_text()) + \
                      ": " + socket.inet_ntoa(self.devcf.param['usu_ip']) + "\n"
                msg += boldme(self.usuMaskLabel.get_text()) + \
                      ": " + socket.inet_ntoa(self.devcf.param['usu_mask']) + "\n"
                msg += boldme(self.gestIpLabel.get_text()) + \
                      ": " + socket.inet_ntoa(self.devcf.param['gest_ip']) + "\n"
                msg += boldme(self.gestMaskLabel.get_text()) + \
                      ": " + socket.inet_ntoa(self.devcf.param['gest_mask']) + "\n"
                if self.devcf.param['mod_conf'] == "multidinamic" or self.devcf.param['mod_conf'] == "monodinamic":
                    msg += boldme(_("Usuario")) + ": " + self.devcf.param['ppp_user'] + "\n"
                if self.devcf.param['mod_conf'] == "multistatic" or self.devcf.param['mod_conf'] == "multidinamic":
                    if self.devcf.param['withDhcp']:
                        msg += boldme(self.dhcpIPaddressLabel.get_text()) + \
                              ": " + socket.inet_ntoa(self.dhcpIPaddress) + "\n"
                        msg += boldme(self.dhcpMaskLabel.get_text()) + \
                              ": " + socket.inet_ntoa(self.dhcpMask) + "\n"
                    else:
                        msg += boldme(self.IPaddressPcLabel.get_text()) + \
                              ": " + socket.inet_ntoa(self.IPaddressPc) + "\n"
                        msg += boldme(self.maskAddressPcLabel.get_text()) + \
                              ": " + socket.inet_ntoa(self.maskAddressPc) + "\n"
                        msg += boldme(self.ipGatewayLabel.get_text()) + \
                                      ": " + socket.inet_ntoa(self.ipGateway) + "\n"
        if self.operation_sel.id == '0001':
            msg += _("Verificación de acceso a dispositivo de Banda Ancha") + "\n"
        elif self.operation_sel.id == '0006':
            msg += _("Cambio de contraseña de dispositivo de Banda Ancha") + "\n"
        msg += boldme(_("Puerto serie a usar")) + ": " + self.tty_to_use + "\n"
        self.verifParamConfLabel.set_text(msg)
        self.verifParamConfLabel.set_use_markup(True)

    def on_druidRunOper_prepare(self, *args):
        self.druid1.next.set_label('gtk-apply')

    def on_druidRunOper_back(self, *args):
        self.druid1.next.set_label('gtk-go-forward')
           
    def callBackEnd(self, *args):
        output_xmlfile = tempfile.NamedTemporaryFile()
        writer = MarkupWriter(output_xmlfile, encoding='iso-8859-1', indent=u"yes")
        writer.startDocument()
        writer.startElement(u'operation')
        writer.startElement(u'initial_cmd')
        writer.text(self.operation_sel.initial_cmd)
        writer.endElement(u'initial_cmd')
        writer.startElement(u'default-timeout')
        writer.text(self.operation_sel.default_timeout)
        writer.endElement(u'default-timeout')
        for actparam in self.devcf.param.keys():
            writer.startElement(unicode(actparam))
            writer.text(unicode(self.devcf.param[actparam]))
            writer.endElement(unicode(actparam))
        writer.endElement(u'operation')
        writer.endDocument()
        output_xmlfile.flush()

        processor = Processor.Processor()
        xsl_cmd_list  = InputSource.DefaultFactory.fromUri(OsPathToUri(os.path.join(PATH, "cmd-list.xsl")))
        xml_operation = InputSource.DefaultFactory.fromUri(OsPathToUri(output_xmlfile.name))
        processor.appendStylesheet(xsl_cmd_list)
        result = processor.run(xml_operation)

        #f = codecs.open('tmp.xml', encoding='utf-8', mode='w+')
        #result = proc.run(src_isrc, outputStream=sys.stdout)
        msg =  "XSL/XML operation\n"
        msg += "*****************\n"
        msg += result
        
        self.labelOperDebug.set_text(msg)
        self.labelOperDebug.set_use_markup(False)

    def on_druidRunOper_next(self, *args):
        self.druid1.next.set_label('gtk-go-forward')
        self.callBackEnd()
        self.druid1.back.hide()

    # Finish
                     
    def on_druidpagefinish_finish(self, *args):
        gtk.main_quit()

    def on_druidpagefinish_back(self, *args):
        if self.oper_result == "ExitVerifErrors":
            self.druid1.set_page(self.druidVerificationResults)
            return True
        
    def main(self):
        gtk.main()
       
if __name__ == "__main__":
    gnome.program_init(app_name, app_version)
    getParams()
    assist = Assist()
    assist.main()
