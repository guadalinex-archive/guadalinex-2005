#!/bin/sh

mkdir /sys
mkdir /proc
mkdir /tmp
mkdir -p /var/lock
mount -t sysfs sysfs /sys
mount -t proc proc /proc
mount -t ramfs none /dev
touch /dev/.initramfs-tools
mknod /dev/console c 5 1 
mknod /dev/null c 1 3

. /conf/initramfs.conf
. /scripts/functions

# Parse command line options
export break=
export init=/sbin/init
export quiet=n
export readonly=y
export ROOT=
export resume=${RESUME}
export rootmnt=/root
for x in $(cat /proc/cmdline); do
	case $x in
	init=*)
		init=${x#init=}
		;;
	root=*)
		ROOT=${x#root=}
		;;
	nfsroot=*)
		NFSROOT=${x#nfsroot=}
		;;
	boot=*)
		BOOT=${x#boot=}
		;;
	resume=*)
		resume=${x#resume=}
		;;
	quiet)
		quiet=y
		;;
	ro)
		readonly=y
		;;
	rw)
		readonly=n
		;;
	break)
		break=yes
		;;
	esac
done

log_begin_msg "Running /scripts/init-top"
run_scripts /scripts/init-top
log_end_msg

. /scripts/${BOOT}

log_begin_msg "Loading modules"
load_modules
log_end_msg

# Populate /dev tree
log_begin_msg "Initializing /dev"
parse_numeric ${ROOT}
udevstart
log_end_msg

if [ x${break} = xyes ]; then 
	panic "Spawning shell within the initramfs"
fi

log_begin_msg "Running /scripts/init-premount"
run_scripts /scripts/init-premount
log_end_msg

log_begin_msg "Mounting root file system"
mountroot
log_end_msg

log_begin_msg "Running /scripts/init-bottom"
run_scripts /scripts/init-bottom
log_end_msg

# Move our /dev to the real filesystem.  Do the setup that udev otherwise
# would.
mkdir -p /dev/.static/dev
chmod 700 /dev/.static/
mount -n -o bind ${rootmnt}/dev /dev/.static/dev
mount -n -o move /dev ${rootmnt}/dev

umount /sys
umount /proc

if [ ! -x ${rootmnt}${init} ]; then
	panic "Target filesystem doesn't have ${init}"
fi

# Chain to real filesystem
exec run-init ${rootmnt} ${init} "$@" </root/dev/console >/root/dev/console
