diff -Nur gparted-0.0.8+cvs2005061901/configure.in gparted-0.0.8+cvs2005061901.new/configure.in
--- gparted-0.0.8+cvs2005061901/configure.in	2005-06-19 22:37:06.000000000 +0200
+++ gparted-0.0.8+cvs2005061901.new/configure.in	2005-08-05 20:17:32.000000000 +0200
@@ -38,7 +38,7 @@
 	AC_MSG_ERROR([*** libparted >= 1.6.13 not installed - get it from http://www.gnu.org/software/parted/ ***])
 fi
 
-PKG_CHECK_MODULES(GTKMM, gtkmm-2.4 )
+PKG_CHECK_MODULES(GTKMM, [gtkmm-2.4 >= 2.6.0])
 AC_SUBST(GTKMM_LIBS)
 AC_SUBST(GTKMM_CFLAGS)
 
diff -Nur gparted-0.0.8+cvs2005061901/include/Device.h gparted-0.0.8+cvs2005061901.new/include/Device.h
--- gparted-0.0.8+cvs2005061901/include/Device.h	2004-12-27 19:56:57.000000000 +0100
+++ gparted-0.0.8+cvs2005061901.new/include/Device.h	2005-08-05 20:17:32.000000000 +0200
@@ -39,9 +39,9 @@
 	long cylinders ;
 	long cylsize ;
 	Glib::ustring model;
- 	Glib::ustring path;
- 	Glib::ustring realpath;
- 	Glib::ustring disktype;
+	Glib::ustring path;
+	Glib::ustring realpath;
+	Glib::ustring disktype;
 	int max_prims ;
 	int highest_busy ;
 	bool readonly ; 
diff -Nur gparted-0.0.8+cvs2005061901/include/Dialog_Progress.h gparted-0.0.8+cvs2005061901.new/include/Dialog_Progress.h
--- gparted-0.0.8+cvs2005061901/include/Dialog_Progress.h	2004-11-17 14:00:25.000000000 +0100
+++ gparted-0.0.8+cvs2005061901.new/include/Dialog_Progress.h	2005-08-05 20:17:32.000000000 +0200
@@ -39,16 +39,18 @@
 	Dialog_Progress( int count_operations, Glib::RefPtr<Gtk::TextBuffer> textbuffer );
 	~Dialog_Progress( );
 
+	void Set_Current( const Glib::ustring& operation, int estimated_time );
 	void Set_Operation( );
-		
-	Glib::ustring current_operation;
-	int TIME_LEFT ;
-		
+
 private:
 	bool Show_Progress( ) ;
 	bool Pulse( ) { progressbar_current .pulse( ) ; return true ; }
 	void tglbtn_details_toggled( ) ;
 
+	Glib::Mutex mutex;
+	Glib::ustring current_operation;
+	int TIME_LEFT ;
+		
 	Gtk::Label label_current ;
 	Gtk::ProgressBar progressbar_all, progressbar_current ;
 	Gtk::ToggleButton tglbtn_details ;
diff -Nur gparted-0.0.8+cvs2005061901/include/GParted_Core.h gparted-0.0.8+cvs2005061901.new/include/GParted_Core.h
--- gparted-0.0.8+cvs2005061901/include/GParted_Core.h	2005-02-01 18:04:03.000000000 +0100
+++ gparted-0.0.8+cvs2005061901.new/include/GParted_Core.h	2005-08-05 20:17:32.000000000 +0200
@@ -62,6 +62,12 @@
 	const FS & get_fs( const Glib::ustring & filesystem ) const ;
 	Glib::RefPtr<Gtk::TextBuffer> get_textbuffer( ) ;
 
+	void Set_Mount_Point( const Glib::ustring & device_name, const Partition & partition, const Glib::ustring & mount_point );
+	Glib::ustring Get_Mount_Point( const Glib::ustring & device_name, const Partition & partition ) const;
+	void Unset_Device_Mount_Points( const Glib::ustring & device_name );
+	void Realign_Mount_Point_Map( const std::vector<Device> & devices );
+	void Dump_Mount_Point_List( const std::vector<Device> & devices, std::ostream & os ) const;
+
 private:
 	Glib::ustring Get_Filesystem( ) ; //temporary function.. asa new checks ripple through in libparted i'll remove it.
 	void set_device_partitions( Device & device ) ;
@@ -75,7 +81,7 @@
 
 	void Show_Error( Glib::ustring message ) ;
 	void set_proper_filesystem( const Glib::ustring & filesystem ) ;
-		
+
 	Glib::RefPtr<Gtk::TextBuffer> textbuffer;
 	
 	std::vector<FS> FILESYSTEMS ;
@@ -87,6 +93,14 @@
 	Glib::ustring temp ;
 	Partition partition_temp ;
 	FS fs ;
+
+	typedef std::map<Sector, Glib::ustring> MountPoint_Map;
+	typedef std::map<std::string, MountPoint_Map> Device_Map;
+
+	Device_Map device_map;
+
+	static Sector Find_Closest_Start_Sector( const std::vector<Partition> & partitions, Sector start );
+	static void Dump_Device_Mount_Points( const std::vector<Partition> & partitions, const MountPoint_Map & map, std::ostream & os );
 };
 
 } //GParted
diff -Nur gparted-0.0.8+cvs2005061901/include/Operation.h gparted-0.0.8+cvs2005061901.new/include/Operation.h
--- gparted-0.0.8+cvs2005061901/include/Operation.h	2004-12-27 13:08:00.000000000 +0100
+++ gparted-0.0.8+cvs2005061901.new/include/Operation.h	2005-08-05 20:17:32.000000000 +0200
@@ -28,7 +28,7 @@
 {
 		
 enum OperationType {
-        DELETE		= 0,
+	DELETE		= 0,
 	CREATE		= 1,
 	RESIZE_MOVE	= 2,
 	CONVERT		= 3,
@@ -39,7 +39,7 @@
 {
 	
 public:
-	Operation( const Device & device, const Partition &, const Partition &, OperationType );		
+	Operation( const Device & device, const Partition &, const Partition &, OperationType );
 
 	//this one can be a little confusing, it *DOES NOT* change any visual representation. It only applies the operation to the list with partitions.
 	//this new list can be used to change the visual representation. For real writing to disk, see Apply_To_Disk()
diff -Nur gparted-0.0.8+cvs2005061901/include/Partition.h gparted-0.0.8+cvs2005061901.new/include/Partition.h
--- gparted-0.0.8+cvs2005061901/include/Partition.h	2004-11-21 22:49:38.000000000 +0100
+++ gparted-0.0.8+cvs2005061901.new/include/Partition.h	2005-08-05 20:17:32.000000000 +0200
@@ -58,13 +58,13 @@
 	
 	//simple Set-functions.  only for convenience, since most members are public
 	void Set( 	const Glib::ustring & partition,
-			const int partition_number,
-			const PartitionType type,
+			int partition_number,
+			PartitionType type,
 			const Glib::ustring & filesystem,
 			const Sector & sector_start,
 			const Sector & sector_end,
-			const bool inside_extended,
-			const bool busy ) ;
+			bool inside_extended,
+			bool busy ) ;
 
 	void Set_Unused( Sector sectors_unused ) ;
 
@@ -73,9 +73,11 @@
 	//update partition number (used when a logical partition is deleted) 
 	void Update_Number( int new_number );
 	
-	const long Get_Length_MB( ) const ;
-	const long Get_Used_MB( ) const ;
-	const long Get_Unused_MB( ) const ;
+	long Get_Length_MB( ) const ;
+	long Get_Used_MB( ) const ;
+	long Get_Unused_MB( ) const ;
+
+	bool Is_Swap( ) const;
 		
 	//some public members
 	Glib::ustring partition;//the symbolic path (e.g. /dev/hda1 )
@@ -92,7 +94,7 @@
 	bool busy;
 	Glib::ustring error;
 	Glib::ustring flags;
-	
+
 	std::vector<Partition> logicals ;
 	
 private:
diff -Nur gparted-0.0.8+cvs2005061901/include/TreeView_Detail.h gparted-0.0.8+cvs2005061901.new/include/TreeView_Detail.h
--- gparted-0.0.8+cvs2005061901/include/TreeView_Detail.h	2005-02-01 18:04:03.000000000 +0100
+++ gparted-0.0.8+cvs2005061901.new/include/TreeView_Detail.h	2005-08-05 20:17:32.000000000 +0200
@@ -22,6 +22,7 @@
 
 #include <gtkmm/treeview.h>
 #include <gtkmm/treestore.h>
+#include <gtkmm/liststore.h>
 #include <gtkmm/entry.h>
 
 #include <gtkmm/stock.h>
@@ -36,24 +37,36 @@
 {
 public:
 	TreeView_Detail( );
+	void Add_Mount_Point_Column( );
 	void Load_Partitions( const std::vector<Partition> & partitions ) ;
 	void Set_Selected( const Partition & partition );
 	void Clear( ) ;
 
 	//signals for interclass communication
-	sigc::signal<void, GdkEventButton *, const Partition & > signal_mouse_click;
+	sigc::signal<void, const Partition &> signal_partition_selected;
+	sigc::signal<void, const Partition &> signal_partition_activated;
+	sigc::signal<void, unsigned int, guint32> signal_popup_menu;
+	sigc::signal<void, const Partition &, const Glib::ustring &> signal_set_mount_point;
+	sigc::signal<Glib::ustring, const Partition &> signal_get_mount_point;
+
+protected:
+	virtual void on_row_activated( const Gtk::TreeModel::Path & path, Gtk::TreeView::Column * column );
+	virtual bool on_button_press_event( GdkEventButton * event );
 
 private:
 	void Create_Row( const Gtk::TreeRow & treerow, const Partition & partition );
 
-	//overridden signal
-	virtual bool on_button_press_event(GdkEventButton *);
-	
+	void on_selection_changed( );
+	void mount_point_cell_data_func( Gtk::CellRenderer * cell, const Gtk::TreeModel::iterator & iter );
+	void on_mount_point_edited( const Glib::ustring & path, const Glib::ustring & new_text );
+
 	Gtk::TreeRow row, childrow;
 	Gtk::TreeIter iter, iter_child;
 
 	Glib::RefPtr<Gtk::TreeStore> treestore_detail;
 	Glib::RefPtr<Gtk::TreeSelection> treeselection;
+	Glib::RefPtr<Gtk::ListStore> liststore_mount_point;
+	Glib::RefPtr<Gtk::ListStore> liststore_use_swap;
 
 	//columns for this treeview
 	struct treeview_detail_Columns : public Gtk::TreeModelColumnRecord             
@@ -68,14 +81,21 @@
 		Gtk::TreeModelColumn<Glib::ustring> text_color;
 		Gtk::TreeModelColumn< Glib::RefPtr<Gdk::Pixbuf> >  status_icon;
 		Gtk::TreeModelColumn<Glib::ustring> flags;
-		Gtk::TreeModelColumn< Partition >  partition_struct; //hidden column ( see also on_button_press_event )
-		
+		Gtk::TreeModelColumn< Partition >  partition_struct; //hidden column
+
 		treeview_detail_Columns( ) {
 			add( partition ); add( type ); add( type_square ); add( size );  add( used ); add( unused ); add( color ); add( text_color ); add( status_icon ); add( flags ); add(partition_struct);
 		}
 	};
-	
+
+	struct mount_point_Columns : public Gtk::TreeModel::ColumnRecord
+	{
+		Gtk::TreeModelColumn<Glib::ustring> path;
+		mount_point_Columns( ) { add( path ); }
+	};
+
 	treeview_detail_Columns treeview_detail_columns;
+	mount_point_Columns mount_point_columns;
 	Partition partition_temp ; //used in Set_Selected to make the check a bit more readable
 
 };
diff -Nur gparted-0.0.8+cvs2005061901/include/VBox_VisualDisk.h gparted-0.0.8+cvs2005061901.new/include/VBox_VisualDisk.h
--- gparted-0.0.8+cvs2005061901/include/VBox_VisualDisk.h	2004-11-21 22:49:38.000000000 +0100
+++ gparted-0.0.8+cvs2005061901.new/include/VBox_VisualDisk.h	2005-08-05 20:17:32.000000000 +0200
@@ -57,11 +57,12 @@
 	~VBox_VisualDisk( );
 	void Set_Selected( const Partition & );
 
-	
+
 	//public signal for interclass communication
-	sigc::signal<void,GdkEventButton *, const Partition &> signal_mouse_click;
-	
-	
+	sigc::signal<void, const Partition &> signal_partition_selected;
+	sigc::signal<void, const Partition &> signal_partition_activated;
+	sigc::signal<void, unsigned int, guint32> signal_popup_menu;
+
 private:
 	void Build_Visual_Disk( ) ; //i still dream of some fully resizeable visualdisk.... 
 	void Create_Visual_Partition( const Partition & partition ) ; 
diff -Nur gparted-0.0.8+cvs2005061901/src/Dialog_Partition_Info.cc gparted-0.0.8+cvs2005061901.new/src/Dialog_Partition_Info.cc
--- gparted-0.0.8+cvs2005061901/src/Dialog_Partition_Info.cc	2005-01-19 21:01:39.000000000 +0100
+++ gparted-0.0.8+cvs2005061901.new/src/Dialog_Partition_Info.cc	2005-08-05 20:17:32.000000000 +0200
@@ -186,7 +186,7 @@
 			str_temp = Find_Status( ) ;
 		else if ( partition.type == GParted::EXTENDED )
 			str_temp = _("Not busy (There are no mounted logical partitions)" ) ;
-		else if ( partition.filesystem == "linux-swap" )
+		else if ( partition.Is_Swap( ) )
 			str_temp = _("Not active" ) ;
 		else 
 			str_temp = _("Not mounted" ) ;
@@ -214,7 +214,7 @@
 {
 	if ( partition .type == GParted::EXTENDED )
 		return  _("Busy  (At least one logical partition is mounted)" ) ;
-	else if ( partition .filesystem == "linux-swap" )
+	else if ( partition .Is_Swap( ) )
 		return _("Active") ;
 		
 	//try to find the mountpoint in /proc/mounts
diff -Nur gparted-0.0.8+cvs2005061901/src/Dialog_Progress.cc gparted-0.0.8+cvs2005061901.new/src/Dialog_Progress.cc
--- gparted-0.0.8+cvs2005061901/src/Dialog_Progress.cc	2005-01-19 21:01:39.000000000 +0100
+++ gparted-0.0.8+cvs2005061901.new/src/Dialog_Progress.cc	2005-08-05 20:17:32.000000000 +0200
@@ -76,8 +76,19 @@
 	scrolledwindow .hide( ) ;
 }
 
+void Dialog_Progress::Set_Current( const Glib::ustring& operation, int estimated_time )
+{
+	Glib::Mutex::Lock lock( mutex );
+
+	// force copy to ensure memory visibility with ref-counted strings
+	current_operation.assign( operation.begin( ), operation.end( ) );
+	TIME_LEFT = estimated_time;
+}
+
 void Dialog_Progress::Set_Operation( )
 {
+	Glib::Mutex::Lock lock( mutex );
+
 	//all operations
 	if ( current_operation_number && (progressbar_all .get_fraction( ) + fraction) <= 1.0 )
 		progressbar_all .set_fraction( progressbar_all .get_fraction( ) + fraction );
@@ -86,19 +97,27 @@
 
 	//new operation
 	conn .disconnect( ) ;
-		
-	label_current .set_markup( "<i>" + current_operation + "</i>" ) ;
-	
-	progressbar_current .set_fraction( 0 );
-	progressbar_current .set_text( "initializing..." );
-	
-	if ( TIME_LEFT > 0 )
+
+	// close dialog after last operation
+	if ( current_operation_number > count_operations )
 	{
-		fraction_current = 1.00 / TIME_LEFT ;
-		conn = Glib::signal_timeout( ) .connect( sigc::mem_fun( *this, &Dialog_Progress::Show_Progress ), 1000 );
+		response( Gtk::RESPONSE_OK );
 	}
 	else
-		conn = Glib::signal_timeout( ) .connect( sigc::mem_fun( *this, &Dialog_Progress::Pulse ), 10 );
+	{
+		label_current .set_markup( "<i>" + current_operation + "</i>" ) ;
+		
+		progressbar_current .set_fraction( 0 );
+		progressbar_current .set_text( "initializing..." );
+		
+		if ( TIME_LEFT > 0 )
+		{
+			fraction_current = 1.00 / TIME_LEFT ;
+			conn = Glib::signal_timeout( ) .connect( sigc::mem_fun( *this, &Dialog_Progress::Show_Progress ), 1000 );
+		}
+		else
+			conn = Glib::signal_timeout( ) .connect( sigc::mem_fun( *this, &Dialog_Progress::Pulse ), 10 );
+	}
 }
 
 bool Dialog_Progress::Show_Progress( ) 
@@ -114,7 +133,6 @@
 		
 		TIME_LEFT-- ;
 	}
-		
 	return true ;
 }
 
diff -Nur gparted-0.0.8+cvs2005061901/src/FileSystem.cc gparted-0.0.8+cvs2005061901.new/src/FileSystem.cc
--- gparted-0.0.8+cvs2005061901/src/FileSystem.cc	2004-11-30 22:05:48.000000000 +0100
+++ gparted-0.0.8+cvs2005061901.new/src/FileSystem.cc	2005-08-05 20:17:32.000000000 +0200
@@ -34,7 +34,9 @@
 	
 	//stderr to stdout
 	//command += " 2>&1" ;
+#if 0 /* TODO: make writing junk to stdout conditional or drop it */
 	std::cout << command << std::endl ;
+#endif
 	output = command + "\n\n" ;
 	dispatcher ( ) ;
 	
@@ -51,7 +53,7 @@
 	output = "" ;
 	dispatcher( ) ;
 	
-        return pclose( f ) ;
+	return pclose( f ) ;
 }
 
 void FileSystem::Update_Textview( ) 
diff -Nur gparted-0.0.8+cvs2005061901/src/GParted_Core.cc gparted-0.0.8+cvs2005061901.new/src/GParted_Core.cc
--- gparted-0.0.8+cvs2005061901/src/GParted_Core.cc	2005-02-01 18:04:03.000000000 +0100
+++ gparted-0.0.8+cvs2005061901.new/src/GParted_Core.cc	2005-08-05 20:17:32.000000000 +0200
@@ -2,7 +2,7 @@
 
 namespace GParted
 {
-	
+
 GParted_Core::GParted_Core( ) 
 {
 	device = NULL ;
@@ -14,11 +14,13 @@
 	//get valid flags ...
 	for ( PedPartitionFlag flag = ped_partition_flag_next( (PedPartitionFlag) NULL ) ; flag ; flag = ped_partition_flag_next( flag ) )
 		flags .push_back( flag ) ;	
-	
+
+#if 0 /* TODO: make writing junk to stdout conditional or drop it */
 	//throw libpartedversion to the stdout to see which version is actually used.
 	std::cout << "======================" << std::endl ;
 	std::cout << "libparted : " << ped_get_version( ) << std::endl ;
 	std::cout << "======================" << std::endl ;
+#endif
 	
 	//initialize filesystemlist
 	find_supported_filesystems( ) ;
@@ -192,7 +194,7 @@
 							c_partition ->type,
 							ped_partition_is_busy( c_partition ) );
 					
-				if ( partition_temp .filesystem != "linux-swap" )
+				if ( ! partition_temp .Is_Swap( ) )
 				{
 					Set_Used_Sectors( partition_temp ) ;
 					
@@ -524,7 +526,7 @@
 	
 		if ( real_path == device_name ) { 
 			fclose ( proc_part_file );
-		  	return ( Glib::ustring( short_path ) );
+			return ( Glib::ustring( short_path ) );
 		}
 		
 	}
@@ -681,7 +683,7 @@
 				{
 					if ( 	ped_disk_set_partition_geom ( disk, c_partition, constraint, partition_new .sector_start, partition_new .sector_end ) &&
 						ped_file_system_resize ( fs, & c_partition ->geom, NULL )
-                                           )
+					   )
 							return_value = Commit( disk ) ;
 										
 					ped_constraint_destroy ( constraint );
@@ -755,4 +757,156 @@
 		p_filesystem ->textbuffer = textbuffer ;
 }
 
+void GParted_Core::Set_Mount_Point( const Glib::ustring & device_name, const Partition & partition, const Glib::ustring & mount_point )
+{
+	MountPoint_Map & map = device_map[ device_name .raw( ) ];
+	MountPoint_Map::iterator p = map .find( partition .sector_start );
+
+	if ( p != map .end( ) )
+	{
+		if ( ! mount_point .empty( ) )
+			p ->second = mount_point;
+		else
+			map .erase( p );
+	}
+	else
+	{
+		if ( ! mount_point .empty( ) )
+			map .insert( std::make_pair( partition .sector_start, mount_point ) );
+	}
+}
+
+Glib::ustring GParted_Core::Get_Mount_Point( const Glib::ustring & device_name, const Partition & partition ) const
+{
+	Device_Map::const_iterator pdevice = device_map .find( device_name .raw( ) );
+
+	if ( pdevice != device_map .end( ) )
+	{
+		MountPoint_Map::const_iterator p = pdevice ->second .find( partition .sector_start );
+
+		if ( p != pdevice ->second .end( ) )
+			return p ->second;
+	}
+
+	return Glib::ustring( );
+}
+
+void GParted_Core::Unset_Device_Mount_Points( const Glib::ustring & device_name )
+{
+	device_map[ device_name .raw( ) ] .clear( );
+}
+
+void GParted_Core::Realign_Mount_Point_Map( const std::vector<Device> & devices )
+{
+	Device_Map::iterator pdevice = device_map .begin( );
+
+	while ( pdevice != device_map .end( ) )
+	{
+		unsigned int devidx = 0;
+
+		while ( devidx < devices .size( ) && devices[ devidx ] .path .raw( ) != pdevice ->first )
+			++devidx;
+
+		if ( devidx == devices .size( ) ) //not found
+		{
+			device_map .erase( pdevice++ );
+			continue;
+		}
+
+		//Use the cylinder size to judge the plausibility of the
+		//difference between requested and actual start sector.
+		Sector cylsize = devices[ devidx ] .heads * devices[ devidx ] .sectors;
+
+		if ( cylsize < MEGABYTE )
+			cylsize = MEGABYTE;
+
+		//Build a new map with the start sectors realigned
+		//to actual partition boundaries.
+		MountPoint_Map map_temp;
+		MountPoint_Map & map = pdevice ->second;
+
+		for ( MountPoint_Map::iterator p = map .begin( ); p != map .end( ); ++p )
+		{
+			Sector closest = Find_Closest_Start_Sector(
+				devices[ devidx ] .device_partitions, p ->first );
+
+			if ( closest >= 0 && std::abs( closest - p ->first ) < cylsize )
+				map_temp .insert( std::make_pair( closest, p ->second ) );
+		}
+
+		//Now replace the original map with the realigned one.
+		map .swap( map_temp );
+
+		++pdevice;
+	}
+}
+
+//static
+Sector GParted_Core::Find_Closest_Start_Sector( const std::vector<Partition> & partitions, Sector start )
+{
+	Sector closest = -1;
+
+	for ( unsigned int i = 0; i < partitions .size( ); ++i )
+	{
+		Sector current;
+
+		switch ( partitions[ i ] .type )
+		{
+			case GParted::PRIMARY:
+			case GParted::LOGICAL:
+				current = partitions[ i ] .sector_start;
+				break;
+			case GParted::EXTENDED:
+				current = Find_Closest_Start_Sector( partitions[ i ] .logicals, start );
+				break;
+			default:
+				continue;
+		}
+
+		if ( closest < 0 || std::abs( current - start ) < std::abs( closest - start ) )
+			closest = current;
+	}
+
+	return closest;
+}
+
+void GParted_Core::Dump_Mount_Point_List( const std::vector<Device> & devices, std::ostream & os ) const
+{
+	for ( unsigned int i = 0; i < devices .size( ); ++i )
+	{
+		Device_Map::const_iterator pdevice = device_map .find( devices[ i ] .path .raw( ) );
+
+		if ( pdevice != device_map .end( ) )
+			Dump_Device_Mount_Points( devices[ i ] .device_partitions, pdevice ->second, os );
+	}
+}
+
+//static
+void GParted_Core::Dump_Device_Mount_Points( const std::vector<Partition> & partitions, const MountPoint_Map & map, std::ostream & os )
+{
+	for ( unsigned int i = 0; i < partitions .size( ); ++i )
+	{
+		switch ( partitions[ i ] .type )
+		{
+			case GParted::PRIMARY:
+			case GParted::LOGICAL:
+			{
+				MountPoint_Map::const_iterator p = map .find( partitions[ i ] .sector_start );
+				if ( p != map .end( ) )
+				{
+					os << partitions[ i ] .partition .raw( ) << '\t'
+					   << partitions[ i ] .filesystem .raw( ) << '\t'
+					   << p ->second .raw( ) << '\n';
+				}
+				break;
+			}
+			case GParted::EXTENDED:
+				Dump_Device_Mount_Points( partitions[ i ] .logicals, map, os );
+				break;
+			default:
+				break;
+		}
+	}
+}
+
 } //GParted
diff -Nur gparted-0.0.8+cvs2005061901/src/Operation.cc gparted-0.0.8+cvs2005061901.new/src/Operation.cc
--- gparted-0.0.8+cvs2005061901/src/Operation.cc	2005-01-19 21:01:39.000000000 +0100
+++ gparted-0.0.8+cvs2005061901.new/src/Operation.cc	2005-08-05 20:17:32.000000000 +0200
@@ -100,7 +100,7 @@
 		case RESIZE_MOVE:	Apply_Resize_Move_To_Visual( partitions );	break ;
 		case CREATE	:
 		case CONVERT	:
-		case COPY	:	Apply_Create_To_Visual( partitions ); 		break ;
+		case COPY	:	Apply_Create_To_Visual( partitions );		break ;
 	}
 }
 
diff -Nur gparted-0.0.8+cvs2005061901/src/Partition.cc gparted-0.0.8+cvs2005061901.new/src/Partition.cc
--- gparted-0.0.8+cvs2005061901/src/Partition.cc	2004-11-24 16:05:36.000000000 +0100
+++ gparted-0.0.8+cvs2005061901.new/src/Partition.cc	2005-08-05 20:17:32.000000000 +0200
@@ -37,13 +37,13 @@
 }
 
 void Partition::Set(	const Glib::ustring & partition,
-			const int partition_number,
-			const PartitionType type,
+			int partition_number,
+			PartitionType type,
 			const Glib::ustring & filesystem,
 			const Sector & sector_start,
 			const Sector & sector_end,
-			const bool inside_extended,
-			const bool busy )
+			bool inside_extended,
+			bool busy )
 {
 	this ->partition = partition;
 	this ->partition_number = partition_number;
@@ -79,21 +79,27 @@
 	this ->partition += num_to_str( partition_number ) ;
 }
 
-const long Partition::Get_Length_MB( ) const
+long Partition::Get_Length_MB( ) const
 {
 	return Sector_To_MB( sector_end - sector_start ) ;
 }
 
-const long Partition::Get_Used_MB( ) const
+long Partition::Get_Used_MB( ) const
 { 
 	return Sector_To_MB( this ->sectors_used ) ;
 }
 
-const long Partition::Get_Unused_MB( ) const
+long Partition::Get_Unused_MB( ) const
 {
 	return Get_Length_MB( ) - Get_Used_MB( ) ;
 }
 
+bool Partition::Is_Swap( ) const
+{
+	//use raw( ) to avoid Unicode collation
+	return ( filesystem .raw( ) == "linux-swap" );
+}
+
 Partition::~Partition( )
 {
 }
diff -Nur gparted-0.0.8+cvs2005061901/src/TreeView_Detail.cc gparted-0.0.8+cvs2005061901.new/src/TreeView_Detail.cc
--- gparted-0.0.8+cvs2005061901/src/TreeView_Detail.cc	2005-02-01 18:04:03.000000000 +0100
+++ gparted-0.0.8+cvs2005061901.new/src/TreeView_Detail.cc	2005-08-05 20:17:32.000000000 +0200
@@ -15,8 +15,9 @@
  *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
  */
  
- #include "../include/TreeView_Detail.h"
- 
+#include "../include/TreeView_Detail.h"
+#include <gtkmm/cellrenderercombo.h>
+
 namespace GParted
 { 
 
@@ -26,7 +27,7 @@
 	this->set_model( treestore_detail );
 	this->set_rules_hint(true);
 	this->treeselection = this->get_selection();
-		
+
 	//append columns
 	this->append_column( _("Partition"), treeview_detail_columns.partition );
 	this->append_column( _("Filesystem"), treeview_detail_columns.type_square );
@@ -34,8 +35,7 @@
 	this->append_column( _("Used(MB)"), treeview_detail_columns.used );
 	this->append_column( _("Unused(MB)"), treeview_detail_columns.unused );
 	this->append_column( _("Flags"), treeview_detail_columns.flags );
-	
-		
+
 	//status_icon
 	this->get_column( 0 ) ->pack_start( treeview_detail_columns.status_icon, false );
 	
@@ -62,12 +62,43 @@
 	
 	
 	//set alignment of numeric columns to right
-	for( short t = 2 ; t < 5 ; t++ )
+	for( int t = 2 ; t < 5 ; t++ )
 	{
 		cell_renderer_text = dynamic_cast<Gtk::CellRendererText*>( this ->get_column( t ) ->get_first_cell_renderer( ) );
 		cell_renderer_text ->property_xalign( ) = 1;
 	}
-	
+
+	treeselection ->signal_changed( )
+		.connect( sigc::mem_fun( *this, &TreeView_Detail::on_selection_changed ) );
+}
+
+void TreeView_Detail::Add_Mount_Point_Column( )
+{
+	liststore_mount_point = Gtk::ListStore::create( mount_point_columns );
+	( *liststore_mount_point ->append( ) )[ mount_point_columns .path ] = "";
+	( *liststore_mount_point ->append( ) )[ mount_point_columns .path ] = "/";
+	( *liststore_mount_point ->append( ) )[ mount_point_columns .path ] = "/boot";
+	( *liststore_mount_point ->append( ) )[ mount_point_columns .path ] = "/home";
+	( *liststore_mount_point ->append( ) )[ mount_point_columns .path ] = "/pub";
+	( *liststore_mount_point ->append( ) )[ mount_point_columns .path ] = "/usr";
+	( *liststore_mount_point ->append( ) )[ mount_point_columns .path ] = "/var";
+
+	liststore_use_swap = Gtk::ListStore::create( mount_point_columns );
+	( *liststore_use_swap ->append( ) )[ mount_point_columns .path ] = "";
+	( *liststore_use_swap ->append( ) )[ mount_point_columns .path ] = "swap";
+
+	Gtk::TreeView::Column * column = new Gtk::TreeView::Column( _("Mount point") );
+	this->append_column( *Gtk::manage( column ) );
+
+	Gtk::CellRendererCombo * renderer = new Gtk::CellRendererCombo( );
+	column->pack_start( *Gtk::manage( renderer ) );
+
+	renderer ->property_text_column( ) = mount_point_columns .path .index( );
+
+	column->set_cell_data_func( *renderer,
+		sigc::mem_fun( *this, &TreeView_Detail::mount_point_cell_data_func ) );
+	renderer->signal_edited( ) .connect(
+		sigc::mem_fun( *this, &TreeView_Detail::on_mount_point_edited ) );
 }
 
 void TreeView_Detail::Load_Partitions( const std::vector<Partition> & partitions ) 
@@ -172,20 +203,68 @@
 	treerow[ treeview_detail_columns .partition_struct ] = partition;
 }
 
-bool TreeView_Detail::on_button_press_event( GdkEventButton* event )
+bool TreeView_Detail::on_button_press_event( GdkEventButton * event )
+{
+	bool handled = Gtk::TreeView::on_button_press_event( event );
+
+	if ( event ->type == GDK_BUTTON_PRESS && event ->button == 3 )
+	{
+		signal_popup_menu .emit( event ->button, event ->time );
+		handled = true;
+	}
+
+	return handled;
+}
+
+void TreeView_Detail::on_row_activated( const Gtk::TreeModel::Path & path, Gtk::TreeView::Column * column )
+{
+	Gtk::TreeView::on_row_activated( path, column );
+
+	if ( Gtk::TreeModel::iterator iter = treestore_detail ->get_iter( path ) )
+		signal_partition_activated .emit( ( *iter )[ treeview_detail_columns .partition_struct ] );
+}
+
+void TreeView_Detail::on_selection_changed( )
 { 
-	//Call base class, to allow normal handling,
-   	bool return_value = TreeView::on_button_press_event( event );
+	if ( Gtk::TreeModel::iterator iter = treeselection ->get_selected( ) )
+		signal_partition_selected .emit( ( *iter )[ treeview_detail_columns .partition_struct ] );
+}
 
-	iter = treeselection ->get_selected( );
-		
-	if ( *iter != 0 )
+void TreeView_Detail::mount_point_cell_data_func( Gtk::CellRenderer * cell, const Gtk::TreeModel::iterator & iter )
+{
+	Gtk::CellRendererCombo * renderer = dynamic_cast<Gtk::CellRendererCombo*>( cell );
+
+	Partition partition = ( *iter )[ treeview_detail_columns .partition_struct ];
+
+	if ( ( partition .type == GParted::PRIMARY || partition .type == GParted::LOGICAL ) )
 	{
-		row = *iter;
-		signal_mouse_click .emit( event, row[ treeview_detail_columns .partition_struct ] );
+		if ( ! partition .Is_Swap( ) )
+		{
+			renderer ->property_model( ) = liststore_mount_point;
+			renderer ->property_has_entry( ) = true;
+		}
+		else
+		{
+			renderer ->property_model( ) = liststore_use_swap;
+			renderer ->property_has_entry( ) = false;
+		}
+		renderer ->property_text( ) = signal_get_mount_point .emit( partition );
+		renderer ->property_editable( ) = true;
 	}
-		
-	return return_value;
+	else
+	{
+		renderer ->property_text( ) = Glib::ustring( );
+		renderer ->property_editable( ) = false;
+	}
+}
+
+void TreeView_Detail::on_mount_point_edited( const Glib::ustring & path, const Glib::ustring & new_text )
+{
+	Gtk::TreeModel::iterator iter = treestore_detail ->get_iter( path );
+	g_return_if_fail( iter );
+
+	Partition partition = ( *iter )[ treeview_detail_columns .partition_struct ];
+	signal_set_mount_point .emit( partition, new_text );
 }
 
 } //GParted
diff -Nur gparted-0.0.8+cvs2005061901/src/VBox_VisualDisk.cc gparted-0.0.8+cvs2005061901.new/src/VBox_VisualDisk.cc
--- gparted-0.0.8+cvs2005061901/src/VBox_VisualDisk.cc	2005-01-19 21:01:39.000000000 +0100
+++ gparted-0.0.8+cvs2005061901.new/src/VBox_VisualDisk.cc	2005-08-05 20:17:32.000000000 +0200
@@ -302,7 +302,19 @@
 
 bool VBox_VisualDisk::on_drawingarea_button_press( GdkEventButton *event, const Partition & partition )
 {
-	signal_mouse_click .emit( event, partition );
+	if ( event->type == GDK_BUTTON_PRESS )
+	{
+		this->Set_Selected( partition );
+		signal_partition_selected.emit( partition );
+
+		if ( event->button == 3 )
+			signal_popup_menu.emit( event->button, event->time );
+	}
+	else if ( event->type == GDK_2BUTTON_PRESS && event->button == 1 )
+	{
+		signal_partition_activated.emit( partition );
+	}
+
 	return true;
 }
 
--- gparted-0.0.8+cvs2005061901/src/Win_GParted.cc	2005-02-06 23:11:32.000000000 +0100
+++ gparted-0.0.8+cvs2005061901.new/src/Win_GParted.cc	2005-08-17 11:49:26.426652448 +0200
@@ -16,12 +16,16 @@
  */
  
 #include "../include/Win_GParted.h"
+#include <gtk/gtk.h>
 
 namespace GParted
 {
 	
-Win_GParted::Win_GParted( )
+Win_GParted::Win_GParted( guint installer )
 {
+
+	installer_mode = installer;
+
 	copied_partition .Reset( ) ;
 	selected_partition .Reset( ) ;
 	new_count = 1;
@@ -29,16 +33,30 @@
 	vbox_visual_disk = NULL;
 	pulse = false ;
 	
-	//==== GUI =========================
-	this ->set_title( _("GParted") );
-	this ->set_default_size( 775, 500 );
-		
-	//Pack the main box
-	this ->add( vbox_main ); 
-	
-	//menubar....
-	init_menubar( ) ;
-	vbox_main .pack_start( menubar_main, Gtk::PACK_SHRINK );
+	// Plug hacks for embedding gparted into ubuntu-express
+	if ( installer_mode > 0)
+	{
+		GtkWidget * plug;
+		plug = gtk_plug_new(installer_mode);
+		gtk_container_add(GTK_CONTAINER(plug), GTK_WIDGET(vbox_main.gobj()));
+		gtk_widget_show(GTK_WIDGET(vbox_main.gobj()));
+		gtk_widget_show(plug);
+		this ->iconify();
+		init_partition_menu( );
+	}
+	else
+	{
+		//==== GUI =========================
+		this ->set_title( _("GParted") );
+		this ->set_default_size( 775, 500 );
+	
+		//Pack the main box
+		this ->add( vbox_main ); 
+	
+		//menubar....
+		init_menubar( ) ;
+		vbox_main .pack_start( menubar_main, Gtk::PACK_SHRINK );
+	}
 	
 	//toolbar....
 	init_toolbar( ) ;
@@ -67,17 +85,21 @@
 	statusbar .add( *pulsebar );
 	vbox_main .pack_start( statusbar, Gtk::PACK_SHRINK );
 	
-	this ->show_all_children( );
+	if ( installer_mode > 0 )
+	    vbox_main .show_all_children( );
+	else
+	    this ->show_all_children( );
 	
 	//make sure harddisk information and operationlist are closed..
 	hpaned_main .get_child1( ) ->hide( ) ;
 	close_operationslist( ) ;
-	
+
 	conn = dispatcher .connect( sigc::mem_fun( *this, &Win_GParted::menu_gparted_refresh_devices ) );
 	dispatcher( ) ;
+
 }
 
-void Win_GParted::init_menubar( ) 
+void Win_GParted::init_menubar( )
 {
 	//fill menubar_main and connect callbacks 
 	//gparted
@@ -134,22 +156,37 @@
 	toolbutton ->set_tooltip(tooltips, _("Resize/Move the selected partition") );		
 	toolbar_main.append( *(Gtk::manage(new Gtk::SeparatorToolItem)) );
 	
-	//COPY and PASTE
-	toolbutton = Gtk::manage(new Gtk::ToolButton(Gtk::Stock::COPY));
-	toolbutton ->signal_clicked().connect( sigc::mem_fun(*this, &Win_GParted::activate_copy) );	toolbar_main.append(*toolbutton);
-	toolbutton ->set_tooltip(tooltips, _("Copy the selected partition to the clipboard") );		
-	toolbutton = Gtk::manage(new Gtk::ToolButton(Gtk::Stock::PASTE));
-	toolbutton ->signal_clicked().connect( sigc::mem_fun(*this, &Win_GParted::activate_paste) );	toolbar_main.append(*toolbutton);
-	toolbutton ->set_tooltip(tooltips, _("Paste the partition from the clipboard") );		
-	toolbar_main.append( *(Gtk::manage(new Gtk::SeparatorToolItem)) );
+	if ( installer_mode == 0 )
+	{
+		//COPY and PASTE
+		toolbutton = Gtk::manage(new Gtk::ToolButton(Gtk::Stock::COPY));
+		toolbutton ->signal_clicked().connect( sigc::mem_fun(*this, &Win_GParted::activate_copy) );
+		toolbar_main.append(*toolbutton);
+		toolbutton ->set_tooltip(tooltips, _("Copy the selected partition to the clipboard") );
+
+		toolbutton = Gtk::manage(new Gtk::ToolButton(Gtk::Stock::PASTE));
+		toolbutton ->signal_clicked().connect( sigc::mem_fun(*this, &Win_GParted::activate_paste) );
+		toolbar_main.append(*toolbutton);
+		toolbutton ->set_tooltip(tooltips, _("Paste the partition from the clipboard") );
+
+		toolbar_main.append( *(Gtk::manage(new Gtk::SeparatorToolItem)) );
+	}
 	
 	//UNDO and APPLY
-	toolbutton = Gtk::manage(new Gtk::ToolButton(Gtk::Stock::UNDO));
-	toolbutton ->signal_clicked().connect( sigc::mem_fun(*this, &Win_GParted::activate_undo) );	toolbar_main.append(*toolbutton); toolbutton ->set_sensitive( false );
-	toolbutton ->set_tooltip(tooltips, _("Undo last operation") );		
-	toolbutton = Gtk::manage(new Gtk::ToolButton(Gtk::Stock::APPLY));
-	toolbutton ->signal_clicked().connect( sigc::mem_fun(*this, &Win_GParted::activate_apply) );	toolbar_main.append(*toolbutton); toolbutton ->set_sensitive( false );
-	toolbutton ->set_tooltip(tooltips, _("Apply all operations") );		
+	toolbutton_undo = Gtk::manage(new Gtk::ToolButton(Gtk::Stock::UNDO));
+	toolbutton_undo ->signal_clicked().connect( sigc::mem_fun(*this, &Win_GParted::activate_undo) );	toolbar_main.append(*toolbutton_undo); toolbutton_undo ->set_sensitive( false );
+	toolbutton_undo ->set_tooltip(tooltips, _("Undo last operation") );		
+
+	if ( installer_mode > 0 )
+	{
+		image = manage( new Gtk::Image( Gtk::Stock::SAVE, Gtk::ICON_SIZE_LARGE_TOOLBAR ) );
+		toolbutton_apply = Gtk::manage(new Gtk::ToolButton( *image, _("Save and Exit") ));
+	}
+	else
+		toolbutton_apply = Gtk::manage(new Gtk::ToolButton(Gtk::Stock::APPLY));
+
+	toolbutton_apply ->signal_clicked().connect( sigc::mem_fun(*this, &Win_GParted::activate_apply) );	toolbar_main.append(*toolbutton_apply); toolbutton_apply ->set_sensitive( false );
+	toolbutton_apply ->set_tooltip(tooltips, _("Apply all operations") );		
 	
 	//initizialize and pack optionmenu_devices
 	optionmenu_devices .set_menu( * manage( new Gtk::Menu( ) ) );
@@ -334,7 +371,23 @@
 	scrollwindow ->set_policy( Gtk::POLICY_AUTOMATIC, Gtk::POLICY_AUTOMATIC );
 	
 	//connect signal and add treeview_detail
-	treeview_detail .signal_mouse_click .connect( sigc::mem_fun( this, &Win_GParted::mouse_click ) );
+	treeview_detail.signal_partition_selected.
+		connect( sigc::mem_fun( *this, &Win_GParted::on_partition_selected ) );
+	treeview_detail.signal_partition_activated.
+		connect( sigc::mem_fun( *this, &Win_GParted::on_partition_activated ) );
+	treeview_detail.signal_popup_menu.
+		connect( sigc::mem_fun( *this, &Win_GParted::on_popup_menu ) );
+
+	if ( installer_mode > 0 )
+	{
+		treeview_detail .signal_set_mount_point
+			.connect( sigc::mem_fun( *this, &Win_GParted::on_set_mount_point ) );
+		treeview_detail .signal_get_mount_point
+			.connect( sigc::mem_fun( *this, &Win_GParted::on_get_mount_point ) );
+
+		treeview_detail .Add_Mount_Point_Column( );
+	}
+
 	scrollwindow ->add( treeview_detail );
 	hpaned_main.pack2( *scrollwindow, true, true );
 }
@@ -371,7 +424,10 @@
 	
 	//disable all input stuff
 	toolbar_main .set_sensitive( false ) ;
-	menubar_main .set_sensitive( false ) ;
+
+	if ( installer_mode == 0 )
+		menubar_main .set_sensitive( false ) ;
+
 	optionmenu_devices .set_sensitive( false ) ;
 	menu_partition .set_sensitive( false ) ;
 		
@@ -393,7 +449,10 @@
 		
 	//enable all disabled stuff
 	toolbar_main .set_sensitive( true ) ;
-	menubar_main .set_sensitive( true ) ;
+
+	if ( installer_mode == 0 )
+		menubar_main .set_sensitive( true ) ;
+
 	optionmenu_devices .set_sensitive( true ) ;
 	menu_partition .set_sensitive( true ) ;
 }
@@ -519,7 +578,12 @@
 	}
 	
 	vbox_visual_disk = new VBox_VisualDisk ( partitions, devices[ current_device ] .length ) ;
-	vbox_visual_disk ->signal_mouse_click.connect( sigc::mem_fun( this, &Win_GParted::mouse_click ) ) ;
+	vbox_visual_disk ->signal_partition_selected.
+		connect( sigc::mem_fun( treeview_detail, &TreeView_Detail::Set_Selected ) );
+	vbox_visual_disk ->signal_partition_activated.
+		connect( sigc::mem_fun( *this, &Win_GParted::on_partition_activated ) );
+	vbox_visual_disk ->signal_popup_menu.
+		connect( sigc::mem_fun( *this, &Win_GParted::on_popup_menu ) );
 	hbox_visual .pack_start( *vbox_visual_disk, Gtk::PACK_EXPAND_PADDING ) ;
 	hbox_visual .show_all_children( ) ;
 
@@ -545,9 +609,10 @@
 		Gtk::MessageDialog dialog( *this, str_temp, true, Gtk::MESSAGE_QUESTION, Gtk::BUTTONS_NONE, true);
 		dialog .add_button( Gtk::Stock::QUIT, Gtk::RESPONSE_CLOSE );
 		dialog .add_button( Gtk::Stock::CANCEL,Gtk::RESPONSE_CANCEL );
-		
-		if ( dialog .run( ) == Gtk::RESPONSE_CANCEL )
-			return false;//don't close GParted
+
+		//In installer mode, don't dump the mount point list
+		//if the user requested to discard pending operations.
+		return ( dialog .run( ) == Gtk::RESPONSE_CLOSE );
 	}
 
 	return true; //close GParted
@@ -568,7 +633,7 @@
 	//only unmount is allowed
 	if ( selected_partition .busy )
 	{
-		if ( selected_partition .filesystem != "linux-swap" && selected_partition .type != GParted::EXTENDED )
+		if ( ! selected_partition .Is_Swap( ) && selected_partition .type != GParted::EXTENDED )
 			allow_unmount( true ) ;
 		
 		return;
@@ -648,7 +713,8 @@
 			Gtk::Main::iteration( );
 	}
 	
-	( (Gtk::CheckMenuItem *) & menubar_main .items( ) [ 1 ] .get_submenu( ) ->items( ) [ 1 ] ) ->set_active( true ) ;
+	if ( installer_mode == 0 )
+		( (Gtk::CheckMenuItem *) & menubar_main .items( ) [ 1 ] .get_submenu( ) ->items( ) [ 1 ] ) ->set_active( true ) ;
 }
 
 void Win_GParted::close_operationslist( ) 
@@ -663,7 +729,9 @@
 	}
 	
 	hbox_operations .hide( ) ;
-	( (Gtk::CheckMenuItem *) & menubar_main .items( ) [ 1 ] .get_submenu( ) ->items() [ 1 ] ) ->set_active( false ) ;
+
+	if ( installer_mode == 0 )
+		( (Gtk::CheckMenuItem *) & menubar_main .items( ) [ 1 ] .get_submenu( ) ->items() [ 1 ] ) ->set_active( false ) ;
 }
 
 void Win_GParted::clear_operationslist( ) 
@@ -695,7 +763,10 @@
 	//check if current_device is still available (think about hotpluggable shit like usbdevices)
 	if ( current_device >= devices .size( ) )
 		current_device = 0 ;
-	
+
+	if ( operations .empty( ) )
+		gparted_core .Realign_Mount_Point_Map( devices );
+
 	//show read-only warning if necessary
 	Glib::ustring readonly_paths ;
 	
@@ -735,8 +806,11 @@
 	{	
 		optionmenu_devices .hide( ) ;
 		
-		menubar_main .items( )[ 2 ] .set_sensitive( false ) ;
-		menubar_main .items( )[ 3 ] .set_sensitive( false ) ;
+		if ( installer_mode == 0 )
+		{
+			menubar_main .items( )[ 2 ] .set_sensitive( false ) ;
+			menubar_main .items( )[ 3 ] .set_sensitive( false ) ;
+		}
 		toolbar_main .set_sensitive( false ) ;
 		optionmenu_devices .set_sensitive( false ) ;
 		
@@ -762,9 +836,11 @@
 	
 	else //at least one device detected
 	{
-		menubar_main .items( )[ 2 ] .set_sensitive( true ) ;
-		menubar_main .items( )[ 3 ] .set_sensitive( true ) ;
-		
+		if ( installer_mode == 0 )
+		{
+			menubar_main .items( )[ 2 ] .set_sensitive( true ) ;
+			menubar_main .items( )[ 3 ] .set_sensitive( true ) ;
+		}
 		Refresh_OptionMenu( ) ;	
 	}
 }
@@ -792,14 +868,14 @@
 { 
 	if ( ( (Gtk::CheckMenuItem *) & menubar_main .items( ) [ 1 ] .get_submenu( ) ->items( ) [ 0 ] ) ->get_active( ) )
 	{ //open harddisk information
-		hpaned_main .get_child1( ) ->show( ) ;		
+		hpaned_main .get_child1( ) ->show( ) ;
 		for ( int t = hpaned_main .get_position( ) ; t < 250 ; t +=15 )
 		{
 			hpaned_main .set_position( t );
 			while ( Gtk::Main::events_pending( ) )
 				Gtk::Main::iteration( );
 		}
-	}
+	} 
 	else 
 	{ 	//close harddisk information
 		for ( int t=hpaned_main .get_position( ) ;  t > 0 ; t -=15 )
@@ -816,7 +892,7 @@
 {
 	if ( ( (Gtk::CheckMenuItem *) & menubar_main .items( ) [ 1 ] .get_submenu( ) ->items( ) [ 1 ] ) ->get_active( ) )
 		open_operationslist( ) ;
-	else 
+	else
 		close_operationslist( ) ;
 }
 
@@ -838,25 +914,38 @@
 	dialog .run( );
 }
 
-void Win_GParted::mouse_click( GdkEventButton *event, const Partition & partition )
+void Win_GParted::on_partition_selected( const Partition & partition )
 {
-	selected_partition = partition;
-	
-	Set_Valid_Operations( ) ;
-	
-	treeview_detail .Set_Selected( partition );
 	vbox_visual_disk ->Set_Selected( partition );
-	
-	if ( event ->type == GDK_2BUTTON_PRESS && ! pulse )
-		activate_info( ) ;
-	else if ( event ->button == 3 )  //right-click
-	{
-		//prepare convert menu
-		if ( selected_partition .type != GParted::UNALLOCATED )
-			Set_Valid_Convert_Filesystems( ) ;
-		
-		menu_partition .popup( event ->button, event ->time );
-	}
+
+	selected_partition = partition;
+
+	Set_Valid_Operations( );
+}
+
+void Win_GParted::on_partition_activated( const Partition & partition )
+{
+	if ( ! pulse )
+		activate_info( );
+}
+
+void Win_GParted::on_popup_menu( unsigned int button, guint32 time )
+{
+	//prepare convert menu
+	if ( selected_partition .type != GParted::UNALLOCATED )
+		Set_Valid_Convert_Filesystems( ) ;
+
+	menu_partition .popup( button, time );
+}
+
+void Win_GParted::on_set_mount_point( const Partition & partition, const Glib::ustring & mount_point )
+{
+	gparted_core .Set_Mount_Point( devices[ current_device ] .path, partition, mount_point );
+}
+
+Glib::ustring Win_GParted::on_get_mount_point( const Partition & partition )
+{
+	return gparted_core .Get_Mount_Point( devices[ current_device ] .path, partition );
 }
 
 bool Win_GParted::max_amount_prim_reached( ) 
@@ -929,6 +1018,9 @@
 	{
 		dialog .hide( ) ;//i want to be sure the dialog is gone _before_ operationslist shows up (only matters if first operation)
 		
+	//unset any mount point associated with this partition
+	gparted_core .Set_Mount_Point( devices[ current_device ] .path, selected_partition, Glib::ustring( ) );
+
 		//if selected_partition is NEW we simply remove the NEW operation from the list and add it again with the new size and position ( unless it's an EXTENDED )
 		if ( selected_partition .status == GParted::STAT_NEW && selected_partition.type != GParted::EXTENDED )
 		{
@@ -1032,7 +1124,10 @@
 	if ( dialog .run( ) == Gtk::RESPONSE_OK )
 	{
 		dialog .hide( ) ;//i want to be sure the dialog is gone _before_ operationslist shows up (only matters if first operation)
-		
+
+		//unset any mount point associated with this partition
+		gparted_core .Set_Mount_Point( devices[ current_device ] .path, selected_partition, Glib::ustring( ) );
+
 		//if deleted partition was on the clipboard we erase it...
 		if ( selected_partition .partition == copied_partition .partition )
 			copied_partition .Reset( ) ;
@@ -1108,6 +1203,10 @@
 		return ;
 	}
 	
+	//unset any mount point associated with this partition
+	gparted_core .Set_Mount_Point( devices[ current_device ] .path, selected_partition, Glib::ustring( ) );
+
+
 	//ok we made it :P lets create an fitting partition object
 	Partition part_temp;
 	part_temp .Set( selected_partition .partition, selected_partition .partition_number, selected_partition .type, new_fs, selected_partition .sector_start, selected_partition .sector_end, selected_partition .inside_extended, false ) ;
@@ -1140,12 +1239,12 @@
 	char c_buf[ 512 ] ;
 	Glib::ustring output ;
 
-        FILE *f = popen( ( "umount " + selected_partition .partition + " 2>&1" ) .c_str( ), "r" ) ;
+	FILE *f = popen( ( "umount " + selected_partition .partition + " 2>&1" ) .c_str( ), "r" ) ;
 	
 	while ( fgets( c_buf, 512, f ) )
 		output += c_buf ;
 	
-        pclose( f ) ;
+	pclose( f ) ;
 	
 	if ( ! output .empty( ) ) 
 	{
@@ -1180,7 +1279,10 @@
 			Gtk::MessageDialog dialog( *this, _("Error while setting new disklabel"), true, Gtk::MESSAGE_ERROR, Gtk::BUTTONS_OK, true ) ;
 			dialog .run( ) ;
 		}
-			
+
+		//unset any mount point associated with this partition
+		gparted_core .Unset_Device_Mount_Points( devices[ current_device ] .path );
+
 		menu_gparted_refresh_devices( ) ;
 	}
 }
@@ -1265,6 +1367,12 @@
 		
 		//reread devices and their layouts...
 		menu_gparted_refresh_devices( ) ;
+
+		if ( installer_mode > 0 )
+		{
+			gparted_core .Dump_Mount_Point_List( devices, std::cout );
+			hide( );
+		}
 	}
 }
 
@@ -1272,14 +1380,13 @@
 { 
 	for ( unsigned int t = 0 ; t < operations .size( ) && apply ; t++ )
 	{ 			
-		dialog_progress ->current_operation = operations[ t ] .str_operation ;
-		dialog_progress ->TIME_LEFT = gparted_core .get_estimated_time( operations[ t ] ) ;
+		dialog_progress ->Set_Current( operations[ t ] .str_operation,
+					       gparted_core .get_estimated_time( operations[ t ] ) );
 		dispatcher( ) ;
 		
 		gparted_core .Apply_Operation_To_Disk( operations[ t ] );
 	}
-	
-	dialog_progress ->response( Gtk::RESPONSE_OK );
+	dispatcher( );
 }
 
 
--- gparted-0.0.8+cvs2005061901/include/Win_GParted.h	2005-02-01 18:04:03.000000000 +0100
+++ gparted-0.0.8+cvs2005061901.new/include/Win_GParted.h	2005-08-17 11:27:24.000000000 +0200
@@ -51,7 +51,7 @@
 class Win_GParted : public Gtk::Window
 {
 public:
-	Win_GParted( );
+	explicit Win_GParted( guint installer );
 
 private:
 	void init_menubar( ) ;
@@ -81,13 +81,13 @@
 	void allow_new( bool b )	{ menu_partition .items( )[ 0 ] .set_sensitive( b ); toolbar_main .get_nth_item( 0 ) ->set_sensitive( b ); }
 	void allow_delete( bool b )	{ menu_partition .items( )[ 1 ] .set_sensitive( b ); toolbar_main .get_nth_item( 1 ) ->set_sensitive( b ); }
 	void allow_resize( bool b ) 	{ menu_partition .items( )[ 3 ] .set_sensitive( b ); toolbar_main .get_nth_item( 3 ) ->set_sensitive( b ); }
-	void allow_copy( bool b )	{ menu_partition .items( )[ 5 ] .set_sensitive( b ); toolbar_main .get_nth_item( 5 ) ->set_sensitive( b ); }
-	void allow_paste( bool b )	{ menu_partition .items( )[ 6 ] .set_sensitive( b ); toolbar_main .get_nth_item( 6 ) ->set_sensitive( b ); }
+	void allow_copy( bool b )	{ menu_partition .items( )[ 5 ] .set_sensitive( b ); if ( installer_mode == 0 ) toolbar_main .get_nth_item( 5 ) ->set_sensitive( b ); }
+	void allow_paste( bool b )	{ menu_partition .items( )[ 6 ] .set_sensitive( b ); if ( installer_mode == 0 ) toolbar_main .get_nth_item( 6 ) ->set_sensitive( b ); }
 	void allow_convert( bool b )	{ menu_partition .items( )[ 8 ] .set_sensitive( b ); }
 	void allow_unmount( bool b )	{ menu_partition .items( )[ 10 ] .set_sensitive( b ); }
 	void allow_info( bool b )	{ menu_partition .items( )[ 12 ] .set_sensitive( b ); }
-	void allow_undo( bool b )	{ toolbar_main .get_nth_item( 8 ) ->set_sensitive( b ); }
-	void allow_apply( bool b )	{ toolbar_main .get_nth_item( 9 ) ->set_sensitive( b ); }
+	void allow_undo( bool b )	{ toolbutton_undo ->set_sensitive( b ); }
+	void allow_apply( bool b )	{ toolbutton_apply ->set_sensitive( b ); }
 		
 	void find_devices_thread( )	{ gparted_core .get_devices( devices ) ; pulse = false ; }
 	
@@ -105,7 +105,12 @@
 	void menu_help_contents( );
 	void menu_help_about( );
 
-	void mouse_click( GdkEventButton*, const Partition & );
+	void on_partition_selected( const Partition & partition );
+	void on_partition_activated( const Partition & partition );
+	void on_popup_menu( unsigned int button, guint32 time );
+	void on_set_mount_point( const Partition & partition, const Glib::ustring & mount_point );
+	Glib::ustring on_get_mount_point( const Partition & partition );
+
 	bool max_amount_prim_reached( ) ;
 	
 	void activate_resize( ); 
@@ -148,6 +153,8 @@
 	Gtk::MenuItem *menu_item;
 	Gtk::Entry *entry;
 	Gtk::ProgressBar *pulsebar ;
+        Gtk::ToolButton *toolbutton_undo;
+        Gtk::ToolButton *toolbutton_apply;
 	
 	Gdk::Color color ;
 			
@@ -186,6 +193,8 @@
 	Glib::Dispatcher dispatcher;
 	sigc::connection conn ; 
 	bool apply, pulse ;
+
+	guint installer_mode;
 };
 
 } //GParted
--- gparted-0.0.8+cvs2005061901/src/main.cc	2005-02-01 18:04:03.000000000 +0100
+++ gparted-0.0.8+cvs2005061901.new/src/main.cc	2005-08-17 12:09:34.668971696 +0200
@@ -16,20 +16,33 @@
  */
  
 #include "../include/Win_GParted.h"
-
+#include <glib.h>
 
 int main( int argc, char *argv[ ] )
 {
+	guint installer_mode = 0;
+
 	//initialize thread system
 	Glib::thread_init( );
-	
-	Gtk::Main kit( argc, argv );
-	 
+
 	//i18n
 	bindtextdomain( GETTEXT_PACKAGE, GNOMELOCALEDIR );
 	bind_textdomain_codeset( GETTEXT_PACKAGE, "UTF-8" );
 	textdomain( GETTEXT_PACKAGE );
 
+	GOptionEntry options[] = {
+		{ "installer", 'i', 0, G_OPTION_ARG_INT, &installer_mode, "Installer Mode", "Wid" },
+		{ NULL }
+	};
+	GOptionContext *ctx;
+
+	ctx = g_option_context_new("     - Gparted Advanced Partitioner");
+	g_option_context_add_main_entries(ctx, options, "gparted");
+	g_option_context_parse(ctx, &argc, &argv, NULL);
+	g_option_context_free(ctx);
+
+	Gtk::Main kit( argc, argv );
+
 	//check UID
 	if ( getuid( ) != 0 )
 	{
@@ -37,11 +50,9 @@
 		dialog .run( ) ;
 		exit( 0 );
 	}
-	
-	GParted::Win_GParted win_gparted; 
+
+	GParted::Win_GParted win_gparted( installer_mode );
 	Gtk::Main::run( win_gparted );
 
 	return 0;
 }
-
-
