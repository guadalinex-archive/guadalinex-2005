#! /bin/sh

set -e
. /usr/share/debconf/confmodule
#set -x

. /usr/share/grub-installer/functions.sh

db_capb backup

# Run update-grub in /target.
update_grub_debconf () {
	# Pipe from 'yes' to tell grub to create menu.lst when it is missing. A
	# better correct fix is to get update-grub to be able to run in
	# noninteractive mode.  Newer versions of the grub package support
	# '-y' for noninteractive installs.  But we'll keep it as-is for
	# Skolelinux.
	if ! update_grub; then
		error "Running 'update-grub' failed." 1>&2
		db_input critical grub-installer/update-grub-failed || [ $? -eq 30 ]
		db_go || true
		db_progress STOP
		exit 1
	fi
}

bootfstype=$(findfstype /boot)
[ -n "$bootfstype" ] || bootfstype="$(findfstype /)"
if [ "$bootfstype" = "xfs" ]; then
	# warn user that grub on xfs is not safe and let them back out to
	# main menu.
	db_input critical grub-installer/install_to_xfs
	db_go || exit 10
	db_get grub-installer/install_to_xfs
	if [ "$RET" != true ]; then
		exit 10
	fi
fi

db_progress START 0 6 grub-installer/progress/title

db_progress INFO grub-installer/progress/step_install

if ! apt-install grub ; then
	info "Calling 'apt-install grub' failed"
	# Hm, unable to install grub into /target/, what should we do?
	db_input critical grub-installer/apt-install-failed || [ $? -eq 30 ]
	if ! db_go; then
		db_progress STOP
		exit 10 # back up to menu
	fi
	db_get grub-installer/apt-install-failed
	if [ true != "$RET" ] ; then
		db_progress STOP
		exit 1
	fi
fi

db_progress STEP 1
db_progress INFO grub-installer/progress/step_os-probe
  probe_can_boot
  CAN_BOOT=$?
  if [ $CAN_BOOT -eq 0 ]; then
  	q=grub-installer/only_debian
  	state=1
  elif [ $CAN_BOOT -eq 1 ]; then
	q=grub-installer/with_other_os
	db_subst $q OS_LIST "$supported_os_list"
	state=1
	else
	# Unsupported OS, jump straight to manual boot device question.
	state=2
  fi
 
db_progress STEP 1
db_progress INFO grub-installer/progress/step_bootdev

while : ; do
	if [ "$state" = 1 ]; then
		db_input $priority $q || true
		if ! db_go; then
			# back up to menu
			db_progress STOP
			exit 10
		fi
		db_get $q
		if [ "$RET" = true ]; then
			bootdev="(hd0)"
			break
		else
			state=2
		fi
	else
		db_input critical grub-installer/bootdev || true
		if ! db_go; then
			if [ "$q" ]; then
				state=1
			else
				# back up to menu
				db_progress STOP
				exit 10
			fi
		else
			db_get grub-installer/bootdev
			bootdev=$RET
			if echo "$bootdev" | grep -qv '('; then
				mappedbootdev=$(mapdevfs "$bootdev") || true
				if [ -n "$mappedbootdev" ]; then
					bootdev="$mappedbootdev"
				fi
			fi
			break
		fi
	fi
done

db_progress STEP 1
db_subst grub-installer/progress/step_install_loader BOOTDEV "$bootdev"
db_progress INFO grub-installer/progress/step_install_loader

info "Installing grub on '$bootdev'"

update_mtab

if grub_install; then
	info "grub-install ran successfully"
else
	error "Running 'grub-install --recheck $floppyparam \"$bootdev\"' failed."
	db_subst grub-installer/grub-install-failed BOOTDEV "$bootdev"
	db_input critical grub-installer/grub-install-failed || [ $? -eq 30 ]
	db_go || true
	db_progress STOP
	exit 1
fi

db_progress STEP 1
db_progress INFO grub-installer/progress/step_config_loader

# Delete for idempotency.
rm -f /target/boot/grub/menu.lst
update_grub_debconf

# Set up a password if asked.
db_input low grub-installer/password || true
if ! db_go; then
	# back up to menu
	db_progress STOP
	exit 10
fi
db_get grub-installer/password
if [ "$RET" ]; then
	password="$RET"
	# check if the password is crypted
	db_get grub-installer/password-crypted
	if [ "$RET" = true ]; then
		password_opts=--md5
	fi
	echo "password ${password_opts:+$password_opts }$password" \
		> /tmp/menu.lst.password
	# Add a line to menu.lst to use the given password
	# The line is appended after the commented example
	sed '/^# password/r /tmp/menu.lst.password' \
		< /target/boot/grub/menu.lst > /target/boot/grub/menu.lst.new
	mv /target/boot/grub/menu.lst.new /target/boot/grub/menu.lst
	# By default, menu.lst is world-readable, which is not so good if it
	# contains a password.
	chmod o-r /target/boot/grub/menu.lst
	rm -f /tmp/menu.lst.password
fi 

user_params=$(echo $(user-params)) || true
if [ -n "$user_params" ]; then
	# Modify menu.lst to include user parameters.
	sed "s!^\(# kopt=.*\)!\1 $user_params!" \
		< /target/boot/grub/menu.lst > /target/boot/grub/menu.lst.new
	mv /target/boot/grub/menu.lst.new /target/boot/grub/menu.lst
fi

if [ -s /tmp/os-probed ]; then
	# Other operating systems are installed, so show the menu by default
	# and raise the timeout.
	sed 's/^hiddenmenu[[:space:]]*$/#hiddenmenu/;
	     s/^\(timeout[[:space:]][[:space:]]*\).*/\110/' \
		< /target/boot/grub/menu.lst > /target/boot/grub/menu.lst.new
	mv /target/boot/grub/menu.lst.new /target/boot/grub/menu.lst
	update_grub_debconf # again, to add new options to all the Debian kernel entries
fi

probe_menu_list

db_progress STEP 1
db_progress INFO grub-installer/progress/step_update_etc

fix_kernel_package

db_progress STEP 1
db_progress STOP
