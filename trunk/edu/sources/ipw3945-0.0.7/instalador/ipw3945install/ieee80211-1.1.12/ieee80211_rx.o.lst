GAS LISTING  			page 1


   1              	.file "ieee80211_rx.c"
   9              	.Ltext0:
  11              	ieee80211_monitor_rx:
  12              	.LFB924:
  13              	.file 1 "/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c"
   1:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** /*
   2:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c ****  * Original code based Host AP (software wireless LAN access point) driver
   3:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c ****  * for Intersil Prism2/2.5/3 - hostap.o module, common routines
   4:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c ****  *
   5:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c ****  * Copyright (c) 2001-2002, SSH Communications Security Corp and Jouni Malinen
   6:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c ****  * <jkmaline@cc.hut.fi>
   7:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c ****  * Copyright (c) 2002-2003, Jouni Malinen <jkmaline@cc.hut.fi>
   8:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c ****  * Copyright (c) 2004-2005, Intel Corporation
   9:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c ****  *
  10:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c ****  * This program is free software; you can redistribute it and/or modify
  11:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c ****  * it under the terms of the GNU General Public License version 2 as
  12:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c ****  * published by the Free Software Foundation. See README and COPYING for
  13:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c ****  * more details.
  14:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c ****  */
  15:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
  16:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** #include <linux/compiler.h>
  17:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** #include <linux/config.h>
  18:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** #include <linux/errno.h>
  19:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** #include <linux/if_arp.h>
  20:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** #include <linux/in6.h>
  21:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** #include <linux/in.h>
  22:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** #include <linux/ip.h>
  23:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** #include <linux/kernel.h>
  24:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** #include <linux/module.h>
  25:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** #include <linux/netdevice.h>
  26:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** #include <linux/proc_fs.h>
  27:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** #include <linux/skbuff.h>
  28:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** #include <linux/slab.h>
  29:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** #include <linux/tcp.h>
  30:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** #include <linux/types.h>
  31:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** #include <linux/wireless.h>
  32:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** #include <linux/etherdevice.h>
  33:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** #include <asm/uaccess.h>
  34:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** #include <linux/ctype.h>
  35:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
  36:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** #include <net/ieee80211.h>
  37:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
  38:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** static void ieee80211_monitor_rx(struct ieee80211_device *ieee,
  39:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 					struct sk_buff *skb,
  40:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 					struct ieee80211_rx_stats *rx_stats)
  41:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** {
  14              	.loc 1 41 0
  15 0000 57       	pushl %edi
  16              	.LCFI0:
  17 0001 56       	pushl %esi
  18              	.LCFI1:
  19 0002 53       	pushl %ebx
  20              	.LCFI2:
  21              	.loc 1 41 0
  22 0003 8B5C2414 	movl 20(%esp),%ebx
  42:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	struct ieee80211_hdr *hdr = (struct ieee80211_hdr *)skb->data;
  43:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	u16 fc = le16_to_cpu(hdr->frame_ctl);
GAS LISTING  			page 2


  44:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
  45:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	skb->dev = ieee->dev;
  23              	.loc 1 45 0
  24 0007 8B542410 	movl 16(%esp),%edx
  25              	.loc 1 42 0
  26 000b 8BBBA800 	movl 168(%ebx),%edi
  26      0000
  27              	.loc 1 43 0
  28 0011 0FB707   	movzwl (%edi),%eax
  29              	.loc 1 45 0
  30 0014 8B12     	movl (%edx),%edx
  31 0016 895318   	movl %edx,24(%ebx)
  32              	.LBB2:
  33              	.LBB3:
  34              	.LBB4:
  35              	.file 2 "/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h"
   1:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** /*
   2:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * Merged with mainline ieee80211.h in Aug 2004.  Original ieee802_11
   3:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * remains copyright by the original authors
   4:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  *
   5:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * Portions of the merged code are based on Host AP (software wireless
   6:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * LAN access point) driver for Intersil Prism2/2.5/3.
   7:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  *
   8:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * Copyright (c) 2001-2002, SSH Communications Security Corp and Jouni Malinen
   9:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * <jkmaline@cc.hut.fi>
  10:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * Copyright (c) 2002-2003, Jouni Malinen <jkmaline@cc.hut.fi>
  11:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  *
  12:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * Adaption to a generic IEEE 802.11 stack by James Ketrenos
  13:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * <jketreno@linux.intel.com>
  14:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * Copyright (c) 2004-2005, Intel Corporation
  15:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  *
  16:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * This program is free software; you can redistribute it and/or modify
  17:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * it under the terms of the GNU General Public License version 2 as
  18:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * published by the Free Software Foundation. See README and COPYING for
  19:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * more details.
  20:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  *
  21:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * API Version History
  22:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * 1.0.x -- Initial version
  23:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * 1.1.x -- Added radiotap, QoS, TIM, ieee80211_geo APIs,
  24:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  *          various structure changes, and crypto API init method
  25:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  */
  26:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #ifndef IEEE80211_H
  27:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_H
  28:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #include <linux/if_ether.h>	/* ETH_ALEN */
  29:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #include <linux/kernel.h>	/* ARRAY_SIZE */
  30:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #include <linux/wireless.h>
  31:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
  32:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_VERSION "1.1.12"
  33:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
  34:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_DATA_LEN		2304
  35:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** /* Maximum size for the MA-UNITDATA primitive, 802.11 standard section
  36:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****    6.2.1.1.2.
  37:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
  38:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****    The figure in section 7.1.2 suggests a body size of up to 2312
  39:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****    bytes is allowed, which is a bit confusing, I suspect this
  40:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****    represents the 2304 bytes of real data, plus a possible 8 bytes of
  41:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****    WEP IV and ICV. (this interpretation suggested by Ramiro Barreiro) */
GAS LISTING  			page 3


  42:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
  43:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_1ADDR_LEN 10
  44:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_2ADDR_LEN 16
  45:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_3ADDR_LEN 24
  46:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_4ADDR_LEN 30
  47:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_FCS_LEN    4
  48:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_HLEN			(IEEE80211_4ADDR_LEN)
  49:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_FRAME_LEN		(IEEE80211_DATA_LEN + IEEE80211_HLEN)
  50:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
  51:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define MIN_FRAG_THRESHOLD     256U
  52:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define	MAX_FRAG_THRESHOLD     2346U
  53:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
  54:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** /* Frame control field constants */
  55:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_FCTL_VERS		0x0003
  56:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_FCTL_FTYPE		0x000c
  57:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_FCTL_STYPE		0x00f0
  58:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_FCTL_TODS		0x0100
  59:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_FCTL_FROMDS		0x0200
  60:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_FCTL_MOREFRAGS	0x0400
  61:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_FCTL_RETRY		0x0800
  62:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_FCTL_PM		0x1000
  63:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_FCTL_MOREDATA		0x2000
  64:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_FCTL_PROTECTED	0x4000
  65:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_FCTL_ORDER		0x8000
  66:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
  67:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_FTYPE_MGMT		0x0000
  68:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_FTYPE_CTL		0x0004
  69:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_FTYPE_DATA		0x0008
  70:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
  71:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** /* management */
  72:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_STYPE_ASSOC_REQ	0x0000
  73:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_STYPE_ASSOC_RESP 	0x0010
  74:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_STYPE_REASSOC_REQ	0x0020
  75:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_STYPE_REASSOC_RESP	0x0030
  76:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_STYPE_PROBE_REQ	0x0040
  77:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_STYPE_PROBE_RESP	0x0050
  78:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_STYPE_BEACON		0x0080
  79:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_STYPE_ATIM		0x0090
  80:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_STYPE_DISASSOC	0x00A0
  81:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_STYPE_AUTH		0x00B0
  82:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_STYPE_DEAUTH		0x00C0
  83:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_STYPE_ACTION		0x00D0
  84:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
  85:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** /* control */
  86:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_STYPE_PSPOLL		0x00A0
  87:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_STYPE_RTS		0x00B0
  88:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_STYPE_CTS		0x00C0
  89:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_STYPE_ACK		0x00D0
  90:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_STYPE_CFEND		0x00E0
  91:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_STYPE_CFENDACK	0x00F0
  92:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
  93:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** /* data */
  94:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_STYPE_DATA		0x0000
  95:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_STYPE_DATA_CFACK	0x0010
  96:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_STYPE_DATA_CFPOLL	0x0020
  97:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_STYPE_DATA_CFACKPOLL	0x0030
  98:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_STYPE_NULLFUNC	0x0040
GAS LISTING  			page 4


  99:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_STYPE_CFACK		0x0050
 100:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_STYPE_CFPOLL		0x0060
 101:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_STYPE_CFACKPOLL	0x0070
 102:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_STYPE_QOS_DATA        0x0080
 103:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 104:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_SCTL_FRAG		0x000F
 105:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_SCTL_SEQ		0xFFF0
 106:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 107:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** /* debug macros */
 108:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 109:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #ifdef CONFIG_IEEE80211_DEBUG
 110:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** extern u32 ieee80211_debug_level;
 111:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_DEBUG(level, fmt, args...) \
 112:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** do { if (ieee80211_debug_level & (level)) \
 113:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****   printk(KERN_DEBUG "ieee80211: %c %s " fmt, \
 114:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****          in_interrupt() ? 'I' : 'U', __FUNCTION__ , ## args); } while (0)
 115:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #else
 116:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_DEBUG(level, fmt, args...) do {} while (0)
 117:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #endif				/* CONFIG_IEEE80211_DEBUG */
 118:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 119:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** /* debug macros not dependent on CONFIG_IEEE80211_DEBUG */
 120:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 121:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define MAC_FMT "%02x:%02x:%02x:%02x:%02x:%02x"
 122:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define MAC_ARG(x) ((u8*)(x))[0],((u8*)(x))[1],((u8*)(x))[2],((u8*)(x))[3],((u8*)(x))[4],((u8*)(x))
 123:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 124:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** /* compatibility macros */
 125:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #if WIRELESS_EXT < 17
 126:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IW_QUAL_QUAL_UPDATED    0x01    /* Value was updated since last read */
 127:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IW_QUAL_LEVEL_UPDATED   0x02
 128:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IW_QUAL_NOISE_UPDATED   0x04
 129:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IW_QUAL_ALL_UPDATED     0x07
 130:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IW_QUAL_QUAL_INVALID    0x10    /* Driver doesn't provide value */
 131:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IW_QUAL_LEVEL_INVALID   0x20
 132:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IW_QUAL_NOISE_INVALID   0x40
 133:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IW_QUAL_ALL_INVALID     0x70
 134:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #endif
 135:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 136:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #if WIRELESS_EXT < 19
 137:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IW_QUAL_DBM             0x08    /* Level + Noise are dBm */
 138:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #endif
 139:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 140:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #ifndef __bitwise /* if __leXX is not defined */
 141:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** typedef __u16 __le16;
 142:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** typedef __u64 __le64;
 143:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #endif
 144:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 145:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #ifndef DEFINE_SPINLOCK
 146:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define DEFINE_SPINLOCK(s)              spinlock_t s = SPIN_LOCK_UNLOCKED
 147:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #endif
 148:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 149:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** /* escape_essid() is intended to be used in debug (and possibly error)
 150:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * messages. It should never be used for passing essid to user space. */
 151:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** const char *escape_essid(const char *essid, u8 essid_len);
 152:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 153:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** /*
 154:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * To use the debug system:
 155:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  *
GAS LISTING  			page 5


 156:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * If you are defining a new debug classification, simply add it to the #define
 157:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * list here in the form of:
 158:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  *
 159:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * #define IEEE80211_DL_xxxx VALUE
 160:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  *
 161:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * shifting value to the left one bit from the previous entry.  xxxx should be
 162:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * the name of the classification (for example, WEP)
 163:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  *
 164:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * You then need to either add a IEEE80211_xxxx_DEBUG() macro definition for your
 165:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * classification, or use IEEE80211_DEBUG(IEEE80211_DL_xxxx, ...) whenever you want
 166:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * to send output to that classification.
 167:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  *
 168:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * To add your debug level to the list of levels seen when you perform
 169:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  *
 170:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * % cat /proc/net/ieee80211/debug_level
 171:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  *
 172:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * you simply need to add your entry to the ieee80211_debug_level array.
 173:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  *
 174:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * If you do not see debug_level in /proc/net/ieee80211 then you do not have
 175:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * CONFIG_IEEE80211_DEBUG defined in your kernel configuration
 176:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  *
 177:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  */
 178:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 179:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_DL_INFO          (1<<0)
 180:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_DL_WX            (1<<1)
 181:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_DL_SCAN          (1<<2)
 182:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_DL_STATE         (1<<3)
 183:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_DL_MGMT          (1<<4)
 184:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_DL_FRAG          (1<<5)
 185:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_DL_DROP          (1<<7)
 186:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 187:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_DL_TX            (1<<8)
 188:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_DL_RX            (1<<9)
 189:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_DL_QOS           (1<<31)
 190:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 191:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_ERROR(f, a...) printk(KERN_ERR "ieee80211: " f, ## a)
 192:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_WARNING(f, a...) printk(KERN_WARNING "ieee80211: " f, ## a)
 193:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_DEBUG_INFO(f, a...)   IEEE80211_DEBUG(IEEE80211_DL_INFO, f, ## a)
 194:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 195:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_DEBUG_WX(f, a...)     IEEE80211_DEBUG(IEEE80211_DL_WX, f, ## a)
 196:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_DEBUG_SCAN(f, a...)   IEEE80211_DEBUG(IEEE80211_DL_SCAN, f, ## a)
 197:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_DEBUG_STATE(f, a...)  IEEE80211_DEBUG(IEEE80211_DL_STATE, f, ## a)
 198:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_DEBUG_MGMT(f, a...)  IEEE80211_DEBUG(IEEE80211_DL_MGMT, f, ## a)
 199:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_DEBUG_FRAG(f, a...)  IEEE80211_DEBUG(IEEE80211_DL_FRAG, f, ## a)
 200:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_DEBUG_DROP(f, a...)  IEEE80211_DEBUG(IEEE80211_DL_DROP, f, ## a)
 201:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_DEBUG_TX(f, a...)  IEEE80211_DEBUG(IEEE80211_DL_TX, f, ## a)
 202:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_DEBUG_RX(f, a...)  IEEE80211_DEBUG(IEEE80211_DL_RX, f, ## a)
 203:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_DEBUG_QOS(f, a...)  IEEE80211_DEBUG(IEEE80211_DL_QOS, f, ## a)
 204:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #include <linux/netdevice.h>
 205:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #include <linux/wireless.h>
 206:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #include <linux/if_arp.h>	/* ARPHRD_ETHER */
 207:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 208:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #ifndef WIRELESS_SPY
 209:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define WIRELESS_SPY		/* enable iwspy support */
 210:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #endif
 211:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #include <net/iw_handler.h>	/* new driver API */
 212:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
GAS LISTING  			page 6


 213:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #ifndef ETH_P_PAE
 214:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define ETH_P_PAE 0x888E	/* Port Access Entity (IEEE 802.1X) */
 215:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #endif				/* ETH_P_PAE */
 216:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 217:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define ETH_P_PREAUTH 0x88C7	/* IEEE 802.11i pre-authentication */
 218:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 219:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #ifndef ETH_P_80211_RAW
 220:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define ETH_P_80211_RAW (ETH_P_ECONET + 1)
 221:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #endif
 222:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 223:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** /* IEEE 802.11 defines */
 224:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 225:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define P80211_OUI_LEN 3
 226:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 227:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_snap_hdr {
 228:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 229:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 dsap;		/* always 0xAA */
 230:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 ssap;		/* always 0xAA */
 231:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 ctrl;		/* always 0x03 */
 232:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 oui[P80211_OUI_LEN];	/* organizational universal id */
 233:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 234:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** } __attribute__ ((packed));
 235:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 236:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define SNAP_SIZE sizeof(struct ieee80211_snap_hdr)
 237:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 238:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define WLAN_FC_GET_VERS(fc) ((fc) & IEEE80211_FCTL_VERS)
 239:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define WLAN_FC_GET_TYPE(fc) ((fc) & IEEE80211_FCTL_FTYPE)
 240:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define WLAN_FC_GET_STYPE(fc) ((fc) & IEEE80211_FCTL_STYPE)
 241:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 242:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define WLAN_GET_SEQ_FRAG(seq) ((seq) & IEEE80211_SCTL_FRAG)
 243:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define WLAN_GET_SEQ_SEQ(seq)  ((seq) & IEEE80211_SCTL_SEQ)
 244:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 245:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** /* Authentication algorithms */
 246:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define WLAN_AUTH_OPEN 0
 247:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define WLAN_AUTH_SHARED_KEY 1
 248:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define WLAN_AUTH_LEAP 2
 249:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 250:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define WLAN_AUTH_CHALLENGE_LEN 128
 251:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 252:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define WLAN_CAPABILITY_ESS (1<<0)
 253:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define WLAN_CAPABILITY_IBSS (1<<1)
 254:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define WLAN_CAPABILITY_CF_POLLABLE (1<<2)
 255:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define WLAN_CAPABILITY_CF_POLL_REQUEST (1<<3)
 256:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define WLAN_CAPABILITY_PRIVACY (1<<4)
 257:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define WLAN_CAPABILITY_SHORT_PREAMBLE (1<<5)
 258:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define WLAN_CAPABILITY_PBCC (1<<6)
 259:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define WLAN_CAPABILITY_CHANNEL_AGILITY (1<<7)
 260:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define WLAN_CAPABILITY_SPECTRUM_MGMT (1<<8)
 261:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define WLAN_CAPABILITY_QOS (1<<9)
 262:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define WLAN_CAPABILITY_SHORT_SLOT_TIME (1<<10)
 263:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define WLAN_CAPABILITY_DSSS_OFDM (1<<13)
 264:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 265:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** /* Status codes */
 266:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** enum ieee80211_statuscode {
 267:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_STATUS_SUCCESS = 0,
 268:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_STATUS_UNSPECIFIED_FAILURE = 1,
 269:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_STATUS_CAPS_UNSUPPORTED = 10,
GAS LISTING  			page 7


 270:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_STATUS_REASSOC_NO_ASSOC = 11,
 271:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_STATUS_ASSOC_DENIED_UNSPEC = 12,
 272:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_STATUS_NOT_SUPPORTED_AUTH_ALG = 13,
 273:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_STATUS_UNKNOWN_AUTH_TRANSACTION = 14,
 274:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_STATUS_CHALLENGE_FAIL = 15,
 275:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_STATUS_AUTH_TIMEOUT = 16,
 276:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_STATUS_AP_UNABLE_TO_HANDLE_NEW_STA = 17,
 277:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_STATUS_ASSOC_DENIED_RATES = 18,
 278:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* 802.11b */
 279:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_STATUS_ASSOC_DENIED_NOSHORTPREAMBLE = 19,
 280:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_STATUS_ASSOC_DENIED_NOPBCC = 20,
 281:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_STATUS_ASSOC_DENIED_NOAGILITY = 21,
 282:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* 802.11h */
 283:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_STATUS_ASSOC_DENIED_NOSPECTRUM = 22,
 284:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_STATUS_ASSOC_REJECTED_BAD_POWER = 23,
 285:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_STATUS_ASSOC_REJECTED_BAD_SUPP_CHAN = 24,
 286:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* 802.11g */
 287:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_STATUS_ASSOC_DENIED_NOSHORTTIME = 25,
 288:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_STATUS_ASSOC_DENIED_NODSSSOFDM = 26,
 289:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* 802.11i */
 290:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_STATUS_INVALID_IE = 40,
 291:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_STATUS_INVALID_GROUP_CIPHER = 41,
 292:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_STATUS_INVALID_PAIRWISE_CIPHER = 42,
 293:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_STATUS_INVALID_AKMP = 43,
 294:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_STATUS_UNSUPP_RSN_VERSION = 44,
 295:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_STATUS_INVALID_RSN_IE_CAP = 45,
 296:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_STATUS_CIPHER_SUITE_REJECTED = 46,
 297:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** };
 298:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 299:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** /* Reason codes */
 300:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** enum ieee80211_reasoncode {
 301:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_REASON_UNSPECIFIED = 1,
 302:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_REASON_PREV_AUTH_NOT_VALID = 2,
 303:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_REASON_DEAUTH_LEAVING = 3,
 304:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_REASON_DISASSOC_DUE_TO_INACTIVITY = 4,
 305:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_REASON_DISASSOC_AP_BUSY = 5,
 306:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_REASON_CLASS2_FRAME_FROM_NONAUTH_STA = 6,
 307:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_REASON_CLASS3_FRAME_FROM_NONASSOC_STA = 7,
 308:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_REASON_DISASSOC_STA_HAS_LEFT = 8,
 309:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_REASON_STA_REQ_ASSOC_WITHOUT_AUTH = 9,
 310:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* 802.11h */
 311:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_REASON_DISASSOC_BAD_POWER = 10,
 312:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_REASON_DISASSOC_BAD_SUPP_CHAN = 11,
 313:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* 802.11i */
 314:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_REASON_INVALID_IE = 13,
 315:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_REASON_MIC_FAILURE = 14,
 316:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_REASON_4WAY_HANDSHAKE_TIMEOUT = 15,
 317:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_REASON_GROUP_KEY_HANDSHAKE_TIMEOUT = 16,
 318:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_REASON_IE_DIFFERENT = 17,
 319:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_REASON_INVALID_GROUP_CIPHER = 18,
 320:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_REASON_INVALID_PAIRWISE_CIPHER = 19,
 321:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_REASON_INVALID_AKMP = 20,
 322:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_REASON_UNSUPP_RSN_VERSION = 21,
 323:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_REASON_INVALID_RSN_IE_CAP = 22,
 324:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_REASON_IEEE8021X_FAILED = 23,
 325:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_REASON_CIPHER_SUITE_REJECTED = 24,
 326:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** };
GAS LISTING  			page 8


 327:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 328:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** /* Action categories - 802.11h */
 329:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** enum ieee80211_actioncategories {
 330:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_ACTION_SPECTRUM_MGMT = 0,
 331:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* Reserved 1-127  */
 332:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* Error    128-255 */
 333:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** };
 334:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 335:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** /* Action details - 802.11h */
 336:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** enum ieee80211_actiondetails {
 337:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_ACTION_CATEGORY_MEASURE_REQUEST = 0,
 338:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_ACTION_CATEGORY_MEASURE_REPORT = 1,
 339:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_ACTION_CATEGORY_TPC_REQUEST = 2,
 340:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_ACTION_CATEGORY_TPC_REPORT = 3,
 341:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_ACTION_CATEGORY_CHANNEL_SWITCH = 4,
 342:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* 5 - 255 Reserved */
 343:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** };
 344:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 345:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_STATMASK_SIGNAL (1<<0)
 346:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_STATMASK_RSSI (1<<1)
 347:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_STATMASK_NOISE (1<<2)
 348:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_STATMASK_RATE (1<<3)
 349:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_STATMASK_WEMASK 0x7
 350:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 351:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_CCK_MODULATION    (1<<0)
 352:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_OFDM_MODULATION   (1<<1)
 353:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 354:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_24GHZ_BAND     (1<<0)
 355:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_52GHZ_BAND     (1<<1)
 356:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 357:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_CCK_RATE_1MB		        0x02
 358:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_CCK_RATE_2MB		        0x04
 359:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_CCK_RATE_5MB		        0x0B
 360:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_CCK_RATE_11MB		        0x16
 361:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_OFDM_RATE_6MB		        0x0C
 362:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_OFDM_RATE_9MB		        0x12
 363:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_OFDM_RATE_12MB		0x18
 364:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_OFDM_RATE_18MB		0x24
 365:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_OFDM_RATE_24MB		0x30
 366:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_OFDM_RATE_36MB		0x48
 367:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_OFDM_RATE_48MB		0x60
 368:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_OFDM_RATE_54MB		0x6C
 369:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_BASIC_RATE_MASK		0x80
 370:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 371:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_CCK_RATE_1MB_MASK		(1<<0)
 372:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_CCK_RATE_2MB_MASK		(1<<1)
 373:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_CCK_RATE_5MB_MASK		(1<<2)
 374:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_CCK_RATE_11MB_MASK		(1<<3)
 375:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_OFDM_RATE_6MB_MASK		(1<<4)
 376:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_OFDM_RATE_9MB_MASK		(1<<5)
 377:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_OFDM_RATE_12MB_MASK		(1<<6)
 378:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_OFDM_RATE_18MB_MASK		(1<<7)
 379:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_OFDM_RATE_24MB_MASK		(1<<8)
 380:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_OFDM_RATE_36MB_MASK		(1<<9)
 381:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_OFDM_RATE_48MB_MASK		(1<<10)
 382:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_OFDM_RATE_54MB_MASK		(1<<11)
 383:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
GAS LISTING  			page 9


 384:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_CCK_RATES_MASK	        0x0000000F
 385:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_CCK_BASIC_RATES_MASK	(IEEE80211_CCK_RATE_1MB_MASK | \
 386:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	IEEE80211_CCK_RATE_2MB_MASK)
 387:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_CCK_DEFAULT_RATES_MASK	(IEEE80211_CCK_BASIC_RATES_MASK | \
 388:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****         IEEE80211_CCK_RATE_5MB_MASK | \
 389:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****         IEEE80211_CCK_RATE_11MB_MASK)
 390:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 391:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_OFDM_RATES_MASK		0x00000FF0
 392:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_OFDM_BASIC_RATES_MASK	(IEEE80211_OFDM_RATE_6MB_MASK | \
 393:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	IEEE80211_OFDM_RATE_12MB_MASK | \
 394:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	IEEE80211_OFDM_RATE_24MB_MASK)
 395:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_OFDM_DEFAULT_RATES_MASK	(IEEE80211_OFDM_BASIC_RATES_MASK | \
 396:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	IEEE80211_OFDM_RATE_9MB_MASK  | \
 397:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	IEEE80211_OFDM_RATE_18MB_MASK | \
 398:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	IEEE80211_OFDM_RATE_36MB_MASK | \
 399:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	IEEE80211_OFDM_RATE_48MB_MASK | \
 400:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	IEEE80211_OFDM_RATE_54MB_MASK)
 401:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_DEFAULT_RATES_MASK (IEEE80211_OFDM_DEFAULT_RATES_MASK | \
 402:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****                                 IEEE80211_CCK_DEFAULT_RATES_MASK)
 403:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 404:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_NUM_OFDM_RATES	    8
 405:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_NUM_CCK_RATES	            4
 406:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_OFDM_SHIFT_MASK_A         4
 407:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 408:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** /* NOTE: This data is for statistical purposes; not all hardware provides this
 409:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  *       information for frames received.
 410:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  *       For ieee80211_rx_mgt, you need to set at least the 'len' parameter.
 411:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  */
 412:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_rx_stats {
 413:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u32 mac_time;
 414:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	s8 rssi;
 415:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 signal;
 416:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 noise;
 417:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u16 rate;		/* in 100 kbps */
 418:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 received_channel;
 419:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 control;
 420:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 mask;
 421:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 freq;
 422:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u16 len;
 423:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u64 tsf;
 424:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u32 beacon_time;
 425:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** };
 426:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 427:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** /* IEEE 802.11 requires that STA supports concurrent reception of at least
 428:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * three fragmented frames. This define can be increased to support more
 429:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * concurrent frames, but it should be noted that each entry can consume about
 430:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * 2 kB of RAM and increasing cache size will slow down frame reassembly. */
 431:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_FRAG_CACHE_LEN 4
 432:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 433:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_frag_entry {
 434:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	unsigned long first_frag_time;
 435:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	unsigned int seq;
 436:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	unsigned int last_frag;
 437:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct sk_buff *skb;
 438:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 src_addr[ETH_ALEN];
 439:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 dst_addr[ETH_ALEN];
 440:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** };
GAS LISTING  			page 10


 441:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 442:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_stats {
 443:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	unsigned int tx_unicast_frames;
 444:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	unsigned int tx_multicast_frames;
 445:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	unsigned int tx_fragments;
 446:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	unsigned int tx_unicast_octets;
 447:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	unsigned int tx_multicast_octets;
 448:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	unsigned int tx_deferred_transmissions;
 449:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	unsigned int tx_single_retry_frames;
 450:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	unsigned int tx_multiple_retry_frames;
 451:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	unsigned int tx_retry_limit_exceeded;
 452:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	unsigned int tx_discards;
 453:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	unsigned int rx_unicast_frames;
 454:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	unsigned int rx_multicast_frames;
 455:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	unsigned int rx_fragments;
 456:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	unsigned int rx_unicast_octets;
 457:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	unsigned int rx_multicast_octets;
 458:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	unsigned int rx_fcs_errors;
 459:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	unsigned int rx_discards_no_buffer;
 460:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	unsigned int tx_discards_wrong_sa;
 461:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	unsigned int rx_discards_undecryptable;
 462:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	unsigned int rx_message_in_msg_fragments;
 463:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	unsigned int rx_message_in_bad_msg_fragments;
 464:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** };
 465:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 466:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_device;
 467:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 468:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #include "ieee80211_crypt.h"
 469:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 470:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define SEC_KEY_1		(1<<0)
 471:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define SEC_KEY_2		(1<<1)
 472:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define SEC_KEY_3		(1<<2)
 473:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define SEC_KEY_4		(1<<3)
 474:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define SEC_ACTIVE_KEY		(1<<4)
 475:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define SEC_AUTH_MODE		(1<<5)
 476:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define SEC_UNICAST_GROUP	(1<<6)
 477:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define SEC_LEVEL		(1<<7)
 478:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define SEC_ENABLED		(1<<8)
 479:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define SEC_ENCRYPT		(1<<9)
 480:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 481:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define SEC_LEVEL_0		0	/* None */
 482:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define SEC_LEVEL_1		1	/* WEP 40 and 104 bit */
 483:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define SEC_LEVEL_2		2	/* Level 1 + TKIP */
 484:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define SEC_LEVEL_2_CKIP	3	/* Level 1 + CKIP */
 485:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define SEC_LEVEL_3		4	/* Level 2 + CCMP */
 486:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 487:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define SEC_ALG_NONE		0
 488:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define SEC_ALG_WEP		1
 489:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define SEC_ALG_TKIP		2
 490:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define SEC_ALG_CCMP		3
 491:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 492:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define WEP_KEYS		4
 493:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define WEP_KEY_LEN		13
 494:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define SCM_KEY_LEN		32
 495:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define SCM_TEMPORAL_KEY_LENGTH	16
 496:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 497:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_security {
GAS LISTING  			page 11


 498:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u16 active_key:2,
 499:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	    enabled:1,
 500:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	    auth_mode:2, auth_algo:4, unicast_uses_group:1, encrypt:1;
 501:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 encode_alg[WEP_KEYS];
 502:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 key_sizes[WEP_KEYS];
 503:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 keys[WEP_KEYS][SCM_KEY_LEN];
 504:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 level;
 505:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u16 flags;
 506:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** } __attribute__ ((packed));
 507:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 508:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** /*
 509:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 510:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  802.11 data frame from AP
 511:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 512:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****       ,-------------------------------------------------------------------.
 513:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** Bytes |  2   |  2   |    6    |    6    |    6    |  2   | 0..2312 |   4  |
 514:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****       |------|------|---------|---------|---------|------|---------|------|
 515:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** Desc. | ctrl | dura |  DA/RA  |   TA    |    SA   | Sequ |  frame  |  fcs |
 516:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****       |      | tion | (BSSID) |         |         | ence |  data   |      |
 517:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****       `-------------------------------------------------------------------'
 518:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 519:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** Total: 28-2340 bytes
 520:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 521:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** */
 522:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 523:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define BEACON_PROBE_SSID_ID_POSITION 12
 524:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 525:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** /* Management Frame Information Element Types */
 526:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** enum ieee80211_mfie {
 527:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	MFIE_TYPE_SSID = 0,
 528:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	MFIE_TYPE_RATES = 1,
 529:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	MFIE_TYPE_FH_SET = 2,
 530:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	MFIE_TYPE_DS_SET = 3,
 531:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	MFIE_TYPE_CF_SET = 4,
 532:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	MFIE_TYPE_TIM = 5,
 533:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	MFIE_TYPE_IBSS_SET = 6,
 534:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	MFIE_TYPE_COUNTRY = 7,
 535:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	MFIE_TYPE_HOP_PARAMS = 8,
 536:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	MFIE_TYPE_HOP_TABLE = 9,
 537:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	MFIE_TYPE_REQUEST = 10,
 538:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	MFIE_TYPE_CHALLENGE = 16,
 539:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	MFIE_TYPE_POWER_CONSTRAINT = 32,
 540:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	MFIE_TYPE_POWER_CAPABILITY = 33,
 541:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	MFIE_TYPE_TPC_REQUEST = 34,
 542:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	MFIE_TYPE_TPC_REPORT = 35,
 543:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	MFIE_TYPE_SUPP_CHANNELS = 36,
 544:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	MFIE_TYPE_CSA = 37,
 545:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	MFIE_TYPE_MEASURE_REQUEST = 38,
 546:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	MFIE_TYPE_MEASURE_REPORT = 39,
 547:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	MFIE_TYPE_QUIET = 40,
 548:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	MFIE_TYPE_IBSS_DFS = 41,
 549:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	MFIE_TYPE_ERP_INFO = 42,
 550:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	MFIE_TYPE_RSN = 48,
 551:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	MFIE_TYPE_RATES_EX = 50,
 552:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	MFIE_TYPE_GENERIC = 221,
 553:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	MFIE_TYPE_QOS_PARAMETER = 222,
 554:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** };
GAS LISTING  			page 12


 555:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 556:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** /* Minimal header; can be used for passing 802.11 frames with sufficient
 557:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * information to determine what type of underlying data type is actually
 558:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * stored in the data. */
 559:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_hdr {
 560:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 frame_ctl;
 561:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 duration_id;
 562:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 payload[0];
 563:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** } __attribute__ ((packed));
 564:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 565:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_hdr_1addr {
 566:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 frame_ctl;
 567:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 duration_id;
 568:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 addr1[ETH_ALEN];
 569:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 payload[0];
 570:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** } __attribute__ ((packed));
 571:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 572:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_hdr_2addr {
 573:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 frame_ctl;
 574:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 duration_id;
 575:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 addr1[ETH_ALEN];
 576:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 addr2[ETH_ALEN];
 577:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 payload[0];
 578:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** } __attribute__ ((packed));
 579:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 580:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_hdr_3addr {
 581:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 frame_ctl;
 582:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 duration_id;
 583:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 addr1[ETH_ALEN];
 584:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 addr2[ETH_ALEN];
 585:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 addr3[ETH_ALEN];
 586:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 seq_ctl;
 587:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 payload[0];
 588:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** } __attribute__ ((packed));
 589:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 590:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_hdr_4addr {
 591:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 frame_ctl;
 592:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 duration_id;
 593:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 addr1[ETH_ALEN];
 594:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 addr2[ETH_ALEN];
 595:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 addr3[ETH_ALEN];
 596:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 seq_ctl;
 597:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 addr4[ETH_ALEN];
 598:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 payload[0];
 599:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** } __attribute__ ((packed));
 600:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 601:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_hdr_3addrqos {
 602:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 frame_ctl;
 603:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 duration_id;
 604:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 addr1[ETH_ALEN];
 605:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 addr2[ETH_ALEN];
 606:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 addr3[ETH_ALEN];
 607:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 seq_ctl;
 608:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 payload[0];
 609:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 qos_ctl;
 610:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** } __attribute__ ((packed));
 611:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
GAS LISTING  			page 13


 612:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_hdr_4addrqos {
 613:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 frame_ctl;
 614:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 duration_id;
 615:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 addr1[ETH_ALEN];
 616:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 addr2[ETH_ALEN];
 617:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 addr3[ETH_ALEN];
 618:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 seq_ctl;
 619:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 addr4[ETH_ALEN];
 620:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 payload[0];
 621:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 qos_ctl;
 622:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** } __attribute__ ((packed));
 623:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 624:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_info_element {
 625:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 id;
 626:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 len;
 627:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 data[0];
 628:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** } __attribute__ ((packed));
 629:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 630:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** /*
 631:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * These are the data types that can make up management packets
 632:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  *
 633:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u16 auth_algorithm;
 634:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u16 auth_sequence;
 635:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u16 beacon_interval;
 636:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u16 capability;
 637:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 current_ap[ETH_ALEN];
 638:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u16 listen_interval;
 639:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct {
 640:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 		u16 association_id:14, reserved:2;
 641:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	} __attribute__ ((packed));
 642:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u32 time_stamp[2];
 643:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u16 reason;
 644:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u16 status;
 645:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** */
 646:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 647:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_auth {
 648:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_hdr_3addr header;
 649:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 algorithm;
 650:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 transaction;
 651:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 status;
 652:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* challenge */
 653:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_info_element info_element[0];
 654:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** } __attribute__ ((packed));
 655:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 656:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_channel_switch {
 657:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 id;
 658:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 len;
 659:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 mode;
 660:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 channel;
 661:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 count;
 662:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** } __attribute__ ((packed));
 663:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 664:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_action {
 665:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_hdr_3addr header;
 666:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 category;
 667:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 action;
 668:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	union {
GAS LISTING  			page 14


 669:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 		struct ieee80211_action_exchange {
 670:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 			u8 token;
 671:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 			struct ieee80211_info_element info_element[0];
 672:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 		} exchange;
 673:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 		struct ieee80211_channel_switch channel_switch;
 674:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 675:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	} format;
 676:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** } __attribute__ ((packed));
 677:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 678:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_disassoc {
 679:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_hdr_3addr header;
 680:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 reason;
 681:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** } __attribute__ ((packed));
 682:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 683:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** /* Alias deauth for disassoc */
 684:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define ieee80211_deauth ieee80211_disassoc
 685:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 686:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_probe_request {
 687:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_hdr_3addr header;
 688:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* SSID, supported rates */
 689:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_info_element info_element[0];
 690:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** } __attribute__ ((packed));
 691:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 692:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_probe_response {
 693:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_hdr_3addr header;
 694:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u32 time_stamp[2];
 695:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 beacon_interval;
 696:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 capability;
 697:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* SSID, supported rates, FH params, DS params,
 698:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	 * CF params, IBSS params, TIM (if beacon), RSN */
 699:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_info_element info_element[0];
 700:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** } __attribute__ ((packed));
 701:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 702:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** /* Alias beacon for probe_response */
 703:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define ieee80211_beacon ieee80211_probe_response
 704:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 705:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_assoc_request {
 706:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_hdr_3addr header;
 707:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 capability;
 708:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 listen_interval;
 709:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* SSID, supported rates, RSN */
 710:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_info_element info_element[0];
 711:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** } __attribute__ ((packed));
 712:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 713:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_reassoc_request {
 714:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_hdr_3addr header;
 715:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 capability;
 716:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 listen_interval;
 717:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 current_ap[ETH_ALEN];
 718:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_info_element info_element[0];
 719:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** } __attribute__ ((packed));
 720:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 721:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_assoc_response {
 722:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_hdr_3addr header;
 723:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 capability;
 724:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 status;
 725:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 aid;
GAS LISTING  			page 15


 726:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* supported rates */
 727:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_info_element info_element[0];
 728:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** } __attribute__ ((packed));
 729:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 730:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_txb {
 731:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 nr_frags;
 732:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 encrypted;
 733:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 rts_included;
 734:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 reserved;
 735:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 frag_size;
 736:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 payload_size;
 737:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct sk_buff *fragments[0];
 738:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** };
 739:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 740:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** /* SWEEP TABLE ENTRIES NUMBER */
 741:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define MAX_SWEEP_TAB_ENTRIES		  42
 742:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define MAX_SWEEP_TAB_ENTRIES_PER_PACKET  7
 743:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** /* MAX_RATES_LENGTH needs to be 12.  The spec says 8, and many APs
 744:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * only use 8, and then use extended rates for the remaining supported
 745:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * rates.  Other APs, however, stick all of their supported rates on the
 746:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * main rates information element... */
 747:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define MAX_RATES_LENGTH                  ((u8)12)
 748:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define MAX_RATES_EX_LENGTH               ((u8)16)
 749:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define MAX_NETWORK_COUNT                  128
 750:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 751:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define CRC_LENGTH                 4U
 752:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 753:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define MAX_WPA_IE_LEN 64
 754:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 755:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define NETWORK_EMPTY_ESSID    (1<<0)
 756:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define NETWORK_HAS_OFDM       (1<<1)
 757:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define NETWORK_HAS_CCK        (1<<2)
 758:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 759:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** /* QoS structure */
 760:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define NETWORK_HAS_QOS_PARAMETERS      (1<<3)
 761:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define NETWORK_HAS_QOS_INFORMATION     (1<<4)
 762:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define NETWORK_HAS_QOS_MASK            (NETWORK_HAS_QOS_PARAMETERS | \
 763:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 					 NETWORK_HAS_QOS_INFORMATION)
 764:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 765:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** /* 802.11h */
 766:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define NETWORK_HAS_POWER_CONSTRAINT    (1<<5)
 767:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define NETWORK_HAS_CSA                 (1<<6)
 768:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define NETWORK_HAS_QUIET               (1<<7)
 769:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define NETWORK_HAS_IBSS_DFS            (1<<8)
 770:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define NETWORK_HAS_TPC_REPORT          (1<<9)
 771:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 772:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define QOS_QUEUE_NUM                   4
 773:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define QOS_OUI_LEN                     3
 774:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define QOS_OUI_TYPE                    2
 775:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define QOS_ELEMENT_ID                  221
 776:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define QOS_OUI_INFO_SUB_TYPE           0
 777:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define QOS_OUI_PARAM_SUB_TYPE          1
 778:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define QOS_VERSION_1                   1
 779:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define QOS_AIFSN_MIN_VALUE             2
 780:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 781:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_qos_information_element {
 782:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 elementID;
GAS LISTING  			page 16


 783:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 length;
 784:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 qui[QOS_OUI_LEN];
 785:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 qui_type;
 786:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 qui_subtype;
 787:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 version;
 788:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 ac_info;
 789:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** } __attribute__ ((packed));
 790:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 791:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_qos_ac_parameter {
 792:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 aci_aifsn;
 793:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 ecw_min_max;
 794:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 tx_op_limit;
 795:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** } __attribute__ ((packed));
 796:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 797:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_qos_parameter_info {
 798:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_qos_information_element info_element;
 799:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 reserved;
 800:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_qos_ac_parameter ac_params_record[QOS_QUEUE_NUM];
 801:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** } __attribute__ ((packed));
 802:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 803:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_qos_parameters {
 804:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 cw_min[QOS_QUEUE_NUM];
 805:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 cw_max[QOS_QUEUE_NUM];
 806:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 aifs[QOS_QUEUE_NUM];
 807:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 flag[QOS_QUEUE_NUM];
 808:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 tx_op_limit[QOS_QUEUE_NUM];
 809:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** } __attribute__ ((packed));
 810:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 811:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_qos_data {
 812:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_qos_parameters parameters;
 813:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int active;
 814:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int supported;
 815:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 param_count;
 816:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 old_param_count;
 817:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** };
 818:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 819:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_tim_parameters {
 820:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 tim_count;
 821:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 tim_period;
 822:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** } __attribute__ ((packed));
 823:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 824:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** /*******************************************************/
 825:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 826:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** enum {				/* ieee80211_basic_report.map */
 827:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	IEEE80211_BASIC_MAP_BSS = (1 << 0),
 828:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	IEEE80211_BASIC_MAP_OFDM = (1 << 1),
 829:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	IEEE80211_BASIC_MAP_UNIDENTIFIED = (1 << 2),
 830:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	IEEE80211_BASIC_MAP_RADAR = (1 << 3),
 831:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	IEEE80211_BASIC_MAP_UNMEASURED = (1 << 4),
 832:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* Bits 5-7 are reserved */
 833:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 834:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** };
 835:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_basic_report {
 836:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 channel;
 837:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le64 start_time;
 838:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 duration;
 839:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 map;
GAS LISTING  			page 17


 840:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** } __attribute__ ((packed));
 841:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 842:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** enum {				/* ieee80211_measurement_request.mode */
 843:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* Bit 0 is reserved */
 844:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	IEEE80211_MEASUREMENT_ENABLE = (1 << 1),
 845:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	IEEE80211_MEASUREMENT_REQUEST = (1 << 2),
 846:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	IEEE80211_MEASUREMENT_REPORT = (1 << 3),
 847:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* Bits 4-7 are reserved */
 848:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** };
 849:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 850:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** enum {
 851:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	IEEE80211_REPORT_BASIC = 0,	/* required */
 852:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	IEEE80211_REPORT_CCA = 1,	/* optional */
 853:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	IEEE80211_REPORT_RPI = 2,	/* optional */
 854:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* 3-255 reserved */
 855:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** };
 856:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 857:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_measurement_params {
 858:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 channel;
 859:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le64 start_time;
 860:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 duration;
 861:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** } __attribute__ ((packed));
 862:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 863:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_measurement_request {
 864:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_info_element ie;
 865:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 token;
 866:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 mode;
 867:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 type;
 868:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_measurement_params params[0];
 869:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** } __attribute__ ((packed));
 870:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 871:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_measurement_report {
 872:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_info_element ie;
 873:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 token;
 874:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 mode;
 875:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 type;
 876:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	union {
 877:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 		struct ieee80211_basic_report basic[0];
 878:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	} u;
 879:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** } __attribute__ ((packed));
 880:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 881:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_tpc_report {
 882:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 transmit_power;
 883:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 link_margin;
 884:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** } __attribute__ ((packed));
 885:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 886:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_channel_map {
 887:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 channel;
 888:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 map;
 889:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** } __attribute__ ((packed));
 890:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 891:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_ibss_dfs {
 892:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_info_element ie;
 893:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 owner[ETH_ALEN];
 894:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 recovery_interval;
 895:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_channel_map channel_map[0];
 896:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** };
GAS LISTING  			page 18


 897:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 898:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_csa {
 899:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 mode;
 900:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 channel;
 901:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 count;
 902:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** } __attribute__ ((packed));
 903:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 904:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_quiet {
 905:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 count;
 906:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 period;
 907:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 duration;
 908:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 offset;
 909:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** } __attribute__ ((packed));
 910:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 911:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_network {
 912:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* These entries are used to identify a unique network */
 913:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 bssid[ETH_ALEN];
 914:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 channel;
 915:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* Ensure null-terminated for any debug msgs */
 916:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 ssid[IW_ESSID_MAX_SIZE + 1];
 917:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 ssid_len;
 918:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 919:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_qos_data qos_data;
 920:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 921:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* These are network statistics */
 922:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_rx_stats stats;
 923:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u16 capability;
 924:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 rates[MAX_RATES_LENGTH];
 925:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 rates_len;
 926:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 rates_ex[MAX_RATES_EX_LENGTH];
 927:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 rates_ex_len;
 928:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	unsigned long last_scanned;
 929:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 mode;
 930:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u32 flags;
 931:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u32 last_associate;
 932:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u32 time_stamp[2];
 933:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u16 beacon_interval;
 934:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u16 listen_interval;
 935:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u16 atim_window;
 936:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 erp_value;
 937:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 wpa_ie[MAX_WPA_IE_LEN];
 938:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	size_t wpa_ie_len;
 939:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 rsn_ie[MAX_WPA_IE_LEN];
 940:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	size_t rsn_ie_len;
 941:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_tim_parameters tim;
 942:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 943:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* 802.11h info */
 944:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 945:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* Power Constraint - mandatory if spctrm mgmt required */
 946:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 power_constraint;
 947:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 948:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* TPC Report - mandatory if spctrm mgmt required */
 949:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_tpc_report tpc_report;
 950:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 951:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* IBSS DFS - mandatory if spctrm mgmt required and IBSS
 952:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	 * NOTE: This is variable length and so must be allocated dynamically */
 953:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_ibss_dfs *ibss_dfs;
GAS LISTING  			page 19


 954:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 955:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* Channel Switch Announcement - optional if spctrm mgmt required */
 956:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_csa csa;
 957:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 958:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* Quiet - optional if spctrm mgmt required */
 959:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_quiet quiet;
 960:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 961:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct list_head list;
 962:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** };
 963:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 964:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** enum ieee80211_state {
 965:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	IEEE80211_UNINITIALIZED = 0,
 966:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	IEEE80211_INITIALIZED,
 967:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	IEEE80211_ASSOCIATING,
 968:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	IEEE80211_ASSOCIATED,
 969:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	IEEE80211_AUTHENTICATING,
 970:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	IEEE80211_AUTHENTICATED,
 971:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	IEEE80211_SHUTDOWN
 972:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** };
 973:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 974:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define DEFAULT_MAX_SCAN_AGE (15 * HZ)
 975:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define DEFAULT_FTS 2346
 976:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 977:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define CFG_IEEE80211_RESERVE_FCS (1<<0)
 978:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define CFG_IEEE80211_COMPUTE_FCS (1<<1)
 979:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define CFG_IEEE80211_RTS (1<<2)
 980:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 981:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_24GHZ_MIN_CHANNEL 1
 982:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_24GHZ_MAX_CHANNEL 14
 983:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_24GHZ_CHANNELS    14
 984:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 985:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_52GHZ_MIN_CHANNEL 34
 986:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_52GHZ_MAX_CHANNEL 165
 987:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_52GHZ_CHANNELS    131
 988:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 989:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** enum {
 990:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	IEEE80211_CH_PASSIVE_ONLY = (1 << 0),
 991:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	IEEE80211_CH_B_ONLY = (1 << 2),
 992:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	IEEE80211_CH_NO_IBSS = (1 << 3),
 993:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	IEEE80211_CH_UNIFORM_SPREADING = (1 << 4),
 994:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	IEEE80211_CH_RADAR_DETECT = (1 << 5),
 995:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	IEEE80211_CH_INVALID = (1 << 6),
 996:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** };
 997:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 998:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_channel {
 999:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u32 freq;
1000:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 channel;
1001:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 flags;
1002:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 max_power;
1003:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** };
1004:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1005:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_geo {
1006:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 name[4];
1007:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 bg_channels;
1008:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 a_channels;
1009:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_channel bg[IEEE80211_24GHZ_CHANNELS];
1010:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_channel a[IEEE80211_52GHZ_CHANNELS];
GAS LISTING  			page 20


1011:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** };
1012:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1013:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_device {
1014:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct net_device *dev;
1015:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_security sec;
1016:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1017:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* Bookkeeping structures */
1018:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct net_device_stats stats;
1019:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_stats ieee_stats;
1020:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1021:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_geo geo;
1022:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1023:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* Probe / Beacon management */
1024:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct list_head network_free_list;
1025:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct list_head network_list;
1026:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_network *networks;
1027:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int scans;
1028:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int scan_age;
1029:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1030:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int iw_mode;		/* operating mode (IW_MODE_*) */
1031:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct iw_spy_data spy_data;	/* iwspy support */
1032:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1033:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	spinlock_t lock;
1034:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1035:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int tx_headroom;	/* Set to size of any additional room needed at front
1036:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 				 * of allocated Tx SKBs */
1037:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u32 config;
1038:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1039:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* WEP and other encryption related settings at the device level */
1040:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int open_wep;		/* Set to 1 to allow unencrypted frames */
1041:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1042:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int reset_on_keychange;	/* Set to 1 if the HW needs to be reset on
1043:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 				 * WEP key changes */
1044:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1045:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* If the host performs {en,de}cryption, then set to 1 */
1046:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int host_encrypt;
1047:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int host_encrypt_msdu;
1048:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int host_decrypt;
1049:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* host performs multicast decryption */
1050:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int host_mc_decrypt;
1051:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1052:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int host_open_frag;
1053:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int host_build_iv;
1054:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int ieee802_1x;		/* is IEEE 802.1X used */
1055:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1056:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* WPA data */
1057:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int wpa_enabled;
1058:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int drop_unencrypted;
1059:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int privacy_invoked;
1060:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	size_t wpa_ie_len;
1061:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 *wpa_ie;
1062:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1063:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct list_head crypt_deinit_list;
1064:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_crypt_data *crypt[WEP_KEYS];
1065:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int tx_keyidx;		/* default TX key index (crypt[tx_keyidx]) */
1066:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct timer_list crypt_deinit_timer;
1067:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int crypt_quiesced;
GAS LISTING  			page 21


1068:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1069:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int bcrx_sta_key;	/* use individual keys to override default keys even
1070:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 				 * with RX of broad/multicast frames */
1071:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1072:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* Fragmentation structures */
1073:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_frag_entry frag_cache[IEEE80211_FRAG_CACHE_LEN];
1074:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	unsigned int frag_next_idx;
1075:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u16 fts;		/* Fragmentation Threshold */
1076:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u16 rts;		/* RTS threshold */
1077:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1078:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* Association info */
1079:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 bssid[ETH_ALEN];
1080:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1081:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	enum ieee80211_state state;
1082:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1083:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int mode;		/* A, B, G */
1084:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int modulation;		/* CCK, OFDM */
1085:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int freq_band;		/* 2.4Ghz, 5.2Ghz, Mixed */
1086:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int abg_true;		/* ABG flag              */
1087:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1088:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int perfect_rssi;
1089:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int worst_rssi;
1090:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1091:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* Callback functions */
1092:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	void (*set_security) (struct net_device * dev,
1093:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 			      struct ieee80211_security * sec);
1094:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int (*hard_start_xmit) (struct ieee80211_txb * txb,
1095:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 				struct net_device * dev, int pri);
1096:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int (*reset_port) (struct net_device * dev);
1097:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int (*is_queue_full) (struct net_device * dev, int pri);
1098:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1099:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int (*handle_management) (struct net_device * dev,
1100:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 				  struct ieee80211_network * network, u16 type);
1101:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1102:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* Typical STA methods */
1103:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int (*handle_auth) (struct net_device * dev,
1104:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 			    struct ieee80211_auth * auth);
1105:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int (*handle_deauth) (struct net_device * dev,
1106:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 			      struct ieee80211_deauth * auth);
1107:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int (*handle_action) (struct net_device * dev,
1108:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 			      struct ieee80211_action * action,
1109:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 			      struct ieee80211_rx_stats * stats);
1110:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int (*handle_disassoc) (struct net_device * dev,
1111:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 				struct ieee80211_disassoc * assoc);
1112:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int (*handle_beacon) (struct net_device * dev,
1113:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 			      struct ieee80211_beacon * beacon,
1114:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 			      struct ieee80211_network * network);
1115:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int (*handle_probe_response) (struct net_device * dev,
1116:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 				      struct ieee80211_probe_response * resp,
1117:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 				      struct ieee80211_network * network);
1118:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int (*handle_probe_request) (struct net_device * dev,
1119:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 				     struct ieee80211_probe_request * req,
1120:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 				     struct ieee80211_rx_stats * stats);
1121:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int (*handle_assoc_response) (struct net_device * dev,
1122:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 				      struct ieee80211_assoc_response * resp,
1123:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 				      struct ieee80211_network * network);
1124:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
GAS LISTING  			page 22


1125:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* Typical AP methods */
1126:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int (*handle_assoc_request) (struct net_device * dev);
1127:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int (*handle_reassoc_request) (struct net_device * dev,
1128:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 				       struct ieee80211_reassoc_request * req);
1129:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1130:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* This must be the last item so that it points to the data
1131:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	 * allocated beyond this structure by alloc_ieee80211 */
1132:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 priv[0];
1133:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** };
1134:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1135:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE_A            (1<<0)
1136:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE_B            (1<<1)
1137:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE_G            (1<<2)
1138:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE_MODE_MASK    (IEEE_A|IEEE_B|IEEE_G)
1139:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1140:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #include <linux/version.h>	/* KERNEL_VERSION */
1141:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,12)
1142:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** static inline int is_multicast_ether_addr(const u8 *addr)
1143:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** {
1144:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****        return addr[0] & 0x01;
1145:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** }
1146:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #endif
1147:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1148:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** /* Fix for kernels < 2.6.12, since we use __nocast */
1149:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #ifndef __nocast
1150:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define __nocast
1151:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #endif
1152:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1153:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,14)
1154:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** static inline void *kzalloc(size_t size, unsigned __nocast flags)
1155:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** {
1156:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	void *ret = kmalloc(size, flags);
1157:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	if (ret)
1158:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 		memset(ret, 0, size);
1159:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	return ret;
1160:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** }
1161:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #endif
1162:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1163:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,15)
1164:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** static inline unsigned compare_ether_addr(const u8 *_a, const u8 *_b)
1165:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** {
1166:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	const u16 *a = (const u16 *) _a;
1167:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	const u16 *b = (const u16 *) _b;
1168:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1169:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	BUILD_BUG_ON(ETH_ALEN != 6);
1170:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	return ((a[0] ^ b[0]) | (a[1] ^ b[1]) | (a[2] ^ b[2])) != 0;
1171:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** }
1172:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #endif
1173:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1174:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** static inline void *ieee80211_priv(struct net_device *dev)
1175:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** {
1176:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	return ((struct ieee80211_device *)netdev_priv(dev))->priv;
1177:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** }
1178:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1179:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,14)
1180:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** static inline int is_broadcast_ether_addr(const u8 *addr)
1181:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** {
GAS LISTING  			page 23


1182:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****         return (addr[0] & addr[1] & addr[2] & addr[3] & addr[4] & addr[5]) == 0xff;
1183:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** }
1184:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #endif
1185:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1186:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** static inline int ieee80211_is_empty_essid(const char *essid, int essid_len)
1187:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** {
1188:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* Single white space is for Linksys APs */
1189:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	if (essid_len == 1 && essid[0] == ' ')
1190:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 		return 1;
1191:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1192:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* Otherwise, if the entire essid is 0, we assume it is hidden */
1193:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	while (essid_len) {
1194:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 		essid_len--;
1195:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 		if (essid[essid_len] != '\0')
1196:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 			return 0;
1197:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	}
1198:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1199:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	return 1;
1200:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** }
1201:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1202:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** static inline int ieee80211_is_valid_mode(struct ieee80211_device *ieee,
1203:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 					  int mode)
1204:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** {
1205:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/*
1206:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	 * It is possible for both access points and our device to support
1207:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	 * combinations of modes, so as long as there is one valid combination
1208:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	 * of ap/device supported modes, then return success
1209:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	 *
1210:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	 */
1211:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	if ((mode & IEEE_A) &&
1212:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	    (ieee->modulation & IEEE80211_OFDM_MODULATION) &&
1213:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	    (ieee->freq_band & IEEE80211_52GHZ_BAND))
1214:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 		return 1;
1215:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1216:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	if ((mode & IEEE_G) &&
1217:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	    (ieee->modulation & IEEE80211_OFDM_MODULATION) &&
1218:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	    (ieee->freq_band & IEEE80211_24GHZ_BAND))
1219:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 		return 1;
1220:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1221:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	if ((mode & IEEE_B) &&
1222:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	    (ieee->modulation & IEEE80211_CCK_MODULATION) &&
1223:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	    (ieee->freq_band & IEEE80211_24GHZ_BAND))
1224:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 		return 1;
1225:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1226:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	return 0;
1227:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** }
1228:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1229:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** static inline int ieee80211_get_hdrlen(u16 fc)
1230:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** {
1231:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int hdrlen = IEEE80211_3ADDR_LEN;
1232:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u16 stype = WLAN_FC_GET_STYPE(fc);
1233:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1234:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	switch (WLAN_FC_GET_TYPE(fc)) {
  36              	.loc 2 1234 0
  37 0019 89C2     	movl %eax,%edx
  38              	.loc 2 1232 0
  39 001b 89C6     	movl %eax,%esi
GAS LISTING  			page 24


  40              	.loc 2 1234 0
  41 001d 83E20C   	andl $12,%edx
  42              	.loc 2 1232 0
  43 0020 6681E6F0 	andw $240,%si
  43      00
  44              	.loc 2 1234 0
  45 0025 83FA04   	cmpl $4,%edx
  46              	.LBE4:
  47              	.LBE3:
  48              	.LBE2:
  46:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	skb->mac.raw = skb->data;
  49              	.loc 1 46 0
  50 0028 897B2C   	movl %edi,44(%ebx)
  51              	.LBB5:
  52              	.LBB6:
  53              	.LBB7:
  54              	.loc 2 1231 0
  55 002b B9180000 	movl $24,%ecx
  55      00
  56              	.loc 2 1234 0
  57 0030 741C     	je .L6
  58 0032 83FA08   	cmpl $8,%edx
  59 0035 7534     	jne .L2
1235:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	case IEEE80211_FTYPE_DATA:
1236:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 		if ((fc & IEEE80211_FCTL_FROMDS) && (fc & IEEE80211_FCTL_TODS))
  60              	.loc 2 1236 0
  61 0037 F6C402   	testb $2,%ah
  62 003a 7407     	je .L4
  63 003c F6C401   	testb $1,%ah
  64 003f 7402     	je .L4
1237:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 			hdrlen = IEEE80211_4ADDR_LEN;
  65              	.loc 2 1237 0
  66 0041 B11E     	movb $30,%cl
  67              	.L4:
1238:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 		if (stype & IEEE80211_STYPE_QOS_DATA)
  68              	.loc 2 1238 0
  69 0043 89F0     	movl %esi,%eax
  70 0045 84C0     	testb %al,%al
  71 0047 7922     	jns .L2
1239:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 			hdrlen += 2;
  72              	.loc 2 1239 0
  73 0049 83C102   	addl $2,%ecx
1240:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 		break;
  74              	.loc 2 1240 0
  75 004c EB1D     	jmp .L2
  76              	.L6:
1241:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	case IEEE80211_FTYPE_CTL:
1242:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 		switch (WLAN_FC_GET_STYPE(fc)) {
  77              	.loc 2 1242 0
  78 004e 25F00000 	andl $240,%eax
  78      00
  79 0053 3DC00000 	cmpl $192,%eax
  79      00
  80 0058 740C     	je .L9
  81 005a 3DD00000 	cmpl $208,%eax
  81      00
1243:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 		case IEEE80211_STYPE_CTS:
GAS LISTING  			page 25


1244:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 		case IEEE80211_STYPE_ACK:
1245:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 			hdrlen = IEEE80211_1ADDR_LEN;
1246:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 			break;
1247:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 		default:
1248:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 			hdrlen = IEEE80211_2ADDR_LEN;
  82              	.loc 2 1248 0
  83 005f B9100000 	movl $16,%ecx
  83      00
  84              	.loc 2 1242 0
  85 0064 7505     	jne .L2
  86              	.L9:
  87              	.loc 2 1245 0
  88 0066 B90A0000 	movl $10,%ecx
  88      00
  89              	.L2:
  90              	.LBE7:
  91              	.LBE6:
  92              	.LBB8:
  93              	.file 3 "include/linux/skbuff.h"
   1:include/linux/skbuff.h **** /*
   2:include/linux/skbuff.h ****  *	Definitions for the 'struct sk_buff' memory handlers.
   3:include/linux/skbuff.h ****  *
   4:include/linux/skbuff.h ****  *	Authors:
   5:include/linux/skbuff.h ****  *		Alan Cox, <gw4pts@gw4pts.ampr.org>
   6:include/linux/skbuff.h ****  *		Florian La Roche, <rzsfl@rz.uni-sb.de>
   7:include/linux/skbuff.h ****  *
   8:include/linux/skbuff.h ****  *	This program is free software; you can redistribute it and/or
   9:include/linux/skbuff.h ****  *	modify it under the terms of the GNU General Public License
  10:include/linux/skbuff.h ****  *	as published by the Free Software Foundation; either version
  11:include/linux/skbuff.h ****  *	2 of the License, or (at your option) any later version.
  12:include/linux/skbuff.h ****  */
  13:include/linux/skbuff.h **** 
  14:include/linux/skbuff.h **** #ifndef _LINUX_SKBUFF_H
  15:include/linux/skbuff.h **** #define _LINUX_SKBUFF_H
  16:include/linux/skbuff.h **** 
  17:include/linux/skbuff.h **** #include <linux/config.h>
  18:include/linux/skbuff.h **** #include <linux/kernel.h>
  19:include/linux/skbuff.h **** #include <linux/compiler.h>
  20:include/linux/skbuff.h **** #include <linux/time.h>
  21:include/linux/skbuff.h **** #include <linux/cache.h>
  22:include/linux/skbuff.h **** 
  23:include/linux/skbuff.h **** #include <asm/atomic.h>
  24:include/linux/skbuff.h **** #include <asm/types.h>
  25:include/linux/skbuff.h **** #include <linux/spinlock.h>
  26:include/linux/skbuff.h **** #include <linux/mm.h>
  27:include/linux/skbuff.h **** #include <linux/highmem.h>
  28:include/linux/skbuff.h **** #include <linux/poll.h>
  29:include/linux/skbuff.h **** #include <linux/net.h>
  30:include/linux/skbuff.h **** #include <net/checksum.h>
  31:include/linux/skbuff.h **** 
  32:include/linux/skbuff.h **** #define HAVE_ALLOC_SKB		/* For the drivers to know */
  33:include/linux/skbuff.h **** #define HAVE_ALIGNABLE_SKB	/* Ditto 8)		   */
  34:include/linux/skbuff.h **** #define SLAB_SKB 		/* Slabified skbuffs 	   */
  35:include/linux/skbuff.h **** 
  36:include/linux/skbuff.h **** #define CHECKSUM_NONE 0
  37:include/linux/skbuff.h **** #define CHECKSUM_HW 1
  38:include/linux/skbuff.h **** #define CHECKSUM_UNNECESSARY 2
GAS LISTING  			page 26


  39:include/linux/skbuff.h **** 
  40:include/linux/skbuff.h **** #define SKB_DATA_ALIGN(X)	(((X) + (SMP_CACHE_BYTES - 1)) & \
  41:include/linux/skbuff.h **** 				 ~(SMP_CACHE_BYTES - 1))
  42:include/linux/skbuff.h **** #define SKB_MAX_ORDER(X, ORDER)	(((PAGE_SIZE << (ORDER)) - (X) - \
  43:include/linux/skbuff.h **** 				  sizeof(struct skb_shared_info)) & \
  44:include/linux/skbuff.h **** 				  ~(SMP_CACHE_BYTES - 1))
  45:include/linux/skbuff.h **** #define SKB_MAX_HEAD(X)		(SKB_MAX_ORDER((X), 0))
  46:include/linux/skbuff.h **** #define SKB_MAX_ALLOC		(SKB_MAX_ORDER(0, 2))
  47:include/linux/skbuff.h **** 
  48:include/linux/skbuff.h **** /* A. Checksumming of received packets by device.
  49:include/linux/skbuff.h ****  *
  50:include/linux/skbuff.h ****  *	NONE: device failed to checksum this packet.
  51:include/linux/skbuff.h ****  *		skb->csum is undefined.
  52:include/linux/skbuff.h ****  *
  53:include/linux/skbuff.h ****  *	UNNECESSARY: device parsed packet and wouldbe verified checksum.
  54:include/linux/skbuff.h ****  *		skb->csum is undefined.
  55:include/linux/skbuff.h ****  *	      It is bad option, but, unfortunately, many of vendors do this.
  56:include/linux/skbuff.h ****  *	      Apparently with secret goal to sell you new device, when you
  57:include/linux/skbuff.h ****  *	      will add new protocol to your host. F.e. IPv6. 8)
  58:include/linux/skbuff.h ****  *
  59:include/linux/skbuff.h ****  *	HW: the most generic way. Device supplied checksum of _all_
  60:include/linux/skbuff.h ****  *	    the packet as seen by netif_rx in skb->csum.
  61:include/linux/skbuff.h ****  *	    NOTE: Even if device supports only some protocols, but
  62:include/linux/skbuff.h ****  *	    is able to produce some skb->csum, it MUST use HW,
  63:include/linux/skbuff.h ****  *	    not UNNECESSARY.
  64:include/linux/skbuff.h ****  *
  65:include/linux/skbuff.h ****  * B. Checksumming on output.
  66:include/linux/skbuff.h ****  *
  67:include/linux/skbuff.h ****  *	NONE: skb is checksummed by protocol or csum is not required.
  68:include/linux/skbuff.h ****  *
  69:include/linux/skbuff.h ****  *	HW: device is required to csum packet as seen by hard_start_xmit
  70:include/linux/skbuff.h ****  *	from skb->h.raw to the end and to record the checksum
  71:include/linux/skbuff.h ****  *	at skb->h.raw+skb->csum.
  72:include/linux/skbuff.h ****  *
  73:include/linux/skbuff.h ****  *	Device must show its capabilities in dev->features, set
  74:include/linux/skbuff.h ****  *	at device setup time.
  75:include/linux/skbuff.h ****  *	NETIF_F_HW_CSUM	- it is clever device, it is able to checksum
  76:include/linux/skbuff.h ****  *			  everything.
  77:include/linux/skbuff.h ****  *	NETIF_F_NO_CSUM - loopback or reliable single hop media.
  78:include/linux/skbuff.h ****  *	NETIF_F_IP_CSUM - device is dumb. It is able to csum only
  79:include/linux/skbuff.h ****  *			  TCP/UDP over IPv4. Sigh. Vendors like this
  80:include/linux/skbuff.h ****  *			  way by an unknown reason. Though, see comment above
  81:include/linux/skbuff.h ****  *			  about CHECKSUM_UNNECESSARY. 8)
  82:include/linux/skbuff.h ****  *
  83:include/linux/skbuff.h ****  *	Any questions? No questions, good. 		--ANK
  84:include/linux/skbuff.h ****  */
  85:include/linux/skbuff.h **** 
  86:include/linux/skbuff.h **** struct net_device;
  87:include/linux/skbuff.h **** 
  88:include/linux/skbuff.h **** #ifdef CONFIG_NETFILTER
  89:include/linux/skbuff.h **** struct nf_conntrack {
  90:include/linux/skbuff.h **** 	atomic_t use;
  91:include/linux/skbuff.h **** 	void (*destroy)(struct nf_conntrack *);
  92:include/linux/skbuff.h **** };
  93:include/linux/skbuff.h **** 
  94:include/linux/skbuff.h **** #ifdef CONFIG_BRIDGE_NETFILTER
  95:include/linux/skbuff.h **** struct nf_bridge_info {
GAS LISTING  			page 27


  96:include/linux/skbuff.h **** 	atomic_t use;
  97:include/linux/skbuff.h **** 	struct net_device *physindev;
  98:include/linux/skbuff.h **** 	struct net_device *physoutdev;
  99:include/linux/skbuff.h **** #if defined(CONFIG_VLAN_8021Q) || defined(CONFIG_VLAN_8021Q_MODULE)
 100:include/linux/skbuff.h **** 	struct net_device *netoutdev;
 101:include/linux/skbuff.h **** #endif
 102:include/linux/skbuff.h **** 	unsigned int mask;
 103:include/linux/skbuff.h **** 	unsigned long data[32 / sizeof(unsigned long)];
 104:include/linux/skbuff.h **** };
 105:include/linux/skbuff.h **** #endif
 106:include/linux/skbuff.h **** 
 107:include/linux/skbuff.h **** #endif
 108:include/linux/skbuff.h **** 
 109:include/linux/skbuff.h **** struct sk_buff_head {
 110:include/linux/skbuff.h **** 	/* These two members must be first. */
 111:include/linux/skbuff.h **** 	struct sk_buff	*next;
 112:include/linux/skbuff.h **** 	struct sk_buff	*prev;
 113:include/linux/skbuff.h **** 
 114:include/linux/skbuff.h **** 	__u32		qlen;
 115:include/linux/skbuff.h **** 	spinlock_t	lock;
 116:include/linux/skbuff.h **** };
 117:include/linux/skbuff.h **** 
 118:include/linux/skbuff.h **** struct sk_buff;
 119:include/linux/skbuff.h **** 
 120:include/linux/skbuff.h **** /* To allow 64K frame to be packed as single skb without frag_list */
 121:include/linux/skbuff.h **** #define MAX_SKB_FRAGS (65536/PAGE_SIZE + 2)
 122:include/linux/skbuff.h **** 
 123:include/linux/skbuff.h **** typedef struct skb_frag_struct skb_frag_t;
 124:include/linux/skbuff.h **** 
 125:include/linux/skbuff.h **** struct skb_frag_struct {
 126:include/linux/skbuff.h **** 	struct page *page;
 127:include/linux/skbuff.h **** 	__u16 page_offset;
 128:include/linux/skbuff.h **** 	__u16 size;
 129:include/linux/skbuff.h **** };
 130:include/linux/skbuff.h **** 
 131:include/linux/skbuff.h **** /* This data is invariant across clones and lives at
 132:include/linux/skbuff.h ****  * the end of the header data, ie. at skb->end.
 133:include/linux/skbuff.h ****  */
 134:include/linux/skbuff.h **** struct skb_shared_info {
 135:include/linux/skbuff.h **** 	atomic_t	dataref;
 136:include/linux/skbuff.h **** 	unsigned int	nr_frags;
 137:include/linux/skbuff.h **** 	unsigned short	tso_size;
 138:include/linux/skbuff.h **** 	unsigned short	tso_segs;
 139:include/linux/skbuff.h **** 	struct sk_buff	*frag_list;
 140:include/linux/skbuff.h **** 	skb_frag_t	frags[MAX_SKB_FRAGS];
 141:include/linux/skbuff.h **** };
 142:include/linux/skbuff.h **** 
 143:include/linux/skbuff.h **** /* We divide dataref into two halves.  The higher 16 bits hold references
 144:include/linux/skbuff.h ****  * to the payload part of skb->data.  The lower 16 bits hold references to
 145:include/linux/skbuff.h ****  * the entire skb->data.  It is up to the users of the skb to agree on
 146:include/linux/skbuff.h ****  * where the payload starts.
 147:include/linux/skbuff.h ****  *
 148:include/linux/skbuff.h ****  * All users must obey the rule that the skb->data reference count must be
 149:include/linux/skbuff.h ****  * greater than or equal to the payload reference count.
 150:include/linux/skbuff.h ****  *
 151:include/linux/skbuff.h ****  * Holding a reference to the payload part means that the user does not
 152:include/linux/skbuff.h ****  * care about modifications to the header part of skb->data.
GAS LISTING  			page 28


 153:include/linux/skbuff.h ****  */
 154:include/linux/skbuff.h **** #define SKB_DATAREF_SHIFT 16
 155:include/linux/skbuff.h **** #define SKB_DATAREF_MASK ((1 << SKB_DATAREF_SHIFT) - 1)
 156:include/linux/skbuff.h **** 
 157:include/linux/skbuff.h **** /** 
 158:include/linux/skbuff.h ****  *	struct sk_buff - socket buffer
 159:include/linux/skbuff.h ****  *	@next: Next buffer in list
 160:include/linux/skbuff.h ****  *	@prev: Previous buffer in list
 161:include/linux/skbuff.h ****  *	@list: List we are on
 162:include/linux/skbuff.h ****  *	@sk: Socket we are owned by
 163:include/linux/skbuff.h ****  *	@stamp: Time we arrived
 164:include/linux/skbuff.h ****  *	@dev: Device we arrived on/are leaving by
 165:include/linux/skbuff.h ****  *	@input_dev: Device we arrived on
 166:include/linux/skbuff.h ****  *      @real_dev: The real device we are using
 167:include/linux/skbuff.h ****  *	@h: Transport layer header
 168:include/linux/skbuff.h ****  *	@nh: Network layer header
 169:include/linux/skbuff.h ****  *	@mac: Link layer header
 170:include/linux/skbuff.h ****  *	@dst: destination entry
 171:include/linux/skbuff.h ****  *	@sp: the security path, used for xfrm
 172:include/linux/skbuff.h ****  *	@cb: Control buffer. Free for use by every layer. Put private vars here
 173:include/linux/skbuff.h ****  *	@len: Length of actual data
 174:include/linux/skbuff.h ****  *	@data_len: Data length
 175:include/linux/skbuff.h ****  *	@mac_len: Length of link layer header
 176:include/linux/skbuff.h ****  *	@csum: Checksum
 177:include/linux/skbuff.h ****  *	@local_df: allow local fragmentation
 178:include/linux/skbuff.h ****  *	@cloned: Head may be cloned (check refcnt to be sure)
 179:include/linux/skbuff.h ****  *	@nohdr: Payload reference only, must not modify header
 180:include/linux/skbuff.h ****  *	@pkt_type: Packet class
 181:include/linux/skbuff.h ****  *	@ip_summed: Driver fed us an IP checksum
 182:include/linux/skbuff.h ****  *	@priority: Packet queueing priority
 183:include/linux/skbuff.h ****  *	@users: User count - see {datagram,tcp}.c
 184:include/linux/skbuff.h ****  *	@protocol: Packet protocol from driver
 185:include/linux/skbuff.h ****  *	@security: Security level of packet
 186:include/linux/skbuff.h ****  *	@truesize: Buffer size 
 187:include/linux/skbuff.h ****  *	@head: Head of buffer
 188:include/linux/skbuff.h ****  *	@data: Data head pointer
 189:include/linux/skbuff.h ****  *	@tail: Tail pointer
 190:include/linux/skbuff.h ****  *	@end: End pointer
 191:include/linux/skbuff.h ****  *	@destructor: Destruct function
 192:include/linux/skbuff.h ****  *	@nfmark: Can be used for communication between hooks
 193:include/linux/skbuff.h ****  *	@nfcache: Cache info
 194:include/linux/skbuff.h ****  *	@nfct: Associated connection, if any
 195:include/linux/skbuff.h ****  *	@nfctinfo: Relationship of this skb to the connection
 196:include/linux/skbuff.h ****  *	@nf_debug: Netfilter debugging
 197:include/linux/skbuff.h ****  *	@nf_bridge: Saved data about a bridged frame - see br_netfilter.c
 198:include/linux/skbuff.h ****  *      @private: Data which is private to the HIPPI implementation
 199:include/linux/skbuff.h ****  *	@tc_index: Traffic control index
 200:include/linux/skbuff.h ****  *	@tc_verd: traffic control verdict
 201:include/linux/skbuff.h ****  *	@tc_classid: traffic control classid
 202:include/linux/skbuff.h ****  */
 203:include/linux/skbuff.h **** 
 204:include/linux/skbuff.h **** struct sk_buff {
 205:include/linux/skbuff.h **** 	/* These two members must be first. */
 206:include/linux/skbuff.h **** 	struct sk_buff		*next;
 207:include/linux/skbuff.h **** 	struct sk_buff		*prev;
 208:include/linux/skbuff.h **** 
 209:include/linux/skbuff.h **** 	struct sk_buff_head	*list;
GAS LISTING  			page 29


 210:include/linux/skbuff.h **** 	struct sock		*sk;
 211:include/linux/skbuff.h **** 	struct timeval		stamp;
 212:include/linux/skbuff.h **** 	struct net_device	*dev;
 213:include/linux/skbuff.h **** 	struct net_device	*input_dev;
 214:include/linux/skbuff.h **** 	struct net_device	*real_dev;
 215:include/linux/skbuff.h **** 
 216:include/linux/skbuff.h **** 	union {
 217:include/linux/skbuff.h **** 		struct tcphdr	*th;
 218:include/linux/skbuff.h **** 		struct udphdr	*uh;
 219:include/linux/skbuff.h **** 		struct icmphdr	*icmph;
 220:include/linux/skbuff.h **** 		struct igmphdr	*igmph;
 221:include/linux/skbuff.h **** 		struct iphdr	*ipiph;
 222:include/linux/skbuff.h **** 		struct ipv6hdr	*ipv6h;
 223:include/linux/skbuff.h **** 		unsigned char	*raw;
 224:include/linux/skbuff.h **** 	} h;
 225:include/linux/skbuff.h **** 
 226:include/linux/skbuff.h **** 	union {
 227:include/linux/skbuff.h **** 		struct iphdr	*iph;
 228:include/linux/skbuff.h **** 		struct ipv6hdr	*ipv6h;
 229:include/linux/skbuff.h **** 		struct arphdr	*arph;
 230:include/linux/skbuff.h **** 		unsigned char	*raw;
 231:include/linux/skbuff.h **** 	} nh;
 232:include/linux/skbuff.h **** 
 233:include/linux/skbuff.h **** 	union {
 234:include/linux/skbuff.h **** 	  	unsigned char 	*raw;
 235:include/linux/skbuff.h **** 	} mac;
 236:include/linux/skbuff.h **** 
 237:include/linux/skbuff.h **** 	struct  dst_entry	*dst;
 238:include/linux/skbuff.h **** 	struct	sec_path	*sp;
 239:include/linux/skbuff.h **** 
 240:include/linux/skbuff.h **** 	/*
 241:include/linux/skbuff.h **** 	 * This is the control buffer. It is free to use for every
 242:include/linux/skbuff.h **** 	 * layer. Please put your private variables there. If you
 243:include/linux/skbuff.h **** 	 * want to keep them across layers you have to do a skb_clone()
 244:include/linux/skbuff.h **** 	 * first. This is owned by whoever has the skb queued ATM.
 245:include/linux/skbuff.h **** 	 */
 246:include/linux/skbuff.h **** 	char			cb[40];
 247:include/linux/skbuff.h **** 
 248:include/linux/skbuff.h **** 	unsigned int		len,
 249:include/linux/skbuff.h **** 				data_len,
 250:include/linux/skbuff.h **** 				mac_len,
 251:include/linux/skbuff.h **** 				csum;
 252:include/linux/skbuff.h **** 	unsigned char		local_df,
 253:include/linux/skbuff.h **** 				cloned:1,
 254:include/linux/skbuff.h **** 				nohdr:1,
 255:include/linux/skbuff.h **** 				pkt_type,
 256:include/linux/skbuff.h **** 				ip_summed;
 257:include/linux/skbuff.h **** 	__u32			priority;
 258:include/linux/skbuff.h **** 	unsigned short		protocol,
 259:include/linux/skbuff.h **** 				security;
 260:include/linux/skbuff.h **** 
 261:include/linux/skbuff.h **** 	void			(*destructor)(struct sk_buff *skb);
 262:include/linux/skbuff.h **** #ifdef CONFIG_NETFILTER
 263:include/linux/skbuff.h ****         unsigned long		nfmark;
 264:include/linux/skbuff.h **** 	__u32			nfcache;
 265:include/linux/skbuff.h **** 	__u32			nfctinfo;
 266:include/linux/skbuff.h **** 	struct nf_conntrack	*nfct;
GAS LISTING  			page 30


 267:include/linux/skbuff.h **** #ifdef CONFIG_NETFILTER_DEBUG
 268:include/linux/skbuff.h ****         unsigned int		nf_debug;
 269:include/linux/skbuff.h **** #endif
 270:include/linux/skbuff.h **** #ifdef CONFIG_BRIDGE_NETFILTER
 271:include/linux/skbuff.h **** 	struct nf_bridge_info	*nf_bridge;
 272:include/linux/skbuff.h **** #endif
 273:include/linux/skbuff.h **** #endif /* CONFIG_NETFILTER */
 274:include/linux/skbuff.h **** #if defined(CONFIG_HIPPI)
 275:include/linux/skbuff.h **** 	union {
 276:include/linux/skbuff.h **** 		__u32		ifield;
 277:include/linux/skbuff.h **** 	} private;
 278:include/linux/skbuff.h **** #endif
 279:include/linux/skbuff.h **** #ifdef CONFIG_NET_SCHED
 280:include/linux/skbuff.h ****        __u32			tc_index;        /* traffic control index */
 281:include/linux/skbuff.h **** #ifdef CONFIG_NET_CLS_ACT
 282:include/linux/skbuff.h **** 	__u32           tc_verd;               /* traffic control verdict */
 283:include/linux/skbuff.h **** 	__u32           tc_classid;            /* traffic control classid */
 284:include/linux/skbuff.h **** #endif
 285:include/linux/skbuff.h **** 
 286:include/linux/skbuff.h **** #endif
 287:include/linux/skbuff.h **** 
 288:include/linux/skbuff.h **** 
 289:include/linux/skbuff.h **** 	/* These elements must be at the end, see alloc_skb() for details.  */
 290:include/linux/skbuff.h **** 	unsigned int		truesize;
 291:include/linux/skbuff.h **** 	atomic_t		users;
 292:include/linux/skbuff.h **** 	unsigned char		*head,
 293:include/linux/skbuff.h **** 				*data,
 294:include/linux/skbuff.h **** 				*tail,
 295:include/linux/skbuff.h **** 				*end;
 296:include/linux/skbuff.h **** };
 297:include/linux/skbuff.h **** 
 298:include/linux/skbuff.h **** #ifdef __KERNEL__
 299:include/linux/skbuff.h **** /*
 300:include/linux/skbuff.h ****  *	Handling routines are only of interest to the kernel
 301:include/linux/skbuff.h ****  */
 302:include/linux/skbuff.h **** #include <linux/slab.h>
 303:include/linux/skbuff.h **** 
 304:include/linux/skbuff.h **** #include <asm/system.h>
 305:include/linux/skbuff.h **** 
 306:include/linux/skbuff.h **** extern void	       __kfree_skb(struct sk_buff *skb);
 307:include/linux/skbuff.h **** extern struct sk_buff *alloc_skb(unsigned int size, int priority);
 308:include/linux/skbuff.h **** extern struct sk_buff *alloc_skb_from_cache(kmem_cache_t *cp,
 309:include/linux/skbuff.h **** 					    unsigned int size, int priority);
 310:include/linux/skbuff.h **** extern void	       kfree_skbmem(struct sk_buff *skb);
 311:include/linux/skbuff.h **** extern struct sk_buff *skb_clone(struct sk_buff *skb, int priority);
 312:include/linux/skbuff.h **** extern struct sk_buff *skb_copy(const struct sk_buff *skb, int priority);
 313:include/linux/skbuff.h **** extern struct sk_buff *pskb_copy(struct sk_buff *skb, int gfp_mask);
 314:include/linux/skbuff.h **** extern int	       pskb_expand_head(struct sk_buff *skb,
 315:include/linux/skbuff.h **** 					int nhead, int ntail, int gfp_mask);
 316:include/linux/skbuff.h **** extern struct sk_buff *skb_realloc_headroom(struct sk_buff *skb,
 317:include/linux/skbuff.h **** 					    unsigned int headroom);
 318:include/linux/skbuff.h **** extern struct sk_buff *skb_copy_expand(const struct sk_buff *skb,
 319:include/linux/skbuff.h **** 				       int newheadroom, int newtailroom,
 320:include/linux/skbuff.h **** 				       int priority);
 321:include/linux/skbuff.h **** extern struct sk_buff *		skb_pad(struct sk_buff *skb, int pad);
 322:include/linux/skbuff.h **** #define dev_kfree_skb(a)	kfree_skb(a)
 323:include/linux/skbuff.h **** extern void	      skb_over_panic(struct sk_buff *skb, int len,
GAS LISTING  			page 31


 324:include/linux/skbuff.h **** 				     void *here);
 325:include/linux/skbuff.h **** extern void	      skb_under_panic(struct sk_buff *skb, int len,
 326:include/linux/skbuff.h **** 				      void *here);
 327:include/linux/skbuff.h **** 
 328:include/linux/skbuff.h **** /* Internal */
 329:include/linux/skbuff.h **** #define skb_shinfo(SKB)		((struct skb_shared_info *)((SKB)->end))
 330:include/linux/skbuff.h **** 
 331:include/linux/skbuff.h **** /**
 332:include/linux/skbuff.h ****  *	skb_queue_empty - check if a queue is empty
 333:include/linux/skbuff.h ****  *	@list: queue head
 334:include/linux/skbuff.h ****  *
 335:include/linux/skbuff.h ****  *	Returns true if the queue is empty, false otherwise.
 336:include/linux/skbuff.h ****  */
 337:include/linux/skbuff.h **** static inline int skb_queue_empty(const struct sk_buff_head *list)
 338:include/linux/skbuff.h **** {
 339:include/linux/skbuff.h **** 	return list->next == (struct sk_buff *)list;
 340:include/linux/skbuff.h **** }
 341:include/linux/skbuff.h **** 
 342:include/linux/skbuff.h **** /**
 343:include/linux/skbuff.h ****  *	skb_get - reference buffer
 344:include/linux/skbuff.h ****  *	@skb: buffer to reference
 345:include/linux/skbuff.h ****  *
 346:include/linux/skbuff.h ****  *	Makes another reference to a socket buffer and returns a pointer
 347:include/linux/skbuff.h ****  *	to the buffer.
 348:include/linux/skbuff.h ****  */
 349:include/linux/skbuff.h **** static inline struct sk_buff *skb_get(struct sk_buff *skb)
 350:include/linux/skbuff.h **** {
 351:include/linux/skbuff.h **** 	atomic_inc(&skb->users);
 352:include/linux/skbuff.h **** 	return skb;
 353:include/linux/skbuff.h **** }
 354:include/linux/skbuff.h **** 
 355:include/linux/skbuff.h **** /*
 356:include/linux/skbuff.h ****  * If users == 1, we are the only owner and are can avoid redundant
 357:include/linux/skbuff.h ****  * atomic change.
 358:include/linux/skbuff.h ****  */
 359:include/linux/skbuff.h **** 
 360:include/linux/skbuff.h **** /**
 361:include/linux/skbuff.h ****  *	kfree_skb - free an sk_buff
 362:include/linux/skbuff.h ****  *	@skb: buffer to free
 363:include/linux/skbuff.h ****  *
 364:include/linux/skbuff.h ****  *	Drop a reference to the buffer and free it if the usage count has
 365:include/linux/skbuff.h ****  *	hit zero.
 366:include/linux/skbuff.h ****  */
 367:include/linux/skbuff.h **** static inline void kfree_skb(struct sk_buff *skb)
 368:include/linux/skbuff.h **** {
 369:include/linux/skbuff.h **** 	if (likely(atomic_read(&skb->users) == 1))
 370:include/linux/skbuff.h **** 		smp_rmb();
 371:include/linux/skbuff.h **** 	else if (likely(!atomic_dec_and_test(&skb->users)))
 372:include/linux/skbuff.h **** 		return;
 373:include/linux/skbuff.h **** 	__kfree_skb(skb);
 374:include/linux/skbuff.h **** }
 375:include/linux/skbuff.h **** 
 376:include/linux/skbuff.h **** /**
 377:include/linux/skbuff.h ****  *	skb_cloned - is the buffer a clone
 378:include/linux/skbuff.h ****  *	@skb: buffer to check
 379:include/linux/skbuff.h ****  *
 380:include/linux/skbuff.h ****  *	Returns true if the buffer was generated with skb_clone() and is
GAS LISTING  			page 32


 381:include/linux/skbuff.h ****  *	one of multiple shared copies of the buffer. Cloned buffers are
 382:include/linux/skbuff.h ****  *	shared data so must not be written to under normal circumstances.
 383:include/linux/skbuff.h ****  */
 384:include/linux/skbuff.h **** static inline int skb_cloned(const struct sk_buff *skb)
 385:include/linux/skbuff.h **** {
 386:include/linux/skbuff.h **** 	return skb->cloned &&
 387:include/linux/skbuff.h **** 	       (atomic_read(&skb_shinfo(skb)->dataref) & SKB_DATAREF_MASK) != 1;
 388:include/linux/skbuff.h **** }
 389:include/linux/skbuff.h **** 
 390:include/linux/skbuff.h **** /**
 391:include/linux/skbuff.h ****  *	skb_header_cloned - is the header a clone
 392:include/linux/skbuff.h ****  *	@skb: buffer to check
 393:include/linux/skbuff.h ****  *
 394:include/linux/skbuff.h ****  *	Returns true if modifying the header part of the buffer requires
 395:include/linux/skbuff.h ****  *	the data to be copied.
 396:include/linux/skbuff.h ****  */
 397:include/linux/skbuff.h **** static inline int skb_header_cloned(const struct sk_buff *skb)
 398:include/linux/skbuff.h **** {
 399:include/linux/skbuff.h **** 	int dataref;
 400:include/linux/skbuff.h **** 
 401:include/linux/skbuff.h **** 	if (!skb->cloned)
 402:include/linux/skbuff.h **** 		return 0;
 403:include/linux/skbuff.h **** 
 404:include/linux/skbuff.h **** 	dataref = atomic_read(&skb_shinfo(skb)->dataref);
 405:include/linux/skbuff.h **** 	dataref = (dataref & SKB_DATAREF_MASK) - (dataref >> SKB_DATAREF_SHIFT);
 406:include/linux/skbuff.h **** 	return dataref != 1;
 407:include/linux/skbuff.h **** }
 408:include/linux/skbuff.h **** 
 409:include/linux/skbuff.h **** /**
 410:include/linux/skbuff.h ****  *	skb_header_release - release reference to header
 411:include/linux/skbuff.h ****  *	@skb: buffer to operate on
 412:include/linux/skbuff.h ****  *
 413:include/linux/skbuff.h ****  *	Drop a reference to the header part of the buffer.  This is done
 414:include/linux/skbuff.h ****  *	by acquiring a payload reference.  You must not read from the header
 415:include/linux/skbuff.h ****  *	part of skb->data after this.
 416:include/linux/skbuff.h ****  */
 417:include/linux/skbuff.h **** static inline void skb_header_release(struct sk_buff *skb)
 418:include/linux/skbuff.h **** {
 419:include/linux/skbuff.h **** 	BUG_ON(skb->nohdr);
 420:include/linux/skbuff.h **** 	skb->nohdr = 1;
 421:include/linux/skbuff.h **** 	atomic_add(1 << SKB_DATAREF_SHIFT, &skb_shinfo(skb)->dataref);
 422:include/linux/skbuff.h **** }
 423:include/linux/skbuff.h **** 
 424:include/linux/skbuff.h **** /**
 425:include/linux/skbuff.h ****  *	skb_shared - is the buffer shared
 426:include/linux/skbuff.h ****  *	@skb: buffer to check
 427:include/linux/skbuff.h ****  *
 428:include/linux/skbuff.h ****  *	Returns true if more than one person has a reference to this
 429:include/linux/skbuff.h ****  *	buffer.
 430:include/linux/skbuff.h ****  */
 431:include/linux/skbuff.h **** static inline int skb_shared(const struct sk_buff *skb)
 432:include/linux/skbuff.h **** {
 433:include/linux/skbuff.h **** 	return atomic_read(&skb->users) != 1;
 434:include/linux/skbuff.h **** }
 435:include/linux/skbuff.h **** 
 436:include/linux/skbuff.h **** /**
 437:include/linux/skbuff.h ****  *	skb_share_check - check if buffer is shared and if so clone it
GAS LISTING  			page 33


 438:include/linux/skbuff.h ****  *	@skb: buffer to check
 439:include/linux/skbuff.h ****  *	@pri: priority for memory allocation
 440:include/linux/skbuff.h ****  *
 441:include/linux/skbuff.h ****  *	If the buffer is shared the buffer is cloned and the old copy
 442:include/linux/skbuff.h ****  *	drops a reference. A new clone with a single reference is returned.
 443:include/linux/skbuff.h ****  *	If the buffer is not shared the original buffer is returned. When
 444:include/linux/skbuff.h ****  *	being called from interrupt status or with spinlocks held pri must
 445:include/linux/skbuff.h ****  *	be GFP_ATOMIC.
 446:include/linux/skbuff.h ****  *
 447:include/linux/skbuff.h ****  *	NULL is returned on a memory allocation failure.
 448:include/linux/skbuff.h ****  */
 449:include/linux/skbuff.h **** static inline struct sk_buff *skb_share_check(struct sk_buff *skb, int pri)
 450:include/linux/skbuff.h **** {
 451:include/linux/skbuff.h **** 	might_sleep_if(pri & __GFP_WAIT);
 452:include/linux/skbuff.h **** 	if (skb_shared(skb)) {
 453:include/linux/skbuff.h **** 		struct sk_buff *nskb = skb_clone(skb, pri);
 454:include/linux/skbuff.h **** 		kfree_skb(skb);
 455:include/linux/skbuff.h **** 		skb = nskb;
 456:include/linux/skbuff.h **** 	}
 457:include/linux/skbuff.h **** 	return skb;
 458:include/linux/skbuff.h **** }
 459:include/linux/skbuff.h **** 
 460:include/linux/skbuff.h **** /*
 461:include/linux/skbuff.h ****  *	Copy shared buffers into a new sk_buff. We effectively do COW on
 462:include/linux/skbuff.h ****  *	packets to handle cases where we have a local reader and forward
 463:include/linux/skbuff.h ****  *	and a couple of other messy ones. The normal one is tcpdumping
 464:include/linux/skbuff.h ****  *	a packet thats being forwarded.
 465:include/linux/skbuff.h ****  */
 466:include/linux/skbuff.h **** 
 467:include/linux/skbuff.h **** /**
 468:include/linux/skbuff.h ****  *	skb_unshare - make a copy of a shared buffer
 469:include/linux/skbuff.h ****  *	@skb: buffer to check
 470:include/linux/skbuff.h ****  *	@pri: priority for memory allocation
 471:include/linux/skbuff.h ****  *
 472:include/linux/skbuff.h ****  *	If the socket buffer is a clone then this function creates a new
 473:include/linux/skbuff.h ****  *	copy of the data, drops a reference count on the old copy and returns
 474:include/linux/skbuff.h ****  *	the new copy with the reference count at 1. If the buffer is not a clone
 475:include/linux/skbuff.h ****  *	the original buffer is returned. When called with a spinlock held or
 476:include/linux/skbuff.h ****  *	from interrupt state @pri must be %GFP_ATOMIC
 477:include/linux/skbuff.h ****  *
 478:include/linux/skbuff.h ****  *	%NULL is returned on a memory allocation failure.
 479:include/linux/skbuff.h ****  */
 480:include/linux/skbuff.h **** static inline struct sk_buff *skb_unshare(struct sk_buff *skb, int pri)
 481:include/linux/skbuff.h **** {
 482:include/linux/skbuff.h **** 	might_sleep_if(pri & __GFP_WAIT);
 483:include/linux/skbuff.h **** 	if (skb_cloned(skb)) {
 484:include/linux/skbuff.h **** 		struct sk_buff *nskb = skb_copy(skb, pri);
 485:include/linux/skbuff.h **** 		kfree_skb(skb);	/* Free our shared copy */
 486:include/linux/skbuff.h **** 		skb = nskb;
 487:include/linux/skbuff.h **** 	}
 488:include/linux/skbuff.h **** 	return skb;
 489:include/linux/skbuff.h **** }
 490:include/linux/skbuff.h **** 
 491:include/linux/skbuff.h **** /**
 492:include/linux/skbuff.h ****  *	skb_peek
 493:include/linux/skbuff.h ****  *	@list_: list to peek at
 494:include/linux/skbuff.h ****  *
GAS LISTING  			page 34


 495:include/linux/skbuff.h ****  *	Peek an &sk_buff. Unlike most other operations you _MUST_
 496:include/linux/skbuff.h ****  *	be careful with this one. A peek leaves the buffer on the
 497:include/linux/skbuff.h ****  *	list and someone else may run off with it. You must hold
 498:include/linux/skbuff.h ****  *	the appropriate locks or have a private queue to do this.
 499:include/linux/skbuff.h ****  *
 500:include/linux/skbuff.h ****  *	Returns %NULL for an empty list or a pointer to the head element.
 501:include/linux/skbuff.h ****  *	The reference count is not incremented and the reference is therefore
 502:include/linux/skbuff.h ****  *	volatile. Use with caution.
 503:include/linux/skbuff.h ****  */
 504:include/linux/skbuff.h **** static inline struct sk_buff *skb_peek(struct sk_buff_head *list_)
 505:include/linux/skbuff.h **** {
 506:include/linux/skbuff.h **** 	struct sk_buff *list = ((struct sk_buff *)list_)->next;
 507:include/linux/skbuff.h **** 	if (list == (struct sk_buff *)list_)
 508:include/linux/skbuff.h **** 		list = NULL;
 509:include/linux/skbuff.h **** 	return list;
 510:include/linux/skbuff.h **** }
 511:include/linux/skbuff.h **** 
 512:include/linux/skbuff.h **** /**
 513:include/linux/skbuff.h ****  *	skb_peek_tail
 514:include/linux/skbuff.h ****  *	@list_: list to peek at
 515:include/linux/skbuff.h ****  *
 516:include/linux/skbuff.h ****  *	Peek an &sk_buff. Unlike most other operations you _MUST_
 517:include/linux/skbuff.h ****  *	be careful with this one. A peek leaves the buffer on the
 518:include/linux/skbuff.h ****  *	list and someone else may run off with it. You must hold
 519:include/linux/skbuff.h ****  *	the appropriate locks or have a private queue to do this.
 520:include/linux/skbuff.h ****  *
 521:include/linux/skbuff.h ****  *	Returns %NULL for an empty list or a pointer to the tail element.
 522:include/linux/skbuff.h ****  *	The reference count is not incremented and the reference is therefore
 523:include/linux/skbuff.h ****  *	volatile. Use with caution.
 524:include/linux/skbuff.h ****  */
 525:include/linux/skbuff.h **** static inline struct sk_buff *skb_peek_tail(struct sk_buff_head *list_)
 526:include/linux/skbuff.h **** {
 527:include/linux/skbuff.h **** 	struct sk_buff *list = ((struct sk_buff *)list_)->prev;
 528:include/linux/skbuff.h **** 	if (list == (struct sk_buff *)list_)
 529:include/linux/skbuff.h **** 		list = NULL;
 530:include/linux/skbuff.h **** 	return list;
 531:include/linux/skbuff.h **** }
 532:include/linux/skbuff.h **** 
 533:include/linux/skbuff.h **** /**
 534:include/linux/skbuff.h ****  *	skb_queue_len	- get queue length
 535:include/linux/skbuff.h ****  *	@list_: list to measure
 536:include/linux/skbuff.h ****  *
 537:include/linux/skbuff.h ****  *	Return the length of an &sk_buff queue.
 538:include/linux/skbuff.h ****  */
 539:include/linux/skbuff.h **** static inline __u32 skb_queue_len(const struct sk_buff_head *list_)
 540:include/linux/skbuff.h **** {
 541:include/linux/skbuff.h **** 	return list_->qlen;
 542:include/linux/skbuff.h **** }
 543:include/linux/skbuff.h **** 
 544:include/linux/skbuff.h **** static inline void skb_queue_head_init(struct sk_buff_head *list)
 545:include/linux/skbuff.h **** {
 546:include/linux/skbuff.h **** 	spin_lock_init(&list->lock);
 547:include/linux/skbuff.h **** 	list->prev = list->next = (struct sk_buff *)list;
 548:include/linux/skbuff.h **** 	list->qlen = 0;
 549:include/linux/skbuff.h **** }
 550:include/linux/skbuff.h **** 
 551:include/linux/skbuff.h **** /*
GAS LISTING  			page 35


 552:include/linux/skbuff.h ****  *	Insert an sk_buff at the start of a list.
 553:include/linux/skbuff.h ****  *
 554:include/linux/skbuff.h ****  *	The "__skb_xxxx()" functions are the non-atomic ones that
 555:include/linux/skbuff.h ****  *	can only be called with interrupts disabled.
 556:include/linux/skbuff.h ****  */
 557:include/linux/skbuff.h **** 
 558:include/linux/skbuff.h **** /**
 559:include/linux/skbuff.h ****  *	__skb_queue_head - queue a buffer at the list head
 560:include/linux/skbuff.h ****  *	@list: list to use
 561:include/linux/skbuff.h ****  *	@newsk: buffer to queue
 562:include/linux/skbuff.h ****  *
 563:include/linux/skbuff.h ****  *	Queue a buffer at the start of a list. This function takes no locks
 564:include/linux/skbuff.h ****  *	and you must therefore hold required locks before calling it.
 565:include/linux/skbuff.h ****  *
 566:include/linux/skbuff.h ****  *	A buffer cannot be placed on two lists at the same time.
 567:include/linux/skbuff.h ****  */
 568:include/linux/skbuff.h **** extern void skb_queue_head(struct sk_buff_head *list, struct sk_buff *newsk);
 569:include/linux/skbuff.h **** static inline void __skb_queue_head(struct sk_buff_head *list,
 570:include/linux/skbuff.h **** 				    struct sk_buff *newsk)
 571:include/linux/skbuff.h **** {
 572:include/linux/skbuff.h **** 	struct sk_buff *prev, *next;
 573:include/linux/skbuff.h **** 
 574:include/linux/skbuff.h **** 	newsk->list = list;
 575:include/linux/skbuff.h **** 	list->qlen++;
 576:include/linux/skbuff.h **** 	prev = (struct sk_buff *)list;
 577:include/linux/skbuff.h **** 	next = prev->next;
 578:include/linux/skbuff.h **** 	newsk->next = next;
 579:include/linux/skbuff.h **** 	newsk->prev = prev;
 580:include/linux/skbuff.h **** 	next->prev  = prev->next = newsk;
 581:include/linux/skbuff.h **** }
 582:include/linux/skbuff.h **** 
 583:include/linux/skbuff.h **** /**
 584:include/linux/skbuff.h ****  *	__skb_queue_tail - queue a buffer at the list tail
 585:include/linux/skbuff.h ****  *	@list: list to use
 586:include/linux/skbuff.h ****  *	@newsk: buffer to queue
 587:include/linux/skbuff.h ****  *
 588:include/linux/skbuff.h ****  *	Queue a buffer at the end of a list. This function takes no locks
 589:include/linux/skbuff.h ****  *	and you must therefore hold required locks before calling it.
 590:include/linux/skbuff.h ****  *
 591:include/linux/skbuff.h ****  *	A buffer cannot be placed on two lists at the same time.
 592:include/linux/skbuff.h ****  */
 593:include/linux/skbuff.h **** extern void skb_queue_tail(struct sk_buff_head *list, struct sk_buff *newsk);
 594:include/linux/skbuff.h **** static inline void __skb_queue_tail(struct sk_buff_head *list,
 595:include/linux/skbuff.h **** 				   struct sk_buff *newsk)
 596:include/linux/skbuff.h **** {
 597:include/linux/skbuff.h **** 	struct sk_buff *prev, *next;
 598:include/linux/skbuff.h **** 
 599:include/linux/skbuff.h **** 	newsk->list = list;
 600:include/linux/skbuff.h **** 	list->qlen++;
 601:include/linux/skbuff.h **** 	next = (struct sk_buff *)list;
 602:include/linux/skbuff.h **** 	prev = next->prev;
 603:include/linux/skbuff.h **** 	newsk->next = next;
 604:include/linux/skbuff.h **** 	newsk->prev = prev;
 605:include/linux/skbuff.h **** 	next->prev  = prev->next = newsk;
 606:include/linux/skbuff.h **** }
 607:include/linux/skbuff.h **** 
 608:include/linux/skbuff.h **** 
GAS LISTING  			page 36


 609:include/linux/skbuff.h **** /**
 610:include/linux/skbuff.h ****  *	__skb_dequeue - remove from the head of the queue
 611:include/linux/skbuff.h ****  *	@list: list to dequeue from
 612:include/linux/skbuff.h ****  *
 613:include/linux/skbuff.h ****  *	Remove the head of the list. This function does not take any locks
 614:include/linux/skbuff.h ****  *	so must be used with appropriate locks held only. The head item is
 615:include/linux/skbuff.h ****  *	returned or %NULL if the list is empty.
 616:include/linux/skbuff.h ****  */
 617:include/linux/skbuff.h **** extern struct sk_buff *skb_dequeue(struct sk_buff_head *list);
 618:include/linux/skbuff.h **** static inline struct sk_buff *__skb_dequeue(struct sk_buff_head *list)
 619:include/linux/skbuff.h **** {
 620:include/linux/skbuff.h **** 	struct sk_buff *next, *prev, *result;
 621:include/linux/skbuff.h **** 
 622:include/linux/skbuff.h **** 	prev = (struct sk_buff *) list;
 623:include/linux/skbuff.h **** 	next = prev->next;
 624:include/linux/skbuff.h **** 	result = NULL;
 625:include/linux/skbuff.h **** 	if (next != prev) {
 626:include/linux/skbuff.h **** 		result	     = next;
 627:include/linux/skbuff.h **** 		next	     = next->next;
 628:include/linux/skbuff.h **** 		list->qlen--;
 629:include/linux/skbuff.h **** 		next->prev   = prev;
 630:include/linux/skbuff.h **** 		prev->next   = next;
 631:include/linux/skbuff.h **** 		result->next = result->prev = NULL;
 632:include/linux/skbuff.h **** 		result->list = NULL;
 633:include/linux/skbuff.h **** 	}
 634:include/linux/skbuff.h **** 	return result;
 635:include/linux/skbuff.h **** }
 636:include/linux/skbuff.h **** 
 637:include/linux/skbuff.h **** 
 638:include/linux/skbuff.h **** /*
 639:include/linux/skbuff.h ****  *	Insert a packet on a list.
 640:include/linux/skbuff.h ****  */
 641:include/linux/skbuff.h **** extern void        skb_insert(struct sk_buff *old, struct sk_buff *newsk);
 642:include/linux/skbuff.h **** static inline void __skb_insert(struct sk_buff *newsk,
 643:include/linux/skbuff.h **** 				struct sk_buff *prev, struct sk_buff *next,
 644:include/linux/skbuff.h **** 				struct sk_buff_head *list)
 645:include/linux/skbuff.h **** {
 646:include/linux/skbuff.h **** 	newsk->next = next;
 647:include/linux/skbuff.h **** 	newsk->prev = prev;
 648:include/linux/skbuff.h **** 	next->prev  = prev->next = newsk;
 649:include/linux/skbuff.h **** 	newsk->list = list;
 650:include/linux/skbuff.h **** 	list->qlen++;
 651:include/linux/skbuff.h **** }
 652:include/linux/skbuff.h **** 
 653:include/linux/skbuff.h **** /*
 654:include/linux/skbuff.h ****  *	Place a packet after a given packet in a list.
 655:include/linux/skbuff.h ****  */
 656:include/linux/skbuff.h **** extern void	   skb_append(struct sk_buff *old, struct sk_buff *newsk);
 657:include/linux/skbuff.h **** static inline void __skb_append(struct sk_buff *old, struct sk_buff *newsk)
 658:include/linux/skbuff.h **** {
 659:include/linux/skbuff.h **** 	__skb_insert(newsk, old, old->next, old->list);
 660:include/linux/skbuff.h **** }
 661:include/linux/skbuff.h **** 
 662:include/linux/skbuff.h **** /*
 663:include/linux/skbuff.h ****  * remove sk_buff from list. _Must_ be called atomically, and with
 664:include/linux/skbuff.h ****  * the list known..
 665:include/linux/skbuff.h ****  */
GAS LISTING  			page 37


 666:include/linux/skbuff.h **** extern void	   skb_unlink(struct sk_buff *skb);
 667:include/linux/skbuff.h **** static inline void __skb_unlink(struct sk_buff *skb, struct sk_buff_head *list)
 668:include/linux/skbuff.h **** {
 669:include/linux/skbuff.h **** 	struct sk_buff *next, *prev;
 670:include/linux/skbuff.h **** 
 671:include/linux/skbuff.h **** 	list->qlen--;
 672:include/linux/skbuff.h **** 	next	   = skb->next;
 673:include/linux/skbuff.h **** 	prev	   = skb->prev;
 674:include/linux/skbuff.h **** 	skb->next  = skb->prev = NULL;
 675:include/linux/skbuff.h **** 	skb->list  = NULL;
 676:include/linux/skbuff.h **** 	next->prev = prev;
 677:include/linux/skbuff.h **** 	prev->next = next;
 678:include/linux/skbuff.h **** }
 679:include/linux/skbuff.h **** 
 680:include/linux/skbuff.h **** 
 681:include/linux/skbuff.h **** /* XXX: more streamlined implementation */
 682:include/linux/skbuff.h **** 
 683:include/linux/skbuff.h **** /**
 684:include/linux/skbuff.h ****  *	__skb_dequeue_tail - remove from the tail of the queue
 685:include/linux/skbuff.h ****  *	@list: list to dequeue from
 686:include/linux/skbuff.h ****  *
 687:include/linux/skbuff.h ****  *	Remove the tail of the list. This function does not take any locks
 688:include/linux/skbuff.h ****  *	so must be used with appropriate locks held only. The tail item is
 689:include/linux/skbuff.h ****  *	returned or %NULL if the list is empty.
 690:include/linux/skbuff.h ****  */
 691:include/linux/skbuff.h **** extern struct sk_buff *skb_dequeue_tail(struct sk_buff_head *list);
 692:include/linux/skbuff.h **** static inline struct sk_buff *__skb_dequeue_tail(struct sk_buff_head *list)
 693:include/linux/skbuff.h **** {
 694:include/linux/skbuff.h **** 	struct sk_buff *skb = skb_peek_tail(list);
 695:include/linux/skbuff.h **** 	if (skb)
 696:include/linux/skbuff.h **** 		__skb_unlink(skb, list);
 697:include/linux/skbuff.h **** 	return skb;
 698:include/linux/skbuff.h **** }
 699:include/linux/skbuff.h **** 
 700:include/linux/skbuff.h **** 
 701:include/linux/skbuff.h **** static inline int skb_is_nonlinear(const struct sk_buff *skb)
 702:include/linux/skbuff.h **** {
 703:include/linux/skbuff.h **** 	return skb->data_len;
 704:include/linux/skbuff.h **** }
 705:include/linux/skbuff.h **** 
 706:include/linux/skbuff.h **** static inline unsigned int skb_headlen(const struct sk_buff *skb)
 707:include/linux/skbuff.h **** {
 708:include/linux/skbuff.h **** 	return skb->len - skb->data_len;
 709:include/linux/skbuff.h **** }
 710:include/linux/skbuff.h **** 
 711:include/linux/skbuff.h **** static inline int skb_pagelen(const struct sk_buff *skb)
 712:include/linux/skbuff.h **** {
 713:include/linux/skbuff.h **** 	int i, len = 0;
 714:include/linux/skbuff.h **** 
 715:include/linux/skbuff.h **** 	for (i = (int)skb_shinfo(skb)->nr_frags - 1; i >= 0; i--)
 716:include/linux/skbuff.h **** 		len += skb_shinfo(skb)->frags[i].size;
 717:include/linux/skbuff.h **** 	return len + skb_headlen(skb);
 718:include/linux/skbuff.h **** }
 719:include/linux/skbuff.h **** 
 720:include/linux/skbuff.h **** static inline void skb_fill_page_desc(struct sk_buff *skb, int i,
 721:include/linux/skbuff.h **** 				      struct page *page, int off, int size)
 722:include/linux/skbuff.h **** {
GAS LISTING  			page 38


 723:include/linux/skbuff.h **** 	skb_frag_t *frag = &skb_shinfo(skb)->frags[i];
 724:include/linux/skbuff.h **** 
 725:include/linux/skbuff.h **** 	frag->page		  = page;
 726:include/linux/skbuff.h **** 	frag->page_offset	  = off;
 727:include/linux/skbuff.h **** 	frag->size		  = size;
 728:include/linux/skbuff.h **** 	skb_shinfo(skb)->nr_frags = i + 1;
 729:include/linux/skbuff.h **** }
 730:include/linux/skbuff.h **** 
 731:include/linux/skbuff.h **** #define SKB_PAGE_ASSERT(skb) 	BUG_ON(skb_shinfo(skb)->nr_frags)
 732:include/linux/skbuff.h **** #define SKB_FRAG_ASSERT(skb) 	BUG_ON(skb_shinfo(skb)->frag_list)
 733:include/linux/skbuff.h **** #define SKB_LINEAR_ASSERT(skb)  BUG_ON(skb_is_nonlinear(skb))
 734:include/linux/skbuff.h **** 
 735:include/linux/skbuff.h **** /*
 736:include/linux/skbuff.h ****  *	Add data to an sk_buff
 737:include/linux/skbuff.h ****  */
 738:include/linux/skbuff.h **** static inline unsigned char *__skb_put(struct sk_buff *skb, unsigned int len)
 739:include/linux/skbuff.h **** {
 740:include/linux/skbuff.h **** 	unsigned char *tmp = skb->tail;
 741:include/linux/skbuff.h **** 	SKB_LINEAR_ASSERT(skb);
 742:include/linux/skbuff.h **** 	skb->tail += len;
 743:include/linux/skbuff.h **** 	skb->len  += len;
 744:include/linux/skbuff.h **** 	return tmp;
 745:include/linux/skbuff.h **** }
 746:include/linux/skbuff.h **** 
 747:include/linux/skbuff.h **** /**
 748:include/linux/skbuff.h ****  *	skb_put - add data to a buffer
 749:include/linux/skbuff.h ****  *	@skb: buffer to use
 750:include/linux/skbuff.h ****  *	@len: amount of data to add
 751:include/linux/skbuff.h ****  *
 752:include/linux/skbuff.h ****  *	This function extends the used data area of the buffer. If this would
 753:include/linux/skbuff.h ****  *	exceed the total buffer size the kernel will panic. A pointer to the
 754:include/linux/skbuff.h ****  *	first byte of the extra data is returned.
 755:include/linux/skbuff.h ****  */
 756:include/linux/skbuff.h **** static inline unsigned char *skb_put(struct sk_buff *skb, unsigned int len)
 757:include/linux/skbuff.h **** {
 758:include/linux/skbuff.h **** 	unsigned char *tmp = skb->tail;
 759:include/linux/skbuff.h **** 	SKB_LINEAR_ASSERT(skb);
 760:include/linux/skbuff.h **** 	skb->tail += len;
 761:include/linux/skbuff.h **** 	skb->len  += len;
 762:include/linux/skbuff.h **** 	if (unlikely(skb->tail>skb->end))
 763:include/linux/skbuff.h **** 		skb_over_panic(skb, len, current_text_addr());
 764:include/linux/skbuff.h **** 	return tmp;
 765:include/linux/skbuff.h **** }
 766:include/linux/skbuff.h **** 
 767:include/linux/skbuff.h **** static inline unsigned char *__skb_push(struct sk_buff *skb, unsigned int len)
 768:include/linux/skbuff.h **** {
 769:include/linux/skbuff.h **** 	skb->data -= len;
 770:include/linux/skbuff.h **** 	skb->len  += len;
 771:include/linux/skbuff.h **** 	return skb->data;
 772:include/linux/skbuff.h **** }
 773:include/linux/skbuff.h **** 
 774:include/linux/skbuff.h **** /**
 775:include/linux/skbuff.h ****  *	skb_push - add data to the start of a buffer
 776:include/linux/skbuff.h ****  *	@skb: buffer to use
 777:include/linux/skbuff.h ****  *	@len: amount of data to add
 778:include/linux/skbuff.h ****  *
 779:include/linux/skbuff.h ****  *	This function extends the used data area of the buffer at the buffer
GAS LISTING  			page 39


 780:include/linux/skbuff.h ****  *	start. If this would exceed the total buffer headroom the kernel will
 781:include/linux/skbuff.h ****  *	panic. A pointer to the first byte of the extra data is returned.
 782:include/linux/skbuff.h ****  */
 783:include/linux/skbuff.h **** static inline unsigned char *skb_push(struct sk_buff *skb, unsigned int len)
 784:include/linux/skbuff.h **** {
 785:include/linux/skbuff.h **** 	skb->data -= len;
 786:include/linux/skbuff.h **** 	skb->len  += len;
 787:include/linux/skbuff.h **** 	if (unlikely(skb->data<skb->head))
 788:include/linux/skbuff.h **** 		skb_under_panic(skb, len, current_text_addr());
 789:include/linux/skbuff.h **** 	return skb->data;
 790:include/linux/skbuff.h **** }
 791:include/linux/skbuff.h **** 
 792:include/linux/skbuff.h **** static inline unsigned char *__skb_pull(struct sk_buff *skb, unsigned int len)
 793:include/linux/skbuff.h **** {
 794:include/linux/skbuff.h **** 	skb->len -= len;
 795:include/linux/skbuff.h **** 	BUG_ON(skb->len < skb->data_len);
 796:include/linux/skbuff.h **** 	return skb->data += len;
 797:include/linux/skbuff.h **** }
 798:include/linux/skbuff.h **** 
 799:include/linux/skbuff.h **** /**
 800:include/linux/skbuff.h ****  *	skb_pull - remove data from the start of a buffer
 801:include/linux/skbuff.h ****  *	@skb: buffer to use
 802:include/linux/skbuff.h ****  *	@len: amount of data to remove
 803:include/linux/skbuff.h ****  *
 804:include/linux/skbuff.h ****  *	This function removes data from the start of a buffer, returning
 805:include/linux/skbuff.h ****  *	the memory to the headroom. A pointer to the next data in the buffer
 806:include/linux/skbuff.h ****  *	is returned. Once the data has been pulled future pushes will overwrite
 807:include/linux/skbuff.h ****  *	the old data.
 808:include/linux/skbuff.h ****  */
 809:include/linux/skbuff.h **** static inline unsigned char *skb_pull(struct sk_buff *skb, unsigned int len)
 810:include/linux/skbuff.h **** {
 811:include/linux/skbuff.h **** 	return unlikely(len > skb->len) ? NULL : __skb_pull(skb, len);
  94              	.loc 3 811 0
  95 006b 8B4360   	movl 96(%ebx),%eax
  96 006e 39C1     	cmpl %eax,%ecx
  97 0070 7715     	ja .L17
  98              	.LBB9:
  99              	.LBB10:
 100              	.loc 3 794 0
 101 0072 29C8     	subl %ecx,%eax
 102              	.loc 3 795 0
 103 0074 3B4364   	cmpl 100(%ebx),%eax
 104              	.loc 3 794 0
 105 0077 894360   	movl %eax,96(%ebx)
 106              	.loc 3 795 0
 107 007a 7302     	jae .L14
 108              	
 109 007c 0F0B     	ud2
 110              	
 111              	
 112              	.L14:
 113 007e 8D040F   	leal (%edi,%ecx),%eax
 114 0081 8983A800 	movl %eax,168(%ebx)
 114      0000
 115              	.L17:
 116              	.LBE10:
 117              	.LBE9:
GAS LISTING  			page 40


 118              	.LBE8:
 119              	.LBE5:
  47:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	skb_pull(skb, ieee80211_get_hdrlen(fc));
  48:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	skb->pkt_type = PACKET_OTHERHOST;
 120              	.loc 1 48 0
 121 0087 C6437203 	movb $3,114(%ebx)
  49:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	skb->protocol = __constant_htons(ETH_P_80211_RAW);
 122              	.loc 1 49 0
 123 008b 66C74378 	movw $6400,120(%ebx)
 123      0019
 124              	.LBB11:
 125              	.file 4 "include/asm/string.h"
   1:include/asm/string.h **** #ifndef _I386_STRING_H_
   2:include/asm/string.h **** #define _I386_STRING_H_
   3:include/asm/string.h **** 
   4:include/asm/string.h **** #ifdef __KERNEL__
   5:include/asm/string.h **** #include <linux/config.h>
   6:include/asm/string.h **** /*
   7:include/asm/string.h ****  * On a 486 or Pentium, we are better off not using the
   8:include/asm/string.h ****  * byte string operations. But on a 386 or a PPro the
   9:include/asm/string.h ****  * byte string ops are faster than doing it by hand
  10:include/asm/string.h ****  * (MUCH faster on a Pentium).
  11:include/asm/string.h ****  */
  12:include/asm/string.h **** 
  13:include/asm/string.h **** /*
  14:include/asm/string.h ****  * This string-include defines all string functions as inline
  15:include/asm/string.h ****  * functions. Use gcc. It also assumes ds=es=data space, this should be
  16:include/asm/string.h ****  * normal. Most of the string-functions are rather heavily hand-optimized,
  17:include/asm/string.h ****  * see especially strsep,strstr,str[c]spn. They should work, but are not
  18:include/asm/string.h ****  * very easy to understand. Everything is done entirely within the register
  19:include/asm/string.h ****  * set, making the functions fast and clean. String instructions have been
  20:include/asm/string.h ****  * used through-out, making for "slightly" unclear code :-)
  21:include/asm/string.h ****  *
  22:include/asm/string.h ****  *		NO Copyright (C) 1991, 1992 Linus Torvalds,
  23:include/asm/string.h ****  *		consider these trivial functions to be PD.
  24:include/asm/string.h ****  */
  25:include/asm/string.h **** 
  26:include/asm/string.h **** /* AK: in fact I bet it would be better to move this stuff all out of line.
  27:include/asm/string.h ****  */
  28:include/asm/string.h **** 
  29:include/asm/string.h **** #define __HAVE_ARCH_STRCPY
  30:include/asm/string.h **** static inline char * strcpy(char * dest,const char *src)
  31:include/asm/string.h **** {
  32:include/asm/string.h **** int d0, d1, d2;
  33:include/asm/string.h **** __asm__ __volatile__(
  34:include/asm/string.h **** 	"1:\tlodsb\n\t"
  35:include/asm/string.h **** 	"stosb\n\t"
  36:include/asm/string.h **** 	"testb %%al,%%al\n\t"
  37:include/asm/string.h **** 	"jne 1b"
  38:include/asm/string.h **** 	: "=&S" (d0), "=&D" (d1), "=&a" (d2)
  39:include/asm/string.h **** 	:"0" (src),"1" (dest) : "memory");
  40:include/asm/string.h **** return dest;
  41:include/asm/string.h **** }
  42:include/asm/string.h **** 
  43:include/asm/string.h **** #define __HAVE_ARCH_STRNCPY
  44:include/asm/string.h **** static inline char * strncpy(char * dest,const char *src,size_t count)
  45:include/asm/string.h **** {
GAS LISTING  			page 41


  46:include/asm/string.h **** int d0, d1, d2, d3;
  47:include/asm/string.h **** __asm__ __volatile__(
  48:include/asm/string.h **** 	"1:\tdecl %2\n\t"
  49:include/asm/string.h **** 	"js 2f\n\t"
  50:include/asm/string.h **** 	"lodsb\n\t"
  51:include/asm/string.h **** 	"stosb\n\t"
  52:include/asm/string.h **** 	"testb %%al,%%al\n\t"
  53:include/asm/string.h **** 	"jne 1b\n\t"
  54:include/asm/string.h **** 	"rep\n\t"
  55:include/asm/string.h **** 	"stosb\n"
  56:include/asm/string.h **** 	"2:"
  57:include/asm/string.h **** 	: "=&S" (d0), "=&D" (d1), "=&c" (d2), "=&a" (d3)
  58:include/asm/string.h **** 	:"0" (src),"1" (dest),"2" (count) : "memory");
  59:include/asm/string.h **** return dest;
  60:include/asm/string.h **** }
  61:include/asm/string.h **** 
  62:include/asm/string.h **** #define __HAVE_ARCH_STRCAT
  63:include/asm/string.h **** static inline char * strcat(char * dest,const char * src)
  64:include/asm/string.h **** {
  65:include/asm/string.h **** int d0, d1, d2, d3;
  66:include/asm/string.h **** __asm__ __volatile__(
  67:include/asm/string.h **** 	"repne\n\t"
  68:include/asm/string.h **** 	"scasb\n\t"
  69:include/asm/string.h **** 	"decl %1\n"
  70:include/asm/string.h **** 	"1:\tlodsb\n\t"
  71:include/asm/string.h **** 	"stosb\n\t"
  72:include/asm/string.h **** 	"testb %%al,%%al\n\t"
  73:include/asm/string.h **** 	"jne 1b"
  74:include/asm/string.h **** 	: "=&S" (d0), "=&D" (d1), "=&a" (d2), "=&c" (d3)
  75:include/asm/string.h **** 	: "0" (src), "1" (dest), "2" (0), "3" (0xffffffffu):"memory");
  76:include/asm/string.h **** return dest;
  77:include/asm/string.h **** }
  78:include/asm/string.h **** 
  79:include/asm/string.h **** #define __HAVE_ARCH_STRNCAT
  80:include/asm/string.h **** static inline char * strncat(char * dest,const char * src,size_t count)
  81:include/asm/string.h **** {
  82:include/asm/string.h **** int d0, d1, d2, d3;
  83:include/asm/string.h **** __asm__ __volatile__(
  84:include/asm/string.h **** 	"repne\n\t"
  85:include/asm/string.h **** 	"scasb\n\t"
  86:include/asm/string.h **** 	"decl %1\n\t"
  87:include/asm/string.h **** 	"movl %8,%3\n"
  88:include/asm/string.h **** 	"1:\tdecl %3\n\t"
  89:include/asm/string.h **** 	"js 2f\n\t"
  90:include/asm/string.h **** 	"lodsb\n\t"
  91:include/asm/string.h **** 	"stosb\n\t"
  92:include/asm/string.h **** 	"testb %%al,%%al\n\t"
  93:include/asm/string.h **** 	"jne 1b\n"
  94:include/asm/string.h **** 	"2:\txorl %2,%2\n\t"
  95:include/asm/string.h **** 	"stosb"
  96:include/asm/string.h **** 	: "=&S" (d0), "=&D" (d1), "=&a" (d2), "=&c" (d3)
  97:include/asm/string.h **** 	: "0" (src),"1" (dest),"2" (0),"3" (0xffffffffu), "g" (count)
  98:include/asm/string.h **** 	: "memory");
  99:include/asm/string.h **** return dest;
 100:include/asm/string.h **** }
 101:include/asm/string.h **** 
 102:include/asm/string.h **** #define __HAVE_ARCH_STRCMP
GAS LISTING  			page 42


 103:include/asm/string.h **** static inline int strcmp(const char * cs,const char * ct)
 104:include/asm/string.h **** {
 105:include/asm/string.h **** int d0, d1;
 106:include/asm/string.h **** register int __res;
 107:include/asm/string.h **** __asm__ __volatile__(
 108:include/asm/string.h **** 	"1:\tlodsb\n\t"
 109:include/asm/string.h **** 	"scasb\n\t"
 110:include/asm/string.h **** 	"jne 2f\n\t"
 111:include/asm/string.h **** 	"testb %%al,%%al\n\t"
 112:include/asm/string.h **** 	"jne 1b\n\t"
 113:include/asm/string.h **** 	"xorl %%eax,%%eax\n\t"
 114:include/asm/string.h **** 	"jmp 3f\n"
 115:include/asm/string.h **** 	"2:\tsbbl %%eax,%%eax\n\t"
 116:include/asm/string.h **** 	"orb $1,%%al\n"
 117:include/asm/string.h **** 	"3:"
 118:include/asm/string.h **** 	:"=a" (__res), "=&S" (d0), "=&D" (d1)
 119:include/asm/string.h **** 	:"1" (cs),"2" (ct)
 120:include/asm/string.h **** 	:"memory");
 121:include/asm/string.h **** return __res;
 122:include/asm/string.h **** }
 123:include/asm/string.h **** 
 124:include/asm/string.h **** #define __HAVE_ARCH_STRNCMP
 125:include/asm/string.h **** static inline int strncmp(const char * cs,const char * ct,size_t count)
 126:include/asm/string.h **** {
 127:include/asm/string.h **** register int __res;
 128:include/asm/string.h **** int d0, d1, d2;
 129:include/asm/string.h **** __asm__ __volatile__(
 130:include/asm/string.h **** 	"1:\tdecl %3\n\t"
 131:include/asm/string.h **** 	"js 2f\n\t"
 132:include/asm/string.h **** 	"lodsb\n\t"
 133:include/asm/string.h **** 	"scasb\n\t"
 134:include/asm/string.h **** 	"jne 3f\n\t"
 135:include/asm/string.h **** 	"testb %%al,%%al\n\t"
 136:include/asm/string.h **** 	"jne 1b\n"
 137:include/asm/string.h **** 	"2:\txorl %%eax,%%eax\n\t"
 138:include/asm/string.h **** 	"jmp 4f\n"
 139:include/asm/string.h **** 	"3:\tsbbl %%eax,%%eax\n\t"
 140:include/asm/string.h **** 	"orb $1,%%al\n"
 141:include/asm/string.h **** 	"4:"
 142:include/asm/string.h **** 	:"=a" (__res), "=&S" (d0), "=&D" (d1), "=&c" (d2)
 143:include/asm/string.h **** 	:"1" (cs),"2" (ct),"3" (count)
 144:include/asm/string.h **** 	:"memory");
 145:include/asm/string.h **** return __res;
 146:include/asm/string.h **** }
 147:include/asm/string.h **** 
 148:include/asm/string.h **** #define __HAVE_ARCH_STRCHR
 149:include/asm/string.h **** static inline char * strchr(const char * s, int c)
 150:include/asm/string.h **** {
 151:include/asm/string.h **** int d0;
 152:include/asm/string.h **** register char * __res;
 153:include/asm/string.h **** __asm__ __volatile__(
 154:include/asm/string.h **** 	"movb %%al,%%ah\n"
 155:include/asm/string.h **** 	"1:\tlodsb\n\t"
 156:include/asm/string.h **** 	"cmpb %%ah,%%al\n\t"
 157:include/asm/string.h **** 	"je 2f\n\t"
 158:include/asm/string.h **** 	"testb %%al,%%al\n\t"
 159:include/asm/string.h **** 	"jne 1b\n\t"
GAS LISTING  			page 43


 160:include/asm/string.h **** 	"movl $1,%1\n"
 161:include/asm/string.h **** 	"2:\tmovl %1,%0\n\t"
 162:include/asm/string.h **** 	"decl %0"
 163:include/asm/string.h **** 	:"=a" (__res), "=&S" (d0)
 164:include/asm/string.h **** 	:"1" (s),"0" (c)
 165:include/asm/string.h **** 	:"memory");
 166:include/asm/string.h **** return __res;
 167:include/asm/string.h **** }
 168:include/asm/string.h **** 
 169:include/asm/string.h **** #define __HAVE_ARCH_STRRCHR
 170:include/asm/string.h **** static inline char * strrchr(const char * s, int c)
 171:include/asm/string.h **** {
 172:include/asm/string.h **** int d0, d1;
 173:include/asm/string.h **** register char * __res;
 174:include/asm/string.h **** __asm__ __volatile__(
 175:include/asm/string.h **** 	"movb %%al,%%ah\n"
 176:include/asm/string.h **** 	"1:\tlodsb\n\t"
 177:include/asm/string.h **** 	"cmpb %%ah,%%al\n\t"
 178:include/asm/string.h **** 	"jne 2f\n\t"
 179:include/asm/string.h **** 	"leal -1(%%esi),%0\n"
 180:include/asm/string.h **** 	"2:\ttestb %%al,%%al\n\t"
 181:include/asm/string.h **** 	"jne 1b"
 182:include/asm/string.h **** 	:"=g" (__res), "=&S" (d0), "=&a" (d1)
 183:include/asm/string.h **** 	:"0" (0),"1" (s),"2" (c)
 184:include/asm/string.h **** 	:"memory");
 185:include/asm/string.h **** return __res;
 186:include/asm/string.h **** }
 187:include/asm/string.h **** 
 188:include/asm/string.h **** #define __HAVE_ARCH_STRLEN
 189:include/asm/string.h **** static inline size_t strlen(const char * s)
 190:include/asm/string.h **** {
 191:include/asm/string.h **** int d0;
 192:include/asm/string.h **** register int __res;
 193:include/asm/string.h **** __asm__ __volatile__(
 194:include/asm/string.h **** 	"repne\n\t"
 195:include/asm/string.h **** 	"scasb\n\t"
 196:include/asm/string.h **** 	"notl %0\n\t"
 197:include/asm/string.h **** 	"decl %0"
 198:include/asm/string.h **** 	:"=c" (__res), "=&D" (d0)
 199:include/asm/string.h **** 	:"1" (s),"a" (0), "0" (0xffffffffu)
 200:include/asm/string.h **** 	:"memory");
 201:include/asm/string.h **** return __res;
 202:include/asm/string.h **** }
 203:include/asm/string.h **** 
 204:include/asm/string.h **** static inline void * __memcpy(void * to, const void * from, size_t n)
 205:include/asm/string.h **** {
 206:include/asm/string.h **** int d0, d1, d2;
 207:include/asm/string.h **** __asm__ __volatile__(
 208:include/asm/string.h **** 	"rep ; movsl\n\t"
 209:include/asm/string.h **** 	"movl %4,%%ecx\n\t"
 210:include/asm/string.h **** 	"andl $3,%%ecx\n\t"
 211:include/asm/string.h **** #if 1	/* want to pay 2 byte penalty for a chance to skip microcoded rep? */
 212:include/asm/string.h **** 	"jz 1f\n\t"
 213:include/asm/string.h **** #endif
 214:include/asm/string.h **** 	"rep ; movsb\n\t"
 215:include/asm/string.h **** 	"1:"
 216:include/asm/string.h **** 	: "=&c" (d0), "=&D" (d1), "=&S" (d2)
GAS LISTING  			page 44


 217:include/asm/string.h **** 	: "0" (n/4), "g" (n), "1" ((long) to), "2" ((long) from)
 218:include/asm/string.h **** 	: "memory");
 219:include/asm/string.h **** return (to);
 220:include/asm/string.h **** }
 221:include/asm/string.h **** 
 222:include/asm/string.h **** /*
 223:include/asm/string.h ****  * This looks ugly, but the compiler can optimize it totally,
 224:include/asm/string.h ****  * as the count is constant.
 225:include/asm/string.h ****  */
 226:include/asm/string.h **** static inline void * __constant_memcpy(void * to, const void * from, size_t n)
 227:include/asm/string.h **** {
 228:include/asm/string.h **** 	long esi, edi;
 229:include/asm/string.h **** 	if (!n) return to;
 230:include/asm/string.h **** #if 1	/* want to do small copies with non-string ops? */
 231:include/asm/string.h **** 	switch (n) {
 232:include/asm/string.h **** 		case 1: *(char*)to = *(char*)from; return to;
 233:include/asm/string.h **** 		case 2: *(short*)to = *(short*)from; return to;
 234:include/asm/string.h **** 		case 4: *(int*)to = *(int*)from; return to;
 235:include/asm/string.h **** #if 1	/* including those doable with two moves? */
 236:include/asm/string.h **** 		case 3: *(short*)to = *(short*)from;
 237:include/asm/string.h **** 			*((char*)to+2) = *((char*)from+2); return to;
 238:include/asm/string.h **** 		case 5: *(int*)to = *(int*)from;
 239:include/asm/string.h **** 			*((char*)to+4) = *((char*)from+4); return to;
 240:include/asm/string.h **** 		case 6: *(int*)to = *(int*)from;
 241:include/asm/string.h **** 			*((short*)to+2) = *((short*)from+2); return to;
 242:include/asm/string.h **** 		case 8: *(int*)to = *(int*)from;
 243:include/asm/string.h **** 			*((int*)to+1) = *((int*)from+1); return to;
 244:include/asm/string.h **** #endif
 245:include/asm/string.h **** 	}
 246:include/asm/string.h **** #endif
 247:include/asm/string.h **** 	esi = (long) from;
 248:include/asm/string.h **** 	edi = (long) to;
 249:include/asm/string.h **** 	if (n >= 5*4) {
 250:include/asm/string.h **** 		/* large block: use rep prefix */
 251:include/asm/string.h **** 		int ecx;
 252:include/asm/string.h **** 		__asm__ __volatile__(
 253:include/asm/string.h **** 			"rep ; movsl"
 254:include/asm/string.h **** 			: "=&c" (ecx), "=&D" (edi), "=&S" (esi)
 255:include/asm/string.h **** 			: "0" (n/4), "1" (edi),"2" (esi)
 256:include/asm/string.h **** 			: "memory"
 257:include/asm/string.h **** 		);
 258:include/asm/string.h **** 	} else {
 259:include/asm/string.h **** 		/* small block: don't clobber ecx + smaller code */
 260:include/asm/string.h **** 		if (n >= 4*4) __asm__ __volatile__("movsl"
 261:include/asm/string.h **** 			:"=&D"(edi),"=&S"(esi):"0"(edi),"1"(esi):"memory");
 262:include/asm/string.h **** 		if (n >= 3*4) __asm__ __volatile__("movsl"
 263:include/asm/string.h **** 			:"=&D"(edi),"=&S"(esi):"0"(edi),"1"(esi):"memory");
 264:include/asm/string.h **** 		if (n >= 2*4) __asm__ __volatile__("movsl"
 265:include/asm/string.h **** 			:"=&D"(edi),"=&S"(esi):"0"(edi),"1"(esi):"memory");
 266:include/asm/string.h **** 		if (n >= 1*4) __asm__ __volatile__("movsl"
 267:include/asm/string.h **** 			:"=&D"(edi),"=&S"(esi):"0"(edi),"1"(esi):"memory");
 268:include/asm/string.h **** 	}
 269:include/asm/string.h **** 	switch (n % 4) {
 270:include/asm/string.h **** 		/* tail */
 271:include/asm/string.h **** 		case 0: return to;
 272:include/asm/string.h **** 		case 1: __asm__ __volatile__("movsb"
 273:include/asm/string.h **** 			:"=&D"(edi),"=&S"(esi):"0"(edi),"1"(esi):"memory");
GAS LISTING  			page 45


 274:include/asm/string.h **** 			return to;
 275:include/asm/string.h **** 		case 2: __asm__ __volatile__("movsw"
 276:include/asm/string.h **** 			:"=&D"(edi),"=&S"(esi):"0"(edi),"1"(esi):"memory");
 277:include/asm/string.h **** 			return to;
 278:include/asm/string.h **** 		default: __asm__ __volatile__("movsw\n\tmovsb"
 279:include/asm/string.h **** 			:"=&D"(edi),"=&S"(esi):"0"(edi),"1"(esi):"memory");
 280:include/asm/string.h **** 			return to;
 281:include/asm/string.h **** 	}
 282:include/asm/string.h **** }
 283:include/asm/string.h **** 
 284:include/asm/string.h **** #define __HAVE_ARCH_MEMCPY
 285:include/asm/string.h **** 
 286:include/asm/string.h **** #ifdef CONFIG_X86_USE_3DNOW
 287:include/asm/string.h **** 
 288:include/asm/string.h **** #include <asm/mmx.h>
 289:include/asm/string.h **** 
 290:include/asm/string.h **** /*
 291:include/asm/string.h ****  *	This CPU favours 3DNow strongly (eg AMD Athlon)
 292:include/asm/string.h ****  */
 293:include/asm/string.h **** 
 294:include/asm/string.h **** static inline void * __constant_memcpy3d(void * to, const void * from, size_t len)
 295:include/asm/string.h **** {
 296:include/asm/string.h **** 	if (len < 512)
 297:include/asm/string.h **** 		return __constant_memcpy(to, from, len);
 298:include/asm/string.h **** 	return _mmx_memcpy(to, from, len);
 299:include/asm/string.h **** }
 300:include/asm/string.h **** 
 301:include/asm/string.h **** static __inline__ void *__memcpy3d(void *to, const void *from, size_t len)
 302:include/asm/string.h **** {
 303:include/asm/string.h **** 	if (len < 512)
 304:include/asm/string.h **** 		return __memcpy(to, from, len);
 305:include/asm/string.h **** 	return _mmx_memcpy(to, from, len);
 306:include/asm/string.h **** }
 307:include/asm/string.h **** 
 308:include/asm/string.h **** #define memcpy(t, f, n) \
 309:include/asm/string.h **** (__builtin_constant_p(n) ? \
 310:include/asm/string.h ****  __constant_memcpy3d((t),(f),(n)) : \
 311:include/asm/string.h ****  __memcpy3d((t),(f),(n)))
 312:include/asm/string.h **** 
 313:include/asm/string.h **** #else
 314:include/asm/string.h **** 
 315:include/asm/string.h **** /*
 316:include/asm/string.h ****  *	No 3D Now!
 317:include/asm/string.h ****  */
 318:include/asm/string.h ****  
 319:include/asm/string.h **** #define memcpy(t, f, n) \
 320:include/asm/string.h **** (__builtin_constant_p(n) ? \
 321:include/asm/string.h ****  __constant_memcpy((t),(f),(n)) : \
 322:include/asm/string.h ****  __memcpy((t),(f),(n)))
 323:include/asm/string.h **** 
 324:include/asm/string.h **** #endif
 325:include/asm/string.h **** 
 326:include/asm/string.h **** #define __HAVE_ARCH_MEMMOVE
 327:include/asm/string.h **** void *memmove(void * dest,const void * src, size_t n);
 328:include/asm/string.h **** 
 329:include/asm/string.h **** #define memcmp __builtin_memcmp
 330:include/asm/string.h **** 
GAS LISTING  			page 46


 331:include/asm/string.h **** #define __HAVE_ARCH_MEMCHR
 332:include/asm/string.h **** static inline void * memchr(const void * cs,int c,size_t count)
 333:include/asm/string.h **** {
 334:include/asm/string.h **** int d0;
 335:include/asm/string.h **** register void * __res;
 336:include/asm/string.h **** if (!count)
 337:include/asm/string.h **** 	return NULL;
 338:include/asm/string.h **** __asm__ __volatile__(
 339:include/asm/string.h **** 	"repne\n\t"
 340:include/asm/string.h **** 	"scasb\n\t"
 341:include/asm/string.h **** 	"je 1f\n\t"
 342:include/asm/string.h **** 	"movl $1,%0\n"
 343:include/asm/string.h **** 	"1:\tdecl %0"
 344:include/asm/string.h **** 	:"=D" (__res), "=&c" (d0)
 345:include/asm/string.h **** 	:"a" (c),"0" (cs),"1" (count)
 346:include/asm/string.h **** 	:"memory");
 347:include/asm/string.h **** return __res;
 348:include/asm/string.h **** }
 349:include/asm/string.h **** 
 350:include/asm/string.h **** static inline void * __memset_generic(void * s, char c,size_t count)
 351:include/asm/string.h **** {
 352:include/asm/string.h **** int d0, d1;
 353:include/asm/string.h **** __asm__ __volatile__(
 354:include/asm/string.h **** 	"rep\n\t"
 355:include/asm/string.h **** 	"stosb"
 356:include/asm/string.h **** 	: "=&c" (d0), "=&D" (d1)
 357:include/asm/string.h **** 	:"a" (c),"1" (s),"0" (count)
 358:include/asm/string.h **** 	:"memory");
 359:include/asm/string.h **** return s;
 360:include/asm/string.h **** }
 361:include/asm/string.h **** 
 362:include/asm/string.h **** /* we might want to write optimized versions of these later */
 363:include/asm/string.h **** #define __constant_count_memset(s,c,count) __memset_generic((s),(c),(count))
 364:include/asm/string.h **** 
 365:include/asm/string.h **** /*
 366:include/asm/string.h ****  * memset(x,0,y) is a reasonably common thing to do, so we want to fill
 367:include/asm/string.h ****  * things 32 bits at a time even when we don't know the size of the
 368:include/asm/string.h ****  * area at compile-time..
 369:include/asm/string.h ****  */
 370:include/asm/string.h **** static inline void * __constant_c_memset(void * s, unsigned long c, size_t count)
 371:include/asm/string.h **** {
 372:include/asm/string.h **** int d0, d1;
 373:include/asm/string.h **** __asm__ __volatile__(
 374:include/asm/string.h **** 	"rep ; stosl\n\t"
 375:include/asm/string.h **** 	"testb $2,%b3\n\t"
 376:include/asm/string.h **** 	"je 1f\n\t"
 377:include/asm/string.h **** 	"stosw\n"
 378:include/asm/string.h **** 	"1:\ttestb $1,%b3\n\t"
 379:include/asm/string.h **** 	"je 2f\n\t"
 380:include/asm/string.h **** 	"stosb\n"
 381:include/asm/string.h **** 	"2:"
 382:include/asm/string.h **** 	:"=&c" (d0), "=&D" (d1)
 383:include/asm/string.h **** 	:"a" (c), "q" (count), "0" (count/4), "1" ((long) s)
 384:include/asm/string.h **** 	:"memory");
 385:include/asm/string.h **** return (s);	
 386:include/asm/string.h **** }
 387:include/asm/string.h **** 
GAS LISTING  			page 47


 388:include/asm/string.h **** /* Added by Gertjan van Wingerde to make minix and sysv module work */
 389:include/asm/string.h **** #define __HAVE_ARCH_STRNLEN
 390:include/asm/string.h **** static inline size_t strnlen(const char * s, size_t count)
 391:include/asm/string.h **** {
 392:include/asm/string.h **** int d0;
 393:include/asm/string.h **** register int __res;
 394:include/asm/string.h **** __asm__ __volatile__(
 395:include/asm/string.h **** 	"movl %2,%0\n\t"
 396:include/asm/string.h **** 	"jmp 2f\n"
 397:include/asm/string.h **** 	"1:\tcmpb $0,(%0)\n\t"
 398:include/asm/string.h **** 	"je 3f\n\t"
 399:include/asm/string.h **** 	"incl %0\n"
 400:include/asm/string.h **** 	"2:\tdecl %1\n\t"
 401:include/asm/string.h **** 	"cmpl $-1,%1\n\t"
 402:include/asm/string.h **** 	"jne 1b\n"
 403:include/asm/string.h **** 	"3:\tsubl %2,%0"
 404:include/asm/string.h **** 	:"=a" (__res), "=&d" (d0)
 405:include/asm/string.h **** 	:"c" (s),"1" (count)
 406:include/asm/string.h **** 	:"memory");
 407:include/asm/string.h **** return __res;
 408:include/asm/string.h **** }
 409:include/asm/string.h **** /* end of additional stuff */
 410:include/asm/string.h **** 
 411:include/asm/string.h **** #define __HAVE_ARCH_STRSTR
 412:include/asm/string.h **** 
 413:include/asm/string.h **** extern char *strstr(const char *cs, const char *ct);
 414:include/asm/string.h **** 
 415:include/asm/string.h **** /*
 416:include/asm/string.h ****  * This looks horribly ugly, but the compiler can optimize it totally,
 417:include/asm/string.h ****  * as we by now know that both pattern and count is constant..
 418:include/asm/string.h ****  */
 419:include/asm/string.h **** static inline void * __constant_c_and_count_memset(void * s, unsigned long pattern, size_t count)
 420:include/asm/string.h **** {
 126              	.loc 4 420 0
 127 0091 8D7B38   	leal 56(%ebx),%edi
 128 0094 31C0     	xorl %eax,%eax
 129              	.LBB12:
 130              	.LBB13:
 421:include/asm/string.h **** 	switch (count) {
 422:include/asm/string.h **** 		case 0:
 423:include/asm/string.h **** 			return s;
 424:include/asm/string.h **** 		case 1:
 425:include/asm/string.h **** 			*(unsigned char *)s = pattern;
 426:include/asm/string.h **** 			return s;
 427:include/asm/string.h **** 		case 2:
 428:include/asm/string.h **** 			*(unsigned short *)s = pattern;
 429:include/asm/string.h **** 			return s;
 430:include/asm/string.h **** 		case 3:
 431:include/asm/string.h **** 			*(unsigned short *)s = pattern;
 432:include/asm/string.h **** 			*(2+(unsigned char *)s) = pattern;
 433:include/asm/string.h **** 			return s;
 434:include/asm/string.h **** 		case 4:
 435:include/asm/string.h **** 			*(unsigned long *)s = pattern;
 436:include/asm/string.h **** 			return s;
 437:include/asm/string.h **** 	}
 438:include/asm/string.h **** #define COMMON(x) \
 439:include/asm/string.h **** __asm__  __volatile__( \
GAS LISTING  			page 48


 440:include/asm/string.h **** 	"rep ; stosl" \
 441:include/asm/string.h **** 	x \
 442:include/asm/string.h **** 	: "=&c" (d0), "=&D" (d1) \
 443:include/asm/string.h **** 	: "a" (pattern),"0" (count/4),"1" ((long) s) \
 444:include/asm/string.h **** 	: "memory")
 445:include/asm/string.h **** {
 446:include/asm/string.h **** 	int d0, d1;
 447:include/asm/string.h **** 	switch (count % 4) {
 448:include/asm/string.h **** 		case 0: COMMON(""); return s;
 131              	.loc 4 448 0
 132 0096 B90A0000 	movl $10,%ecx
 132      00
 133              	
 134 009b F3AB     	rep
 135              	
 136              	.LBE13:
 137              	.LBE12:
 138              	.LBE11:
  50:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	memset(skb->cb, 0, sizeof(skb->cb));
  51:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	netif_rx(skb);
 139              	.loc 1 51 0
 140 009d 895C2410 	movl %ebx,16(%esp)
 141 00a1 5B       	popl %ebx
 142 00a2 5E       	popl %esi
 143 00a3 5F       	popl %edi
 144              	.LCFI3:
 145 00a4 E9FCFFFF 	jmp netif_rx
 145      FF
 146              	.LFE924:
 148              	.section .rodata
 151              	__func__.2:
 152 0000 69656565 	.string "ieee80211_frag_cache_find"
 152      38303231 
 152      315F6672 
 152      61675F63 
 152      61636865 
 153              	.section .rodata.str1.1,"aMS",@progbits,1
 154              	.LC0:
 155 0000 3C373E69 	.string "<7>ieee80211: %c %s expiring fragment cache entry seq=%u last_frag=%u\n"
 155      65656538 
 155      30323131 
 155      3A202563 
 155      20257320 
 156              	.text
 158              	ieee80211_frag_cache_find:
 159              	.LFB925:
  52:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** }
  53:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
  54:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** /* Called only as a tasklet (software IRQ) */
  55:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** static struct ieee80211_frag_entry *ieee80211_frag_cache_find(struct
  56:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 							      ieee80211_device
  57:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 							      *ieee,
  58:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 							      unsigned int seq,
  59:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 							      unsigned int frag,
  60:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 							      u8 * src,
  61:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 							      u8 * dst)
  62:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** {
GAS LISTING  			page 49


 160              	.loc 1 62 0
 161 00a9 55       	pushl %ebp
 162              	.LCFI4:
 163 00aa 57       	pushl %edi
 164              	.LCFI5:
 165 00ab 56       	pushl %esi
 166              	.LCFI6:
 167 00ac 53       	pushl %ebx
 168              	.LCFI7:
 169              	.loc 1 62 0
 170 00ad 53       	pushl %ebx
 171              	.LCFI8:
 172 00ae 8B742418 	movl 24(%esp),%esi
 173 00b2 8B7C2428 	movl 40(%esp),%edi
  63:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	struct ieee80211_frag_entry *entry;
  64:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	int i;
  65:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
  66:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	for (i = 0; i < IEEE80211_FRAG_CACHE_LEN; i++) {
 174              	.loc 1 66 0
 175 00b6 31ED     	xorl %ebp,%ebp
 176 00b8 81C6D806 	addl $1752,%esi
 176      0000
 177              	.L64:
  67:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		entry = &ieee->frag_cache[i];
  68:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		if (entry->skb != NULL &&
 178              	.loc 1 68 0
 179 00be 837E0C00 	cmpl $0,12(%esi)
 180 00c2 0F842201 	je .L34
 180      0000
  69:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		    time_after(jiffies, entry->first_frag_time + 2 * HZ)) {
 181              	.loc 1 69 0
 182 00c8 8B06     	movl (%esi),%eax
 183 00ca 8B150000 	movl jiffies,%edx
 183      0000
 184 00d0 29D0     	subl %edx,%eax
 185 00d2 05D00700 	addl $2000,%eax
 185      00
 186 00d7 0F89A700 	jns .L35
 186      0000
  70:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			IEEE80211_DEBUG_FRAG("expiring fragment cache entry "
 187              	.loc 1 70 0
 188 00dd F6050000 	testb $32,ieee80211_debug_level
 188      000020
 189 00e4 7433     	je .L36
 190              	.LBB14:
 191              	.LBB15:
 192              	.file 5 "include/asm/thread_info.h"
   1:include/asm/thread_info.h **** /* thread_info.h: i386 low-level thread information
   2:include/asm/thread_info.h ****  *
   3:include/asm/thread_info.h ****  * Copyright (C) 2002  David Howells (dhowells@redhat.com)
   4:include/asm/thread_info.h ****  * - Incorporating suggestions made by Linus Torvalds and Dave Miller
   5:include/asm/thread_info.h ****  */
   6:include/asm/thread_info.h **** 
   7:include/asm/thread_info.h **** #ifndef _ASM_THREAD_INFO_H
   8:include/asm/thread_info.h **** #define _ASM_THREAD_INFO_H
   9:include/asm/thread_info.h **** 
  10:include/asm/thread_info.h **** #ifdef __KERNEL__
GAS LISTING  			page 50


  11:include/asm/thread_info.h **** 
  12:include/asm/thread_info.h **** #include <linux/config.h>
  13:include/asm/thread_info.h **** #include <linux/compiler.h>
  14:include/asm/thread_info.h **** #include <asm/page.h>
  15:include/asm/thread_info.h **** 
  16:include/asm/thread_info.h **** #ifndef __ASSEMBLY__
  17:include/asm/thread_info.h **** #include <asm/processor.h>
  18:include/asm/thread_info.h **** #endif
  19:include/asm/thread_info.h **** 
  20:include/asm/thread_info.h **** /*
  21:include/asm/thread_info.h ****  * low level task data that entry.S needs immediate access to
  22:include/asm/thread_info.h ****  * - this struct should fit entirely inside of one cache line
  23:include/asm/thread_info.h ****  * - this struct shares the supervisor stack pages
  24:include/asm/thread_info.h ****  * - if the contents of this structure are changed, the assembly constants must also be changed
  25:include/asm/thread_info.h ****  */
  26:include/asm/thread_info.h **** #ifndef __ASSEMBLY__
  27:include/asm/thread_info.h **** 
  28:include/asm/thread_info.h **** struct thread_info {
  29:include/asm/thread_info.h **** 	struct task_struct	*task;		/* main task structure */
  30:include/asm/thread_info.h **** 	struct exec_domain	*exec_domain;	/* execution domain */
  31:include/asm/thread_info.h **** 	unsigned long		flags;		/* low level flags */
  32:include/asm/thread_info.h **** 	unsigned long		status;		/* thread-synchronous flags */
  33:include/asm/thread_info.h **** 	__u32			cpu;		/* current CPU */
  34:include/asm/thread_info.h **** 	__s32			preempt_count; /* 0 => preemptable, <0 => BUG */
  35:include/asm/thread_info.h **** 
  36:include/asm/thread_info.h **** 
  37:include/asm/thread_info.h **** 	mm_segment_t		addr_limit;	/* thread address space:
  38:include/asm/thread_info.h **** 					 	   0-0xBFFFFFFF for user-thead
  39:include/asm/thread_info.h **** 						   0-0xFFFFFFFF for kernel-thread
  40:include/asm/thread_info.h **** 						*/
  41:include/asm/thread_info.h **** 	struct restart_block    restart_block;
  42:include/asm/thread_info.h **** 
  43:include/asm/thread_info.h **** 	unsigned long           previous_esp;   /* ESP of the previous stack in case
  44:include/asm/thread_info.h **** 						   of nested (IRQ) stacks
  45:include/asm/thread_info.h **** 						*/
  46:include/asm/thread_info.h **** 	__u8			supervisor_stack[0];
  47:include/asm/thread_info.h **** };
  48:include/asm/thread_info.h **** 
  49:include/asm/thread_info.h **** #else /* !__ASSEMBLY__ */
  50:include/asm/thread_info.h **** 
  51:include/asm/thread_info.h **** #include <asm/asm_offsets.h>
  52:include/asm/thread_info.h **** 
  53:include/asm/thread_info.h **** #endif
  54:include/asm/thread_info.h **** 
  55:include/asm/thread_info.h **** #define PREEMPT_ACTIVE		0x10000000
  56:include/asm/thread_info.h **** #ifdef CONFIG_4KSTACKS
  57:include/asm/thread_info.h **** #define THREAD_SIZE            (4096)
  58:include/asm/thread_info.h **** #else
  59:include/asm/thread_info.h **** #define THREAD_SIZE		(8192)
  60:include/asm/thread_info.h **** #endif
  61:include/asm/thread_info.h **** 
  62:include/asm/thread_info.h **** #define STACK_WARN             (THREAD_SIZE/8)
  63:include/asm/thread_info.h **** /*
  64:include/asm/thread_info.h ****  * macros/functions for gaining access to the thread information structure
  65:include/asm/thread_info.h ****  *
  66:include/asm/thread_info.h ****  * preempt_count needs to be 1 initially, until the scheduler is functional.
  67:include/asm/thread_info.h ****  */
GAS LISTING  			page 51


  68:include/asm/thread_info.h **** #ifndef __ASSEMBLY__
  69:include/asm/thread_info.h **** 
  70:include/asm/thread_info.h **** #define INIT_THREAD_INFO(tsk)			\
  71:include/asm/thread_info.h **** {						\
  72:include/asm/thread_info.h **** 	.task		= &tsk,			\
  73:include/asm/thread_info.h **** 	.exec_domain	= &default_exec_domain,	\
  74:include/asm/thread_info.h **** 	.flags		= 0,			\
  75:include/asm/thread_info.h **** 	.cpu		= 0,			\
  76:include/asm/thread_info.h **** 	.preempt_count	= 1,			\
  77:include/asm/thread_info.h **** 	.addr_limit	= KERNEL_DS,		\
  78:include/asm/thread_info.h **** 	.restart_block = {			\
  79:include/asm/thread_info.h **** 		.fn = do_no_restart_syscall,	\
  80:include/asm/thread_info.h **** 	},					\
  81:include/asm/thread_info.h **** }
  82:include/asm/thread_info.h **** 
  83:include/asm/thread_info.h **** #define init_thread_info	(init_thread_union.thread_info)
  84:include/asm/thread_info.h **** #define init_stack		(init_thread_union.stack)
  85:include/asm/thread_info.h **** 
  86:include/asm/thread_info.h **** 
  87:include/asm/thread_info.h **** /* how to get the thread information struct from C */
  88:include/asm/thread_info.h **** static inline struct thread_info *current_thread_info(void)
  89:include/asm/thread_info.h **** {
  90:include/asm/thread_info.h **** 	struct thread_info *ti;
  91:include/asm/thread_info.h **** 	__asm__("andl %%esp,%0; ":"=r" (ti) : "0" (~(THREAD_SIZE - 1)));
 193              	.loc 5 91 0
 194 00e6 B800E0FF 	movl $-8192,%eax
 194      FF
 195              	
 196 00eb 21E0     	andl %esp,%eax
 197              	
 198              	.LBE15:
 199              	.LBE14:
 200              	.loc 5 89 0
 201 00ed 8B4014   	movl 20(%eax),%eax
 202 00f0 2500FFFF 	andl $268435200,%eax
 202      0F
 203 00f5 83F801   	cmpl $1,%eax
 204 00f8 FF7608   	pushl 8(%esi)
 205              	.LCFI9:
 206 00fb 19C0     	sbbl %eax,%eax
 207 00fd FF7604   	pushl 4(%esi)
 208              	.LCFI10:
 209 0100 83E00C   	andl $12,%eax
 210 0103 68000000 	pushl $__func__.2
 210      00
 211              	.LCFI11:
 212 0108 83C049   	addl $73,%eax
 213 010b 50       	pushl %eax
 214              	.LCFI12:
 215 010c 68000000 	pushl $.LC0
 215      00
 216              	.LCFI13:
 217              	.LCFI14:
 218 0111 E8FCFFFF 	call printk
 218      FF
 219 0116 83C414   	addl $20,%esp
 220              	.LCFI15:
GAS LISTING  			page 52


 221              	.L36:
 222              	.LBB16:
 223              	.LBB17:
 224              	.LBB18:
 225              	.LBB19:
 226              	.loc 5 91 0
 227 0119 B800E0FF 	movl $-8192,%eax
 227      FF
 228              	
 229 011e 21E0     	andl %esp,%eax
 230              	
 231              	.LBE19:
 232              	.LBE18:
 233              	.loc 5 89 0
 234 0120 F7401400 	testl $268369920,20(%eax)
 234      00FF0F
 235              	.LBE17:
 236              	.file 6 "include/linux/netdevice.h"
   1:include/linux/netdevice.h **** /*
   2:include/linux/netdevice.h ****  * INET		An implementation of the TCP/IP protocol suite for the LINUX
   3:include/linux/netdevice.h ****  *		operating system.  INET is implemented using the  BSD Socket
   4:include/linux/netdevice.h ****  *		interface as the means of communication with the user level.
   5:include/linux/netdevice.h ****  *
   6:include/linux/netdevice.h ****  *		Definitions for the Interfaces handler.
   7:include/linux/netdevice.h ****  *
   8:include/linux/netdevice.h ****  * Version:	@(#)dev.h	1.0.10	08/12/93
   9:include/linux/netdevice.h ****  *
  10:include/linux/netdevice.h ****  * Authors:	Ross Biro
  11:include/linux/netdevice.h ****  *		Fred N. van Kempen, <waltje@uWalt.NL.Mugnet.ORG>
  12:include/linux/netdevice.h ****  *		Corey Minyard <wf-rch!minyard@relay.EU.net>
  13:include/linux/netdevice.h ****  *		Donald J. Becker, <becker@cesdis.gsfc.nasa.gov>
  14:include/linux/netdevice.h ****  *		Alan Cox, <Alan.Cox@linux.org>
  15:include/linux/netdevice.h ****  *		Bjorn Ekwall. <bj0rn@blox.se>
  16:include/linux/netdevice.h ****  *              Pekka Riikonen <priikone@poseidon.pspt.fi>
  17:include/linux/netdevice.h ****  *
  18:include/linux/netdevice.h ****  *		This program is free software; you can redistribute it and/or
  19:include/linux/netdevice.h ****  *		modify it under the terms of the GNU General Public License
  20:include/linux/netdevice.h ****  *		as published by the Free Software Foundation; either version
  21:include/linux/netdevice.h ****  *		2 of the License, or (at your option) any later version.
  22:include/linux/netdevice.h ****  *
  23:include/linux/netdevice.h ****  *		Moved to /usr/include/linux for NET3
  24:include/linux/netdevice.h ****  */
  25:include/linux/netdevice.h **** #ifndef _LINUX_NETDEVICE_H
  26:include/linux/netdevice.h **** #define _LINUX_NETDEVICE_H
  27:include/linux/netdevice.h **** 
  28:include/linux/netdevice.h **** #include <linux/if.h>
  29:include/linux/netdevice.h **** #include <linux/if_ether.h>
  30:include/linux/netdevice.h **** #include <linux/if_packet.h>
  31:include/linux/netdevice.h **** 
  32:include/linux/netdevice.h **** #ifdef __KERNEL__
  33:include/linux/netdevice.h **** #include <asm/atomic.h>
  34:include/linux/netdevice.h **** #include <asm/cache.h>
  35:include/linux/netdevice.h **** #include <asm/byteorder.h>
  36:include/linux/netdevice.h **** 
  37:include/linux/netdevice.h **** #include <linux/config.h>
  38:include/linux/netdevice.h **** #include <linux/device.h>
  39:include/linux/netdevice.h **** #include <linux/percpu.h>
GAS LISTING  			page 53


  40:include/linux/netdevice.h **** 
  41:include/linux/netdevice.h **** struct divert_blk;
  42:include/linux/netdevice.h **** struct vlan_group;
  43:include/linux/netdevice.h **** struct ethtool_ops;
  44:include/linux/netdevice.h **** struct netpoll;
  45:include/linux/netdevice.h **** 					/* source back-compat hooks */
  46:include/linux/netdevice.h **** #define SET_ETHTOOL_OPS(netdev,ops) \
  47:include/linux/netdevice.h **** 	( (netdev)->ethtool_ops = (ops) )
  48:include/linux/netdevice.h **** 
  49:include/linux/netdevice.h **** #define HAVE_ALLOC_NETDEV		/* feature macro: alloc_xxxdev
  50:include/linux/netdevice.h **** 					   functions are available. */
  51:include/linux/netdevice.h **** #define HAVE_FREE_NETDEV		/* free_netdev() */
  52:include/linux/netdevice.h **** #define HAVE_NETDEV_PRIV		/* netdev_priv() */
  53:include/linux/netdevice.h **** 
  54:include/linux/netdevice.h **** #define NET_XMIT_SUCCESS	0
  55:include/linux/netdevice.h **** #define NET_XMIT_DROP		1	/* skb dropped			*/
  56:include/linux/netdevice.h **** #define NET_XMIT_CN		2	/* congestion notification	*/
  57:include/linux/netdevice.h **** #define NET_XMIT_POLICED	3	/* skb is shot by police	*/
  58:include/linux/netdevice.h **** #define NET_XMIT_BYPASS		4	/* packet does not leave via dequeue;
  59:include/linux/netdevice.h **** 					   (TC use only - dev_queue_xmit
  60:include/linux/netdevice.h **** 					   returns this as NET_XMIT_SUCCESS) */
  61:include/linux/netdevice.h **** 
  62:include/linux/netdevice.h **** /* Backlog congestion levels */
  63:include/linux/netdevice.h **** #define NET_RX_SUCCESS		0   /* keep 'em coming, baby */
  64:include/linux/netdevice.h **** #define NET_RX_DROP		1  /* packet dropped */
  65:include/linux/netdevice.h **** #define NET_RX_CN_LOW		2   /* storm alert, just in case */
  66:include/linux/netdevice.h **** #define NET_RX_CN_MOD		3   /* Storm on its way! */
  67:include/linux/netdevice.h **** #define NET_RX_CN_HIGH		4   /* The storm is here */
  68:include/linux/netdevice.h **** #define NET_RX_BAD		5  /* packet dropped due to kernel error */
  69:include/linux/netdevice.h **** 
  70:include/linux/netdevice.h **** #define net_xmit_errno(e)	((e) != NET_XMIT_CN ? -ENOBUFS : 0)
  71:include/linux/netdevice.h **** 
  72:include/linux/netdevice.h **** #endif
  73:include/linux/netdevice.h **** 
  74:include/linux/netdevice.h **** #define MAX_ADDR_LEN	32		/* Largest hardware address length */
  75:include/linux/netdevice.h **** 
  76:include/linux/netdevice.h **** /* Driver transmit return codes */
  77:include/linux/netdevice.h **** #define NETDEV_TX_OK 0		/* driver took care of packet */
  78:include/linux/netdevice.h **** #define NETDEV_TX_BUSY 1	/* driver tx path was busy*/
  79:include/linux/netdevice.h **** #define NETDEV_TX_LOCKED -1	/* driver tx lock was already taken */
  80:include/linux/netdevice.h **** 
  81:include/linux/netdevice.h **** /*
  82:include/linux/netdevice.h ****  *	Compute the worst case header length according to the protocols
  83:include/linux/netdevice.h ****  *	used.
  84:include/linux/netdevice.h ****  */
  85:include/linux/netdevice.h ****  
  86:include/linux/netdevice.h **** #if !defined(CONFIG_AX25) && !defined(CONFIG_AX25_MODULE) && !defined(CONFIG_TR)
  87:include/linux/netdevice.h **** #define LL_MAX_HEADER	32
  88:include/linux/netdevice.h **** #else
  89:include/linux/netdevice.h **** #if defined(CONFIG_AX25) || defined(CONFIG_AX25_MODULE)
  90:include/linux/netdevice.h **** #define LL_MAX_HEADER	96
  91:include/linux/netdevice.h **** #else
  92:include/linux/netdevice.h **** #define LL_MAX_HEADER	48
  93:include/linux/netdevice.h **** #endif
  94:include/linux/netdevice.h **** #endif
  95:include/linux/netdevice.h **** 
  96:include/linux/netdevice.h **** #if !defined(CONFIG_NET_IPIP) && \
GAS LISTING  			page 54


  97:include/linux/netdevice.h ****     !defined(CONFIG_IPV6) && !defined(CONFIG_IPV6_MODULE)
  98:include/linux/netdevice.h **** #define MAX_HEADER LL_MAX_HEADER
  99:include/linux/netdevice.h **** #else
 100:include/linux/netdevice.h **** #define MAX_HEADER (LL_MAX_HEADER + 48)
 101:include/linux/netdevice.h **** #endif
 102:include/linux/netdevice.h **** 
 103:include/linux/netdevice.h **** /*
 104:include/linux/netdevice.h ****  *	Network device statistics. Akin to the 2.0 ether stats but
 105:include/linux/netdevice.h ****  *	with byte counters.
 106:include/linux/netdevice.h ****  */
 107:include/linux/netdevice.h ****  
 108:include/linux/netdevice.h **** struct net_device_stats
 109:include/linux/netdevice.h **** {
 110:include/linux/netdevice.h **** 	unsigned long	rx_packets;		/* total packets received	*/
 111:include/linux/netdevice.h **** 	unsigned long	tx_packets;		/* total packets transmitted	*/
 112:include/linux/netdevice.h **** 	unsigned long	rx_bytes;		/* total bytes received 	*/
 113:include/linux/netdevice.h **** 	unsigned long	tx_bytes;		/* total bytes transmitted	*/
 114:include/linux/netdevice.h **** 	unsigned long	rx_errors;		/* bad packets received		*/
 115:include/linux/netdevice.h **** 	unsigned long	tx_errors;		/* packet transmit problems	*/
 116:include/linux/netdevice.h **** 	unsigned long	rx_dropped;		/* no space in linux buffers	*/
 117:include/linux/netdevice.h **** 	unsigned long	tx_dropped;		/* no space available in linux	*/
 118:include/linux/netdevice.h **** 	unsigned long	multicast;		/* multicast packets received	*/
 119:include/linux/netdevice.h **** 	unsigned long	collisions;
 120:include/linux/netdevice.h **** 
 121:include/linux/netdevice.h **** 	/* detailed rx_errors: */
 122:include/linux/netdevice.h **** 	unsigned long	rx_length_errors;
 123:include/linux/netdevice.h **** 	unsigned long	rx_over_errors;		/* receiver ring buff overflow	*/
 124:include/linux/netdevice.h **** 	unsigned long	rx_crc_errors;		/* recved pkt with crc error	*/
 125:include/linux/netdevice.h **** 	unsigned long	rx_frame_errors;	/* recv'd frame alignment error */
 126:include/linux/netdevice.h **** 	unsigned long	rx_fifo_errors;		/* recv'r fifo overrun		*/
 127:include/linux/netdevice.h **** 	unsigned long	rx_missed_errors;	/* receiver missed packet	*/
 128:include/linux/netdevice.h **** 
 129:include/linux/netdevice.h **** 	/* detailed tx_errors */
 130:include/linux/netdevice.h **** 	unsigned long	tx_aborted_errors;
 131:include/linux/netdevice.h **** 	unsigned long	tx_carrier_errors;
 132:include/linux/netdevice.h **** 	unsigned long	tx_fifo_errors;
 133:include/linux/netdevice.h **** 	unsigned long	tx_heartbeat_errors;
 134:include/linux/netdevice.h **** 	unsigned long	tx_window_errors;
 135:include/linux/netdevice.h **** 	
 136:include/linux/netdevice.h **** 	/* for cslip etc */
 137:include/linux/netdevice.h **** 	unsigned long	rx_compressed;
 138:include/linux/netdevice.h **** 	unsigned long	tx_compressed;
 139:include/linux/netdevice.h **** };
 140:include/linux/netdevice.h **** 
 141:include/linux/netdevice.h **** 
 142:include/linux/netdevice.h **** /* Media selection options. */
 143:include/linux/netdevice.h **** enum {
 144:include/linux/netdevice.h ****         IF_PORT_UNKNOWN = 0,
 145:include/linux/netdevice.h ****         IF_PORT_10BASE2,
 146:include/linux/netdevice.h ****         IF_PORT_10BASET,
 147:include/linux/netdevice.h ****         IF_PORT_AUI,
 148:include/linux/netdevice.h ****         IF_PORT_100BASET,
 149:include/linux/netdevice.h ****         IF_PORT_100BASETX,
 150:include/linux/netdevice.h ****         IF_PORT_100BASEFX
 151:include/linux/netdevice.h **** };
 152:include/linux/netdevice.h **** 
 153:include/linux/netdevice.h **** #ifdef __KERNEL__
GAS LISTING  			page 55


 154:include/linux/netdevice.h **** 
 155:include/linux/netdevice.h **** #include <linux/cache.h>
 156:include/linux/netdevice.h **** #include <linux/skbuff.h>
 157:include/linux/netdevice.h **** 
 158:include/linux/netdevice.h **** struct neighbour;
 159:include/linux/netdevice.h **** struct neigh_parms;
 160:include/linux/netdevice.h **** struct sk_buff;
 161:include/linux/netdevice.h **** 
 162:include/linux/netdevice.h **** struct netif_rx_stats
 163:include/linux/netdevice.h **** {
 164:include/linux/netdevice.h **** 	unsigned total;
 165:include/linux/netdevice.h **** 	unsigned dropped;
 166:include/linux/netdevice.h **** 	unsigned time_squeeze;
 167:include/linux/netdevice.h **** 	unsigned throttled;
 168:include/linux/netdevice.h **** 	unsigned fastroute_hit;
 169:include/linux/netdevice.h **** 	unsigned fastroute_success;
 170:include/linux/netdevice.h **** 	unsigned fastroute_defer;
 171:include/linux/netdevice.h **** 	unsigned fastroute_deferred_out;
 172:include/linux/netdevice.h **** 	unsigned fastroute_latency_reduction;
 173:include/linux/netdevice.h **** 	unsigned cpu_collision;
 174:include/linux/netdevice.h **** };
 175:include/linux/netdevice.h **** 
 176:include/linux/netdevice.h **** DECLARE_PER_CPU(struct netif_rx_stats, netdev_rx_stat);
 177:include/linux/netdevice.h **** 
 178:include/linux/netdevice.h **** 
 179:include/linux/netdevice.h **** /*
 180:include/linux/netdevice.h ****  *	We tag multicasts with these structures.
 181:include/linux/netdevice.h ****  */
 182:include/linux/netdevice.h ****  
 183:include/linux/netdevice.h **** struct dev_mc_list
 184:include/linux/netdevice.h **** {	
 185:include/linux/netdevice.h **** 	struct dev_mc_list	*next;
 186:include/linux/netdevice.h **** 	__u8			dmi_addr[MAX_ADDR_LEN];
 187:include/linux/netdevice.h **** 	unsigned char		dmi_addrlen;
 188:include/linux/netdevice.h **** 	int			dmi_users;
 189:include/linux/netdevice.h **** 	int			dmi_gusers;
 190:include/linux/netdevice.h **** };
 191:include/linux/netdevice.h **** 
 192:include/linux/netdevice.h **** struct hh_cache
 193:include/linux/netdevice.h **** {
 194:include/linux/netdevice.h **** 	struct hh_cache *hh_next;	/* Next entry			     */
 195:include/linux/netdevice.h **** 	atomic_t	hh_refcnt;	/* number of users                   */
 196:include/linux/netdevice.h **** 	unsigned short  hh_type;	/* protocol identifier, f.e ETH_P_IP
 197:include/linux/netdevice.h ****                                          *  NOTE:  For VLANs, this will be the
 198:include/linux/netdevice.h ****                                          *  encapuslated type. --BLG
 199:include/linux/netdevice.h ****                                          */
 200:include/linux/netdevice.h **** 	int		hh_len;		/* length of header */
 201:include/linux/netdevice.h **** 	int		(*hh_output)(struct sk_buff *skb);
 202:include/linux/netdevice.h **** 	rwlock_t	hh_lock;
 203:include/linux/netdevice.h **** 
 204:include/linux/netdevice.h **** 	/* cached hardware header; allow for machine alignment needs.        */
 205:include/linux/netdevice.h **** #define HH_DATA_MOD	16
 206:include/linux/netdevice.h **** #define HH_DATA_OFF(__len) \
 207:include/linux/netdevice.h **** 	(HH_DATA_MOD - (((__len - 1) & (HH_DATA_MOD - 1)) + 1))
 208:include/linux/netdevice.h **** #define HH_DATA_ALIGN(__len) \
 209:include/linux/netdevice.h **** 	(((__len)+(HH_DATA_MOD-1))&~(HH_DATA_MOD - 1))
 210:include/linux/netdevice.h **** 	unsigned long	hh_data[HH_DATA_ALIGN(LL_MAX_HEADER) / sizeof(long)];
GAS LISTING  			page 56


 211:include/linux/netdevice.h **** };
 212:include/linux/netdevice.h **** 
 213:include/linux/netdevice.h **** /* Reserve HH_DATA_MOD byte aligned hard_header_len, but at least that much.
 214:include/linux/netdevice.h ****  * Alternative is:
 215:include/linux/netdevice.h ****  *   dev->hard_header_len ? (dev->hard_header_len +
 216:include/linux/netdevice.h ****  *                           (HH_DATA_MOD - 1)) & ~(HH_DATA_MOD - 1) : 0
 217:include/linux/netdevice.h ****  *
 218:include/linux/netdevice.h ****  * We could use other alignment values, but we must maintain the
 219:include/linux/netdevice.h ****  * relationship HH alignment <= LL alignment.
 220:include/linux/netdevice.h ****  */
 221:include/linux/netdevice.h **** #define LL_RESERVED_SPACE(dev) \
 222:include/linux/netdevice.h **** 	(((dev)->hard_header_len&~(HH_DATA_MOD - 1)) + HH_DATA_MOD)
 223:include/linux/netdevice.h **** #define LL_RESERVED_SPACE_EXTRA(dev,extra) \
 224:include/linux/netdevice.h **** 	((((dev)->hard_header_len+extra)&~(HH_DATA_MOD - 1)) + HH_DATA_MOD)
 225:include/linux/netdevice.h **** 
 226:include/linux/netdevice.h **** /* These flag bits are private to the generic network queueing
 227:include/linux/netdevice.h ****  * layer, they may not be explicitly referenced by any other
 228:include/linux/netdevice.h ****  * code.
 229:include/linux/netdevice.h ****  */
 230:include/linux/netdevice.h **** 
 231:include/linux/netdevice.h **** enum netdev_state_t
 232:include/linux/netdevice.h **** {
 233:include/linux/netdevice.h **** 	__LINK_STATE_XOFF=0,
 234:include/linux/netdevice.h **** 	__LINK_STATE_START,
 235:include/linux/netdevice.h **** 	__LINK_STATE_PRESENT,
 236:include/linux/netdevice.h **** 	__LINK_STATE_SCHED,
 237:include/linux/netdevice.h **** 	__LINK_STATE_NOCARRIER,
 238:include/linux/netdevice.h **** 	__LINK_STATE_RX_SCHED,
 239:include/linux/netdevice.h **** 	__LINK_STATE_LINKWATCH_PENDING
 240:include/linux/netdevice.h **** };
 241:include/linux/netdevice.h **** 
 242:include/linux/netdevice.h **** 
 243:include/linux/netdevice.h **** /*
 244:include/linux/netdevice.h ****  * This structure holds at boot time configured netdevice settings. They
 245:include/linux/netdevice.h ****  * are then used in the device probing. 
 246:include/linux/netdevice.h ****  */
 247:include/linux/netdevice.h **** struct netdev_boot_setup {
 248:include/linux/netdevice.h **** 	char name[IFNAMSIZ];
 249:include/linux/netdevice.h **** 	struct ifmap map;
 250:include/linux/netdevice.h **** };
 251:include/linux/netdevice.h **** #define NETDEV_BOOT_SETUP_MAX 8
 252:include/linux/netdevice.h **** 
 253:include/linux/netdevice.h **** 
 254:include/linux/netdevice.h **** /*
 255:include/linux/netdevice.h ****  *	The DEVICE structure.
 256:include/linux/netdevice.h ****  *	Actually, this whole structure is a big mistake.  It mixes I/O
 257:include/linux/netdevice.h ****  *	data with strictly "high-level" data, and it has to know about
 258:include/linux/netdevice.h ****  *	almost every data structure used in the INET module.
 259:include/linux/netdevice.h ****  *
 260:include/linux/netdevice.h ****  *	FIXME: cleanup struct net_device such that network protocol info
 261:include/linux/netdevice.h ****  *	moves out.
 262:include/linux/netdevice.h ****  */
 263:include/linux/netdevice.h **** 
 264:include/linux/netdevice.h **** struct net_device
 265:include/linux/netdevice.h **** {
 266:include/linux/netdevice.h **** 
 267:include/linux/netdevice.h **** 	/*
GAS LISTING  			page 57


 268:include/linux/netdevice.h **** 	 * This is the first field of the "visible" part of this structure
 269:include/linux/netdevice.h **** 	 * (i.e. as seen by users in the "Space.c" file).  It is the name
 270:include/linux/netdevice.h **** 	 * the interface.
 271:include/linux/netdevice.h **** 	 */
 272:include/linux/netdevice.h **** 	char			name[IFNAMSIZ];
 273:include/linux/netdevice.h **** 
 274:include/linux/netdevice.h **** 	/*
 275:include/linux/netdevice.h **** 	 *	I/O specific fields
 276:include/linux/netdevice.h **** 	 *	FIXME: Merge these and struct ifmap into one
 277:include/linux/netdevice.h **** 	 */
 278:include/linux/netdevice.h **** 	unsigned long		mem_end;	/* shared mem end	*/
 279:include/linux/netdevice.h **** 	unsigned long		mem_start;	/* shared mem start	*/
 280:include/linux/netdevice.h **** 	unsigned long		base_addr;	/* device I/O address	*/
 281:include/linux/netdevice.h **** 	unsigned int		irq;		/* device IRQ number	*/
 282:include/linux/netdevice.h **** 
 283:include/linux/netdevice.h **** 	/*
 284:include/linux/netdevice.h **** 	 *	Some hardware also needs these fields, but they are not
 285:include/linux/netdevice.h **** 	 *	part of the usual set specified in Space.c.
 286:include/linux/netdevice.h **** 	 */
 287:include/linux/netdevice.h **** 
 288:include/linux/netdevice.h **** 	unsigned char		if_port;	/* Selectable AUI, TP,..*/
 289:include/linux/netdevice.h **** 	unsigned char		dma;		/* DMA channel		*/
 290:include/linux/netdevice.h **** 
 291:include/linux/netdevice.h **** 	unsigned long		state;
 292:include/linux/netdevice.h **** 
 293:include/linux/netdevice.h **** 	struct net_device	*next;
 294:include/linux/netdevice.h **** 	
 295:include/linux/netdevice.h **** 	/* The device initialization function. Called only once. */
 296:include/linux/netdevice.h **** 	int			(*init)(struct net_device *dev);
 297:include/linux/netdevice.h **** 
 298:include/linux/netdevice.h **** 	/* ------- Fields preinitialized in Space.c finish here ------- */
 299:include/linux/netdevice.h **** 
 300:include/linux/netdevice.h **** 	struct net_device	*next_sched;
 301:include/linux/netdevice.h **** 
 302:include/linux/netdevice.h **** 	/* Interface index. Unique device identifier	*/
 303:include/linux/netdevice.h **** 	int			ifindex;
 304:include/linux/netdevice.h **** 	int			iflink;
 305:include/linux/netdevice.h **** 
 306:include/linux/netdevice.h **** 
 307:include/linux/netdevice.h **** 	struct net_device_stats* (*get_stats)(struct net_device *dev);
 308:include/linux/netdevice.h **** 	struct iw_statistics*	(*get_wireless_stats)(struct net_device *dev);
 309:include/linux/netdevice.h **** 
 310:include/linux/netdevice.h **** 	/* List of functions to handle Wireless Extensions (instead of ioctl).
 311:include/linux/netdevice.h **** 	 * See <net/iw_handler.h> for details. Jean II */
 312:include/linux/netdevice.h **** 	const struct iw_handler_def *	wireless_handlers;
 313:include/linux/netdevice.h **** 	/* Instance data managed by the core of Wireless Extensions. */
 314:include/linux/netdevice.h **** 	struct iw_public_data *	wireless_data;
 315:include/linux/netdevice.h **** 
 316:include/linux/netdevice.h **** 	struct ethtool_ops *ethtool_ops;
 317:include/linux/netdevice.h **** 
 318:include/linux/netdevice.h **** 	/*
 319:include/linux/netdevice.h **** 	 * This marks the end of the "visible" part of the structure. All
 320:include/linux/netdevice.h **** 	 * fields hereafter are internal to the system, and may change at
 321:include/linux/netdevice.h **** 	 * will (read: may be cleaned up at will).
 322:include/linux/netdevice.h **** 	 */
 323:include/linux/netdevice.h **** 
 324:include/linux/netdevice.h **** 	/* These may be needed for future network-power-down code. */
GAS LISTING  			page 58


 325:include/linux/netdevice.h **** 	unsigned long		trans_start;	/* Time (in jiffies) of last Tx	*/
 326:include/linux/netdevice.h **** 	unsigned long		last_rx;	/* Time of last Rx	*/
 327:include/linux/netdevice.h **** 
 328:include/linux/netdevice.h **** 	unsigned short		flags;	/* interface flags (a la BSD)	*/
 329:include/linux/netdevice.h **** 	unsigned short		gflags;
 330:include/linux/netdevice.h ****         unsigned short          priv_flags; /* Like 'flags' but invisible to userspace. */
 331:include/linux/netdevice.h **** 	unsigned short		padded;	/* How much padding added by alloc_netdev() */
 332:include/linux/netdevice.h **** 
 333:include/linux/netdevice.h **** 	unsigned		mtu;	/* interface MTU value		*/
 334:include/linux/netdevice.h **** 	unsigned short		type;	/* interface hardware type	*/
 335:include/linux/netdevice.h **** 	unsigned short		hard_header_len;	/* hardware hdr length	*/
 336:include/linux/netdevice.h **** 	void			*priv;	/* pointer to private data	*/
 337:include/linux/netdevice.h **** 
 338:include/linux/netdevice.h **** 	struct net_device	*master; /* Pointer to master device of a group,
 339:include/linux/netdevice.h **** 					  * which this device is member of.
 340:include/linux/netdevice.h **** 					  */
 341:include/linux/netdevice.h **** 
 342:include/linux/netdevice.h **** 	/* Interface address info. */
 343:include/linux/netdevice.h **** 	unsigned char		broadcast[MAX_ADDR_LEN];	/* hw bcast add	*/
 344:include/linux/netdevice.h **** 	unsigned char		dev_addr[MAX_ADDR_LEN];	/* hw address	*/
 345:include/linux/netdevice.h **** 	unsigned char		addr_len;	/* hardware address length	*/
 346:include/linux/netdevice.h **** 	unsigned short          dev_id;		/* for shared network cards */
 347:include/linux/netdevice.h **** 
 348:include/linux/netdevice.h **** 	struct dev_mc_list	*mc_list;	/* Multicast mac addresses	*/
 349:include/linux/netdevice.h **** 	int			mc_count;	/* Number of installed mcasts	*/
 350:include/linux/netdevice.h **** 	int			promiscuity;
 351:include/linux/netdevice.h **** 	int			allmulti;
 352:include/linux/netdevice.h **** 
 353:include/linux/netdevice.h **** 	int			watchdog_timeo;
 354:include/linux/netdevice.h **** 	struct timer_list	watchdog_timer;
 355:include/linux/netdevice.h **** 
 356:include/linux/netdevice.h **** 	/* Protocol specific pointers */
 357:include/linux/netdevice.h **** 	
 358:include/linux/netdevice.h **** 	void 			*atalk_ptr;	/* AppleTalk link 	*/
 359:include/linux/netdevice.h **** 	void			*ip_ptr;	/* IPv4 specific data	*/  
 360:include/linux/netdevice.h **** 	void                    *dn_ptr;        /* DECnet specific data */
 361:include/linux/netdevice.h **** 	void                    *ip6_ptr;       /* IPv6 specific data */
 362:include/linux/netdevice.h **** 	void			*ec_ptr;	/* Econet specific data	*/
 363:include/linux/netdevice.h **** 	void			*ax25_ptr;	/* AX.25 specific data */
 364:include/linux/netdevice.h **** 
 365:include/linux/netdevice.h **** 	struct list_head	poll_list;	/* Link to poll list	*/
 366:include/linux/netdevice.h **** 	int			quota;
 367:include/linux/netdevice.h **** 	int			weight;
 368:include/linux/netdevice.h **** 
 369:include/linux/netdevice.h **** 	struct Qdisc		*qdisc;
 370:include/linux/netdevice.h **** 	struct Qdisc		*qdisc_sleeping;
 371:include/linux/netdevice.h **** 	struct Qdisc		*qdisc_ingress;
 372:include/linux/netdevice.h **** 	struct list_head	qdisc_list;
 373:include/linux/netdevice.h **** 	unsigned long		tx_queue_len;	/* Max frames per queue allowed */
 374:include/linux/netdevice.h **** 
 375:include/linux/netdevice.h **** 	/* ingress path synchronizer */
 376:include/linux/netdevice.h **** 	spinlock_t		ingress_lock;
 377:include/linux/netdevice.h **** 	/* hard_start_xmit synchronizer */
 378:include/linux/netdevice.h **** 	spinlock_t		xmit_lock;
 379:include/linux/netdevice.h **** 	/* cpu id of processor entered to hard_start_xmit or -1,
 380:include/linux/netdevice.h **** 	   if nobody entered there.
 381:include/linux/netdevice.h **** 	 */
GAS LISTING  			page 59


 382:include/linux/netdevice.h **** 	int			xmit_lock_owner;
 383:include/linux/netdevice.h **** 	/* device queue lock */
 384:include/linux/netdevice.h **** 	spinlock_t		queue_lock;
 385:include/linux/netdevice.h **** 	/* Number of references to this device */
 386:include/linux/netdevice.h **** 	atomic_t		refcnt;
 387:include/linux/netdevice.h **** 	/* delayed register/unregister */
 388:include/linux/netdevice.h **** 	struct list_head	todo_list;
 389:include/linux/netdevice.h **** 	/* device name hash chain */
 390:include/linux/netdevice.h **** 	struct hlist_node	name_hlist;
 391:include/linux/netdevice.h **** 	/* device index hash chain */
 392:include/linux/netdevice.h **** 	struct hlist_node	index_hlist;
 393:include/linux/netdevice.h **** 
 394:include/linux/netdevice.h **** 	/* register/unregister state machine */
 395:include/linux/netdevice.h **** 	enum { NETREG_UNINITIALIZED=0,
 396:include/linux/netdevice.h **** 	       NETREG_REGISTERING,	/* called register_netdevice */
 397:include/linux/netdevice.h **** 	       NETREG_REGISTERED,	/* completed register todo */
 398:include/linux/netdevice.h **** 	       NETREG_UNREGISTERING,	/* called unregister_netdevice */
 399:include/linux/netdevice.h **** 	       NETREG_UNREGISTERED,	/* completed unregister todo */
 400:include/linux/netdevice.h **** 	       NETREG_RELEASED,		/* called free_netdev */
 401:include/linux/netdevice.h **** 	} reg_state;
 402:include/linux/netdevice.h **** 
 403:include/linux/netdevice.h **** 	/* Net device features */
 404:include/linux/netdevice.h **** 	unsigned long		features;
 405:include/linux/netdevice.h **** #define NETIF_F_SG		1	/* Scatter/gather IO. */
 406:include/linux/netdevice.h **** #define NETIF_F_IP_CSUM		2	/* Can checksum only TCP/UDP over IPv4. */
 407:include/linux/netdevice.h **** #define NETIF_F_NO_CSUM		4	/* Does not require checksum. F.e. loopack. */
 408:include/linux/netdevice.h **** #define NETIF_F_HW_CSUM		8	/* Can checksum all the packets. */
 409:include/linux/netdevice.h **** #define NETIF_F_HIGHDMA		32	/* Can DMA to high memory. */
 410:include/linux/netdevice.h **** #define NETIF_F_FRAGLIST	64	/* Scatter/gather IO. */
 411:include/linux/netdevice.h **** #define NETIF_F_HW_VLAN_TX	128	/* Transmit VLAN hw acceleration */
 412:include/linux/netdevice.h **** #define NETIF_F_HW_VLAN_RX	256	/* Receive VLAN hw acceleration */
 413:include/linux/netdevice.h **** #define NETIF_F_HW_VLAN_FILTER	512	/* Receive filtering on VLAN */
 414:include/linux/netdevice.h **** #define NETIF_F_VLAN_CHALLENGED	1024	/* Device cannot handle VLAN packets */
 415:include/linux/netdevice.h **** #define NETIF_F_TSO		2048	/* Can offload TCP/IP segmentation */
 416:include/linux/netdevice.h **** #define NETIF_F_LLTX		4096	/* LockLess TX */
 417:include/linux/netdevice.h **** 
 418:include/linux/netdevice.h **** 	/* Called after device is detached from network. */
 419:include/linux/netdevice.h **** 	void			(*uninit)(struct net_device *dev);
 420:include/linux/netdevice.h **** 	/* Called after last user reference disappears. */
 421:include/linux/netdevice.h **** 	void			(*destructor)(struct net_device *dev);
 422:include/linux/netdevice.h **** 
 423:include/linux/netdevice.h **** 	/* Pointers to interface service routines.	*/
 424:include/linux/netdevice.h **** 	int			(*open)(struct net_device *dev);
 425:include/linux/netdevice.h **** 	int			(*stop)(struct net_device *dev);
 426:include/linux/netdevice.h **** 	int			(*hard_start_xmit) (struct sk_buff *skb,
 427:include/linux/netdevice.h **** 						    struct net_device *dev);
 428:include/linux/netdevice.h **** #define HAVE_NETDEV_POLL
 429:include/linux/netdevice.h **** 	int			(*poll) (struct net_device *dev, int *quota);
 430:include/linux/netdevice.h **** 	int			(*hard_header) (struct sk_buff *skb,
 431:include/linux/netdevice.h **** 						struct net_device *dev,
 432:include/linux/netdevice.h **** 						unsigned short type,
 433:include/linux/netdevice.h **** 						void *daddr,
 434:include/linux/netdevice.h **** 						void *saddr,
 435:include/linux/netdevice.h **** 						unsigned len);
 436:include/linux/netdevice.h **** 	int			(*rebuild_header)(struct sk_buff *skb);
 437:include/linux/netdevice.h **** #define HAVE_MULTICAST			 
 438:include/linux/netdevice.h **** 	void			(*set_multicast_list)(struct net_device *dev);
GAS LISTING  			page 60


 439:include/linux/netdevice.h **** #define HAVE_SET_MAC_ADDR  		 
 440:include/linux/netdevice.h **** 	int			(*set_mac_address)(struct net_device *dev,
 441:include/linux/netdevice.h **** 						   void *addr);
 442:include/linux/netdevice.h **** #define HAVE_PRIVATE_IOCTL
 443:include/linux/netdevice.h **** 	int			(*do_ioctl)(struct net_device *dev,
 444:include/linux/netdevice.h **** 					    struct ifreq *ifr, int cmd);
 445:include/linux/netdevice.h **** #define HAVE_SET_CONFIG
 446:include/linux/netdevice.h **** 	int			(*set_config)(struct net_device *dev,
 447:include/linux/netdevice.h **** 					      struct ifmap *map);
 448:include/linux/netdevice.h **** #define HAVE_HEADER_CACHE
 449:include/linux/netdevice.h **** 	int			(*hard_header_cache)(struct neighbour *neigh,
 450:include/linux/netdevice.h **** 						     struct hh_cache *hh);
 451:include/linux/netdevice.h **** 	void			(*header_cache_update)(struct hh_cache *hh,
 452:include/linux/netdevice.h **** 						       struct net_device *dev,
 453:include/linux/netdevice.h **** 						       unsigned char *  haddr);
 454:include/linux/netdevice.h **** #define HAVE_CHANGE_MTU
 455:include/linux/netdevice.h **** 	int			(*change_mtu)(struct net_device *dev, int new_mtu);
 456:include/linux/netdevice.h **** 
 457:include/linux/netdevice.h **** #define HAVE_TX_TIMEOUT
 458:include/linux/netdevice.h **** 	void			(*tx_timeout) (struct net_device *dev);
 459:include/linux/netdevice.h **** 
 460:include/linux/netdevice.h **** 	void			(*vlan_rx_register)(struct net_device *dev,
 461:include/linux/netdevice.h **** 						    struct vlan_group *grp);
 462:include/linux/netdevice.h **** 	void			(*vlan_rx_add_vid)(struct net_device *dev,
 463:include/linux/netdevice.h **** 						   unsigned short vid);
 464:include/linux/netdevice.h **** 	void			(*vlan_rx_kill_vid)(struct net_device *dev,
 465:include/linux/netdevice.h **** 						    unsigned short vid);
 466:include/linux/netdevice.h **** 
 467:include/linux/netdevice.h **** 	int			(*hard_header_parse)(struct sk_buff *skb,
 468:include/linux/netdevice.h **** 						     unsigned char *haddr);
 469:include/linux/netdevice.h **** 	int			(*neigh_setup)(struct net_device *dev, struct neigh_parms *);
 470:include/linux/netdevice.h **** #ifdef CONFIG_NETPOLL
 471:include/linux/netdevice.h **** 	struct netpoll		*np;
 472:include/linux/netdevice.h **** #endif
 473:include/linux/netdevice.h **** #ifdef CONFIG_NET_POLL_CONTROLLER
 474:include/linux/netdevice.h **** 	void                    (*poll_controller)(struct net_device *dev);
 475:include/linux/netdevice.h **** #endif
 476:include/linux/netdevice.h **** 
 477:include/linux/netdevice.h **** 	/* bridge stuff */
 478:include/linux/netdevice.h **** 	struct net_bridge_port	*br_port;
 479:include/linux/netdevice.h **** 
 480:include/linux/netdevice.h **** #ifdef CONFIG_NET_DIVERT
 481:include/linux/netdevice.h **** 	/* this will get initialized at each interface type init routine */
 482:include/linux/netdevice.h **** 	struct divert_blk	*divert;
 483:include/linux/netdevice.h **** #endif /* CONFIG_NET_DIVERT */
 484:include/linux/netdevice.h **** 
 485:include/linux/netdevice.h **** 	/* class/net/name entry */
 486:include/linux/netdevice.h **** 	struct class_device	class_dev;
 487:include/linux/netdevice.h **** };
 488:include/linux/netdevice.h **** 
 489:include/linux/netdevice.h **** #define	NETDEV_ALIGN		32
 490:include/linux/netdevice.h **** #define	NETDEV_ALIGN_CONST	(NETDEV_ALIGN - 1)
 491:include/linux/netdevice.h **** 
 492:include/linux/netdevice.h **** static inline void *netdev_priv(struct net_device *dev)
 493:include/linux/netdevice.h **** {
 494:include/linux/netdevice.h **** 	return (char *)dev + ((sizeof(struct net_device)
 495:include/linux/netdevice.h **** 					+ NETDEV_ALIGN_CONST)
GAS LISTING  			page 61


 496:include/linux/netdevice.h **** 				& ~NETDEV_ALIGN_CONST);
 497:include/linux/netdevice.h **** }
 498:include/linux/netdevice.h **** 
 499:include/linux/netdevice.h **** #define SET_MODULE_OWNER(dev) do { } while (0)
 500:include/linux/netdevice.h **** /* Set the sysfs physical device reference for the network logical device
 501:include/linux/netdevice.h ****  * if set prior to registration will cause a symlink during initialization.
 502:include/linux/netdevice.h ****  */
 503:include/linux/netdevice.h **** #define SET_NETDEV_DEV(net, pdev)	((net)->class_dev.dev = (pdev))
 504:include/linux/netdevice.h **** 
 505:include/linux/netdevice.h **** struct packet_type {
 506:include/linux/netdevice.h **** 	__be16			type;	/* This is really htons(ether_type).	*/
 507:include/linux/netdevice.h **** 	struct net_device		*dev;	/* NULL is wildcarded here		*/
 508:include/linux/netdevice.h **** 	int			(*func) (struct sk_buff *, struct net_device *,
 509:include/linux/netdevice.h **** 					 struct packet_type *);
 510:include/linux/netdevice.h **** 	void			*af_packet_priv;
 511:include/linux/netdevice.h **** 	struct list_head	list;
 512:include/linux/netdevice.h **** };
 513:include/linux/netdevice.h **** 
 514:include/linux/netdevice.h **** #include <linux/interrupt.h>
 515:include/linux/netdevice.h **** #include <linux/notifier.h>
 516:include/linux/netdevice.h **** 
 517:include/linux/netdevice.h **** extern struct net_device		loopback_dev;		/* The loopback */
 518:include/linux/netdevice.h **** extern struct net_device		*dev_base;		/* All devices */
 519:include/linux/netdevice.h **** extern rwlock_t				dev_base_lock;		/* Device list lock */
 520:include/linux/netdevice.h **** 
 521:include/linux/netdevice.h **** extern int 			netdev_boot_setup_check(struct net_device *dev);
 522:include/linux/netdevice.h **** extern unsigned long		netdev_boot_base(const char *prefix, int unit);
 523:include/linux/netdevice.h **** extern struct net_device    *dev_getbyhwaddr(unsigned short type, char *hwaddr);
 524:include/linux/netdevice.h **** extern struct net_device *dev_getfirstbyhwtype(unsigned short type);
 525:include/linux/netdevice.h **** extern void		dev_add_pack(struct packet_type *pt);
 526:include/linux/netdevice.h **** extern void		dev_remove_pack(struct packet_type *pt);
 527:include/linux/netdevice.h **** extern void		__dev_remove_pack(struct packet_type *pt);
 528:include/linux/netdevice.h **** 
 529:include/linux/netdevice.h **** extern struct net_device	*dev_get_by_flags(unsigned short flags,
 530:include/linux/netdevice.h **** 						  unsigned short mask);
 531:include/linux/netdevice.h **** extern struct net_device	*dev_get_by_name(const char *name);
 532:include/linux/netdevice.h **** extern struct net_device	*__dev_get_by_name(const char *name);
 533:include/linux/netdevice.h **** extern int		dev_alloc_name(struct net_device *dev, const char *name);
 534:include/linux/netdevice.h **** extern int		dev_open(struct net_device *dev);
 535:include/linux/netdevice.h **** extern int		dev_close(struct net_device *dev);
 536:include/linux/netdevice.h **** extern int		dev_queue_xmit(struct sk_buff *skb);
 537:include/linux/netdevice.h **** extern int		register_netdevice(struct net_device *dev);
 538:include/linux/netdevice.h **** extern int		unregister_netdevice(struct net_device *dev);
 539:include/linux/netdevice.h **** extern void		free_netdev(struct net_device *dev);
 540:include/linux/netdevice.h **** extern void		synchronize_net(void);
 541:include/linux/netdevice.h **** extern int 		register_netdevice_notifier(struct notifier_block *nb);
 542:include/linux/netdevice.h **** extern int		unregister_netdevice_notifier(struct notifier_block *nb);
 543:include/linux/netdevice.h **** extern int		call_netdevice_notifiers(unsigned long val, void *v);
 544:include/linux/netdevice.h **** extern struct net_device	*dev_get_by_index(int ifindex);
 545:include/linux/netdevice.h **** extern struct net_device	*__dev_get_by_index(int ifindex);
 546:include/linux/netdevice.h **** extern int		dev_restart(struct net_device *dev);
 547:include/linux/netdevice.h **** #ifdef CONFIG_NETPOLL_TRAP
 548:include/linux/netdevice.h **** extern int		netpoll_trap(void);
 549:include/linux/netdevice.h **** #endif
 550:include/linux/netdevice.h **** 
 551:include/linux/netdevice.h **** typedef int gifconf_func_t(struct net_device * dev, char __user * bufptr, int len);
 552:include/linux/netdevice.h **** extern int		register_gifconf(unsigned int family, gifconf_func_t * gifconf);
GAS LISTING  			page 62


 553:include/linux/netdevice.h **** static inline int unregister_gifconf(unsigned int family)
 554:include/linux/netdevice.h **** {
 555:include/linux/netdevice.h **** 	return register_gifconf(family, NULL);
 556:include/linux/netdevice.h **** }
 557:include/linux/netdevice.h **** 
 558:include/linux/netdevice.h **** /*
 559:include/linux/netdevice.h ****  * Incoming packets are placed on per-cpu queues so that
 560:include/linux/netdevice.h ****  * no locking is needed.
 561:include/linux/netdevice.h ****  */
 562:include/linux/netdevice.h **** 
 563:include/linux/netdevice.h **** struct softnet_data
 564:include/linux/netdevice.h **** {
 565:include/linux/netdevice.h **** 	int			throttle;
 566:include/linux/netdevice.h **** 	int			cng_level;
 567:include/linux/netdevice.h **** 	int			avg_blog;
 568:include/linux/netdevice.h **** 	struct sk_buff_head	input_pkt_queue;
 569:include/linux/netdevice.h **** 	struct list_head	poll_list;
 570:include/linux/netdevice.h **** 	struct net_device	*output_queue;
 571:include/linux/netdevice.h **** 	struct sk_buff		*completion_queue;
 572:include/linux/netdevice.h **** 
 573:include/linux/netdevice.h **** 	struct net_device	backlog_dev;	/* Sorry. 8) */
 574:include/linux/netdevice.h **** };
 575:include/linux/netdevice.h **** 
 576:include/linux/netdevice.h **** DECLARE_PER_CPU(struct softnet_data,softnet_data);
 577:include/linux/netdevice.h **** 
 578:include/linux/netdevice.h **** #define HAVE_NETIF_QUEUE
 579:include/linux/netdevice.h **** 
 580:include/linux/netdevice.h **** static inline void __netif_schedule(struct net_device *dev)
 581:include/linux/netdevice.h **** {
 582:include/linux/netdevice.h **** 	if (!test_and_set_bit(__LINK_STATE_SCHED, &dev->state)) {
 583:include/linux/netdevice.h **** 		unsigned long flags;
 584:include/linux/netdevice.h **** 		struct softnet_data *sd;
 585:include/linux/netdevice.h **** 
 586:include/linux/netdevice.h **** 		local_irq_save(flags);
 587:include/linux/netdevice.h **** 		sd = &__get_cpu_var(softnet_data);
 588:include/linux/netdevice.h **** 		dev->next_sched = sd->output_queue;
 589:include/linux/netdevice.h **** 		sd->output_queue = dev;
 590:include/linux/netdevice.h **** 		raise_softirq_irqoff(NET_TX_SOFTIRQ);
 591:include/linux/netdevice.h **** 		local_irq_restore(flags);
 592:include/linux/netdevice.h **** 	}
 593:include/linux/netdevice.h **** }
 594:include/linux/netdevice.h **** 
 595:include/linux/netdevice.h **** static inline void netif_schedule(struct net_device *dev)
 596:include/linux/netdevice.h **** {
 597:include/linux/netdevice.h **** 	if (!test_bit(__LINK_STATE_XOFF, &dev->state))
 598:include/linux/netdevice.h **** 		__netif_schedule(dev);
 599:include/linux/netdevice.h **** }
 600:include/linux/netdevice.h **** 
 601:include/linux/netdevice.h **** static inline void netif_start_queue(struct net_device *dev)
 602:include/linux/netdevice.h **** {
 603:include/linux/netdevice.h **** 	clear_bit(__LINK_STATE_XOFF, &dev->state);
 604:include/linux/netdevice.h **** }
 605:include/linux/netdevice.h **** 
 606:include/linux/netdevice.h **** static inline void netif_wake_queue(struct net_device *dev)
 607:include/linux/netdevice.h **** {
 608:include/linux/netdevice.h **** #ifdef CONFIG_NETPOLL_TRAP
 609:include/linux/netdevice.h **** 	if (netpoll_trap())
GAS LISTING  			page 63


 610:include/linux/netdevice.h **** 		return;
 611:include/linux/netdevice.h **** #endif
 612:include/linux/netdevice.h **** 	if (test_and_clear_bit(__LINK_STATE_XOFF, &dev->state))
 613:include/linux/netdevice.h **** 		__netif_schedule(dev);
 614:include/linux/netdevice.h **** }
 615:include/linux/netdevice.h **** 
 616:include/linux/netdevice.h **** static inline void netif_stop_queue(struct net_device *dev)
 617:include/linux/netdevice.h **** {
 618:include/linux/netdevice.h **** #ifdef CONFIG_NETPOLL_TRAP
 619:include/linux/netdevice.h **** 	if (netpoll_trap())
 620:include/linux/netdevice.h **** 		return;
 621:include/linux/netdevice.h **** #endif
 622:include/linux/netdevice.h **** 	set_bit(__LINK_STATE_XOFF, &dev->state);
 623:include/linux/netdevice.h **** }
 624:include/linux/netdevice.h **** 
 625:include/linux/netdevice.h **** static inline int netif_queue_stopped(const struct net_device *dev)
 626:include/linux/netdevice.h **** {
 627:include/linux/netdevice.h **** 	return test_bit(__LINK_STATE_XOFF, &dev->state);
 628:include/linux/netdevice.h **** }
 629:include/linux/netdevice.h **** 
 630:include/linux/netdevice.h **** static inline int netif_running(const struct net_device *dev)
 631:include/linux/netdevice.h **** {
 632:include/linux/netdevice.h **** 	return test_bit(__LINK_STATE_START, &dev->state);
 633:include/linux/netdevice.h **** }
 634:include/linux/netdevice.h **** 
 635:include/linux/netdevice.h **** 
 636:include/linux/netdevice.h **** /* Use this variant when it is known for sure that it
 637:include/linux/netdevice.h ****  * is executing from interrupt context.
 638:include/linux/netdevice.h ****  */
 639:include/linux/netdevice.h **** static inline void dev_kfree_skb_irq(struct sk_buff *skb)
 640:include/linux/netdevice.h **** {
 641:include/linux/netdevice.h **** 	if (atomic_dec_and_test(&skb->users)) {
 642:include/linux/netdevice.h **** 		struct softnet_data *sd;
 643:include/linux/netdevice.h **** 		unsigned long flags;
 644:include/linux/netdevice.h **** 
 645:include/linux/netdevice.h **** 		local_irq_save(flags);
 646:include/linux/netdevice.h **** 		sd = &__get_cpu_var(softnet_data);
 647:include/linux/netdevice.h **** 		skb->next = sd->completion_queue;
 648:include/linux/netdevice.h **** 		sd->completion_queue = skb;
 649:include/linux/netdevice.h **** 		raise_softirq_irqoff(NET_TX_SOFTIRQ);
 650:include/linux/netdevice.h **** 		local_irq_restore(flags);
 651:include/linux/netdevice.h **** 	}
 652:include/linux/netdevice.h **** }
 653:include/linux/netdevice.h **** 
 654:include/linux/netdevice.h **** /* Use this variant in places where it could be invoked
 655:include/linux/netdevice.h ****  * either from interrupt or non-interrupt context.
 656:include/linux/netdevice.h ****  */
 657:include/linux/netdevice.h **** static inline void dev_kfree_skb_any(struct sk_buff *skb)
 658:include/linux/netdevice.h **** {
 237              	.loc 6 658 0
 238 0127 8B560C   	movl 12(%esi),%edx
 239              	.LBB20:
 240              	.loc 5 89 0
 241 012a 7507     	jne .L42
 242              	.LBB21:
 659:include/linux/netdevice.h **** 	if (in_irq() || irqs_disabled())
 243              	.loc 6 659 0
GAS LISTING  			page 64


 244              	
 245 012c 9C58     	pushfl
 246              	
 247              	.LBE21:
 248 012e F6C402   	testb $2,%ah
 249 0131 752B     	jne .L41
 250              	.L42:
 251              	.LBB22:
 252              	.LBB23:
 253              	.LBB24:
 254              	.LBB25:
 255              	.file 7 "include/asm/atomic.h"
   1:include/asm/atomic.h **** #ifndef __ARCH_I386_ATOMIC__
   2:include/asm/atomic.h **** #define __ARCH_I386_ATOMIC__
   3:include/asm/atomic.h **** 
   4:include/asm/atomic.h **** #include <linux/config.h>
   5:include/asm/atomic.h **** #include <linux/compiler.h>
   6:include/asm/atomic.h **** #include <asm/processor.h>
   7:include/asm/atomic.h **** 
   8:include/asm/atomic.h **** /*
   9:include/asm/atomic.h ****  * Atomic operations that C can't guarantee us.  Useful for
  10:include/asm/atomic.h ****  * resource counting etc..
  11:include/asm/atomic.h ****  */
  12:include/asm/atomic.h **** 
  13:include/asm/atomic.h **** #ifdef CONFIG_SMP
  14:include/asm/atomic.h **** #define LOCK "lock ; "
  15:include/asm/atomic.h **** #else
  16:include/asm/atomic.h **** #define LOCK ""
  17:include/asm/atomic.h **** #endif
  18:include/asm/atomic.h **** 
  19:include/asm/atomic.h **** /*
  20:include/asm/atomic.h ****  * Make sure gcc doesn't try to be clever and move things around
  21:include/asm/atomic.h ****  * on us. We need to use _exactly_ the address the user gave us,
  22:include/asm/atomic.h ****  * not some alias that contains the same information.
  23:include/asm/atomic.h ****  */
  24:include/asm/atomic.h **** typedef struct { volatile int counter; } atomic_t;
  25:include/asm/atomic.h **** 
  26:include/asm/atomic.h **** #define ATOMIC_INIT(i)	{ (i) }
  27:include/asm/atomic.h **** 
  28:include/asm/atomic.h **** /**
  29:include/asm/atomic.h ****  * atomic_read - read atomic variable
  30:include/asm/atomic.h ****  * @v: pointer of type atomic_t
  31:include/asm/atomic.h ****  * 
  32:include/asm/atomic.h ****  * Atomically reads the value of @v.
  33:include/asm/atomic.h ****  */ 
  34:include/asm/atomic.h **** #define atomic_read(v)		((v)->counter)
  35:include/asm/atomic.h **** 
  36:include/asm/atomic.h **** /**
  37:include/asm/atomic.h ****  * atomic_set - set atomic variable
  38:include/asm/atomic.h ****  * @v: pointer of type atomic_t
  39:include/asm/atomic.h ****  * @i: required value
  40:include/asm/atomic.h ****  * 
  41:include/asm/atomic.h ****  * Atomically sets the value of @v to @i.
  42:include/asm/atomic.h ****  */ 
  43:include/asm/atomic.h **** #define atomic_set(v,i)		(((v)->counter) = (i))
  44:include/asm/atomic.h **** 
  45:include/asm/atomic.h **** /**
GAS LISTING  			page 65


  46:include/asm/atomic.h ****  * atomic_add - add integer to atomic variable
  47:include/asm/atomic.h ****  * @i: integer value to add
  48:include/asm/atomic.h ****  * @v: pointer of type atomic_t
  49:include/asm/atomic.h ****  * 
  50:include/asm/atomic.h ****  * Atomically adds @i to @v.
  51:include/asm/atomic.h ****  */
  52:include/asm/atomic.h **** static __inline__ void atomic_add(int i, atomic_t *v)
  53:include/asm/atomic.h **** {
  54:include/asm/atomic.h **** 	__asm__ __volatile__(
  55:include/asm/atomic.h **** 		LOCK "addl %1,%0"
  56:include/asm/atomic.h **** 		:"=m" (v->counter)
  57:include/asm/atomic.h **** 		:"ir" (i), "m" (v->counter));
  58:include/asm/atomic.h **** }
  59:include/asm/atomic.h **** 
  60:include/asm/atomic.h **** /**
  61:include/asm/atomic.h ****  * atomic_sub - subtract the atomic variable
  62:include/asm/atomic.h ****  * @i: integer value to subtract
  63:include/asm/atomic.h ****  * @v: pointer of type atomic_t
  64:include/asm/atomic.h ****  * 
  65:include/asm/atomic.h ****  * Atomically subtracts @i from @v.
  66:include/asm/atomic.h ****  */
  67:include/asm/atomic.h **** static __inline__ void atomic_sub(int i, atomic_t *v)
  68:include/asm/atomic.h **** {
  69:include/asm/atomic.h **** 	__asm__ __volatile__(
  70:include/asm/atomic.h **** 		LOCK "subl %1,%0"
  71:include/asm/atomic.h **** 		:"=m" (v->counter)
  72:include/asm/atomic.h **** 		:"ir" (i), "m" (v->counter));
  73:include/asm/atomic.h **** }
  74:include/asm/atomic.h **** 
  75:include/asm/atomic.h **** /**
  76:include/asm/atomic.h ****  * atomic_sub_and_test - subtract value from variable and test result
  77:include/asm/atomic.h ****  * @i: integer value to subtract
  78:include/asm/atomic.h ****  * @v: pointer of type atomic_t
  79:include/asm/atomic.h ****  * 
  80:include/asm/atomic.h ****  * Atomically subtracts @i from @v and returns
  81:include/asm/atomic.h ****  * true if the result is zero, or false for all
  82:include/asm/atomic.h ****  * other cases.
  83:include/asm/atomic.h ****  */
  84:include/asm/atomic.h **** static __inline__ int atomic_sub_and_test(int i, atomic_t *v)
  85:include/asm/atomic.h **** {
  86:include/asm/atomic.h **** 	unsigned char c;
  87:include/asm/atomic.h **** 
  88:include/asm/atomic.h **** 	__asm__ __volatile__(
  89:include/asm/atomic.h **** 		LOCK "subl %2,%0; sete %1"
  90:include/asm/atomic.h **** 		:"=m" (v->counter), "=qm" (c)
  91:include/asm/atomic.h **** 		:"ir" (i), "m" (v->counter) : "memory");
  92:include/asm/atomic.h **** 	return c;
  93:include/asm/atomic.h **** }
  94:include/asm/atomic.h **** 
  95:include/asm/atomic.h **** /**
  96:include/asm/atomic.h ****  * atomic_inc - increment atomic variable
  97:include/asm/atomic.h ****  * @v: pointer of type atomic_t
  98:include/asm/atomic.h ****  * 
  99:include/asm/atomic.h ****  * Atomically increments @v by 1.
 100:include/asm/atomic.h ****  */ 
 101:include/asm/atomic.h **** static __inline__ void atomic_inc(atomic_t *v)
 102:include/asm/atomic.h **** {
GAS LISTING  			page 66


 103:include/asm/atomic.h **** 	__asm__ __volatile__(
 104:include/asm/atomic.h **** 		LOCK "incl %0"
 105:include/asm/atomic.h **** 		:"=m" (v->counter)
 106:include/asm/atomic.h **** 		:"m" (v->counter));
 107:include/asm/atomic.h **** }
 108:include/asm/atomic.h **** 
 109:include/asm/atomic.h **** /**
 110:include/asm/atomic.h ****  * atomic_dec - decrement atomic variable
 111:include/asm/atomic.h ****  * @v: pointer of type atomic_t
 112:include/asm/atomic.h ****  * 
 113:include/asm/atomic.h ****  * Atomically decrements @v by 1.
 114:include/asm/atomic.h ****  */ 
 115:include/asm/atomic.h **** static __inline__ void atomic_dec(atomic_t *v)
 116:include/asm/atomic.h **** {
 117:include/asm/atomic.h **** 	__asm__ __volatile__(
 118:include/asm/atomic.h **** 		LOCK "decl %0"
 119:include/asm/atomic.h **** 		:"=m" (v->counter)
 120:include/asm/atomic.h **** 		:"m" (v->counter));
 121:include/asm/atomic.h **** }
 122:include/asm/atomic.h **** 
 123:include/asm/atomic.h **** /**
 124:include/asm/atomic.h ****  * atomic_dec_and_test - decrement and test
 125:include/asm/atomic.h ****  * @v: pointer of type atomic_t
 126:include/asm/atomic.h ****  * 
 127:include/asm/atomic.h ****  * Atomically decrements @v by 1 and
 128:include/asm/atomic.h ****  * returns true if the result is 0, or false for all other
 129:include/asm/atomic.h ****  * cases.
 130:include/asm/atomic.h ****  */ 
 131:include/asm/atomic.h **** static __inline__ int atomic_dec_and_test(atomic_t *v)
 132:include/asm/atomic.h **** {
 133:include/asm/atomic.h **** 	unsigned char c;
 134:include/asm/atomic.h **** 
 135:include/asm/atomic.h **** 	__asm__ __volatile__(
 256              	.loc 7 135 0
 257              	
 258 0133 FF8AA000 	decl 160(%edx)
 258      00000F94 
 258      C0
 259              	
 260              	.LBE25:
 261              	.LBE24:
 262              	.loc 7 132 0
 263 013c 84C0     	testb %al,%al
 264 013e 743D     	je .L55
 265              	.LBB26:
 266              	.loc 6 645 0
 267              	
 268 0140 9C5BFA   	pushfl
 269              	.loc 6 647 0
 270              	
 271 0143 A1240000 	movl per_cpu__softnet_data+36,%eax
 271      00
 272 0148 8902     	movl %eax,(%edx)
 273              	.loc 6 649 0
 274 014a B8020000 	movl $2,%eax
 274      00
 275              	.loc 6 648 0
GAS LISTING  			page 67


 276 014f 89152400 	movl %edx,per_cpu__softnet_data+36
 276      0000
 277              	.loc 6 649 0
 278              	.LCFI16:
 279 0155 E8FCFFFF 	call raise_softirq_irqoff
 279      FF
 280              	.loc 6 650 0
 281              	
 282 015a 539D     	pushl %ebx
 283              	
 284              	.LBE26:
 285              	.LBE23:
 286              	.LBE22:
 287 015c EB1F     	jmp .L55
 288              	.LCFI17:
 289              	.L41:
 290              	.LBB27:
 291              	.LBB28:
 292              	.loc 3 369 0
 293 015e 8B82A000 	movl 160(%edx),%eax
 293      0000
 294 0164 48       	decl %eax
 295 0165 7502     	jne .L50
 296              	.loc 3 370 0
 297 0167 EB0D     	jmp .L51
 298              	.L50:
 299              	.LBB29:
 300              	.LBB30:
 301              	.loc 7 135 0
 302              	
 303 0169 FF8AA000 	decl 160(%edx)
 303      00000F94 
 303      C0
 304              	
 305              	.LBE30:
 306              	.LBE29:
 307              	.loc 7 132 0
 308 0172 84C0     	testb %al,%al
 309 0174 7407     	je .L55
 310              	.L51:
 311              	.loc 3 373 0
 312 0176 52       	pushl %edx
 313              	.LCFI18:
 314 0177 E8FCFFFF 	call __kfree_skb
 314      FF
 315 017c 59       	popl %ecx
 316              	.LCFI19:
 317              	.L55:
 318              	.LBE28:
 319              	.LBE27:
 320              	.LBE20:
 321              	.LBE16:
  71:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 					     "seq=%u last_frag=%u\n",
  72:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 					     entry->seq, entry->last_frag);
  73:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			dev_kfree_skb_any(entry->skb);
  74:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			entry->skb = NULL;
 322              	.loc 1 74 0
GAS LISTING  			page 68


 323 017d C7460C00 	movl $0,12(%esi)
 323      000000
 324              	.L35:
  75:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		}
  76:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
  77:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		if (entry->skb != NULL && entry->seq == seq &&
 325              	.loc 1 77 0
 326 0184 837E0C00 	cmpl $0,12(%esi)
 327 0188 7460     	je .L34
 328 018a 8B44241C 	movl 28(%esp),%eax
 329 018e 394604   	cmpl %eax,4(%esi)
 330 0191 7557     	jne .L34
 331 0193 8B4608   	movl 8(%esi),%eax
 332 0196 40       	incl %eax
 333 0197 3B442420 	cmpl 32(%esp),%eax
 334 019b 7407     	je .L57
 335 019d 837C2420 	cmpl $-1,32(%esp)
 335      FF
 336 01a2 7546     	jne .L34
 337              	.L57:
 338              	.LBB31:
 339              	.LBB32:
 340              	.loc 2 1169 0
 341 01a4 8B542424 	movl 36(%esp),%edx
 342 01a8 668B02   	movw (%edx),%ax
 343 01ab 89D1     	movl %edx,%ecx
 344 01ad 668B5202 	movw 2(%edx),%dx
 345 01b1 66335612 	xorw 18(%esi),%dx
 346 01b5 66334610 	xorw 16(%esi),%ax
 347 01b9 09D0     	orl %edx,%eax
 348 01bb 668B5104 	movw 4(%ecx),%dx
 349 01bf 66335614 	xorw 20(%esi),%dx
 350              	.LBE32:
 351              	.LBE31:
 352              	.loc 2 1165 0
 353 01c3 6609D0   	orw %dx,%ax
 354 01c6 7522     	jne .L34
 355              	.LBB33:
 356              	.LBB34:
 357              	.loc 2 1169 0
 358 01c8 668B07   	movw (%edi),%ax
 359 01cb 668B5702 	movw 2(%edi),%dx
 360 01cf 66335618 	xorw 24(%esi),%dx
 361 01d3 66334616 	xorw 22(%esi),%ax
 362 01d7 09D0     	orl %edx,%eax
 363 01d9 668B5704 	movw 4(%edi),%dx
 364 01dd 6633561A 	xorw 26(%esi),%dx
 365              	.LBE34:
 366              	.LBE33:
 367              	.loc 2 1165 0
 368 01e1 6609D0   	orw %dx,%ax
 369 01e4 7504     	jne .L34
  78:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		    (entry->last_frag + 1 == frag || frag == -1) &&
  79:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		    !compare_ether_addr(entry->src_addr, src) &&
  80:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		    !compare_ether_addr(entry->dst_addr, dst))
  81:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			return entry;
 370              	.loc 1 81 0
GAS LISTING  			page 69


 371 01e6 89F0     	movl %esi,%eax
 372 01e8 EB0F     	jmp .L31
 373              	.L34:
 374              	.loc 1 66 0
 375 01ea 45       	incl %ebp
 376 01eb 83C61C   	addl $28,%esi
 377 01ee 83FD03   	cmpl $3,%ebp
 378 01f1 0F8EC7FE 	jle .L64
 378      FFFF
  82:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	}
  83:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
  84:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	return NULL;
 379              	.loc 1 84 0
 380 01f7 31C0     	xorl %eax,%eax
 381              	.L31:
  85:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** }
 382              	.loc 1 85 0
 383 01f9 5A       	popl %edx
 384              	.LCFI20:
 385 01fa 5B       	popl %ebx
 386 01fb 5E       	popl %esi
 387 01fc 5F       	popl %edi
 388 01fd 5D       	popl %ebp
 389 01fe C3       	ret
 390              	.LFE925:
 393              	ieee80211_frag_cache_get:
 394              	.LFB926:
  86:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
  87:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** /* Called only as a tasklet (software IRQ) */
  88:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** static struct sk_buff *ieee80211_frag_cache_get(struct ieee80211_device *ieee,
  89:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 						struct ieee80211_hdr_4addr *hdr)
  90:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** {
 395              	.loc 1 90 0
 396 01ff 55       	pushl %ebp
 397              	.LCFI21:
 398 0200 57       	pushl %edi
 399              	.LCFI22:
 400 0201 56       	pushl %esi
 401              	.LCFI23:
 402 0202 53       	pushl %ebx
 403              	.LCFI24:
 404              	.loc 1 90 0
 405 0203 53       	pushl %ebx
 406              	.LCFI25:
 407 0204 53       	pushl %ebx
 408              	.LCFI26:
  91:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	struct sk_buff *skb = NULL;
  92:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	u16 sc;
  93:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	unsigned int frag, seq;
  94:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	struct ieee80211_frag_entry *entry;
  95:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
  96:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	sc = le16_to_cpu(hdr->seq_ctl);
  97:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	frag = WLAN_GET_SEQ_FRAG(sc);
 409              	.loc 1 97 0
 410 0205 8B542420 	movl 32(%esp),%edx
 411              	.loc 1 91 0
 412 0209 C7442404 	movl $0,4(%esp)
GAS LISTING  			page 70


 412      00000000 
 413              	.loc 1 97 0
 414 0211 0FB74216 	movzwl 22(%edx),%eax
  98:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	seq = WLAN_GET_SEQ_SEQ(sc);
 415              	.loc 1 98 0
 416 0215 89C2     	movl %eax,%edx
  99:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 100:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	if (frag == 0) {
 417              	.loc 1 100 0
 418 0217 89C3     	movl %eax,%ebx
 419              	.loc 1 98 0
 420 0219 81E2F0FF 	andl $65520,%edx
 420      0000
 421              	.loc 1 100 0
 422 021f 83E30F   	andl $15,%ebx
 423              	.loc 1 90 0
 424 0222 8B6C241C 	movl 28(%esp),%ebp
 425              	.loc 1 98 0
 426 0226 891424   	movl %edx,(%esp)
 427              	.loc 1 100 0
 428 0229 0F85FC00 	jne .L68
 428      0000
 429              	.LBB35:
 812:include/linux/skbuff.h **** }
 813:include/linux/skbuff.h **** 
 814:include/linux/skbuff.h **** extern unsigned char *__pskb_pull_tail(struct sk_buff *skb, int delta);
 815:include/linux/skbuff.h **** 
 816:include/linux/skbuff.h **** static inline unsigned char *__pskb_pull(struct sk_buff *skb, unsigned int len)
 817:include/linux/skbuff.h **** {
 818:include/linux/skbuff.h **** 	if (len > skb_headlen(skb) &&
 819:include/linux/skbuff.h **** 	    !__pskb_pull_tail(skb, len-skb_headlen(skb)))
 820:include/linux/skbuff.h **** 		return NULL;
 821:include/linux/skbuff.h **** 	skb->len -= len;
 822:include/linux/skbuff.h **** 	return skb->data += len;
 823:include/linux/skbuff.h **** }
 824:include/linux/skbuff.h **** 
 825:include/linux/skbuff.h **** static inline unsigned char *pskb_pull(struct sk_buff *skb, unsigned int len)
 826:include/linux/skbuff.h **** {
 827:include/linux/skbuff.h **** 	return unlikely(len > skb->len) ? NULL : __pskb_pull(skb, len);
 828:include/linux/skbuff.h **** }
 829:include/linux/skbuff.h **** 
 830:include/linux/skbuff.h **** static inline int pskb_may_pull(struct sk_buff *skb, unsigned int len)
 831:include/linux/skbuff.h **** {
 832:include/linux/skbuff.h **** 	if (likely(len <= skb_headlen(skb)))
 833:include/linux/skbuff.h **** 		return 1;
 834:include/linux/skbuff.h **** 	if (unlikely(len > skb->len))
 835:include/linux/skbuff.h **** 		return 0;
 836:include/linux/skbuff.h **** 	return __pskb_pull_tail(skb, len-skb_headlen(skb)) != NULL;
 837:include/linux/skbuff.h **** }
 838:include/linux/skbuff.h **** 
 839:include/linux/skbuff.h **** /**
 840:include/linux/skbuff.h ****  *	skb_headroom - bytes at buffer head
 841:include/linux/skbuff.h ****  *	@skb: buffer to check
 842:include/linux/skbuff.h ****  *
 843:include/linux/skbuff.h ****  *	Return the number of bytes of free space at the head of an &sk_buff.
 844:include/linux/skbuff.h ****  */
 845:include/linux/skbuff.h **** static inline int skb_headroom(const struct sk_buff *skb)
GAS LISTING  			page 71


 846:include/linux/skbuff.h **** {
 847:include/linux/skbuff.h **** 	return skb->data - skb->head;
 848:include/linux/skbuff.h **** }
 849:include/linux/skbuff.h **** 
 850:include/linux/skbuff.h **** /**
 851:include/linux/skbuff.h ****  *	skb_tailroom - bytes at buffer end
 852:include/linux/skbuff.h ****  *	@skb: buffer to check
 853:include/linux/skbuff.h ****  *
 854:include/linux/skbuff.h ****  *	Return the number of bytes of free space at the tail of an sk_buff
 855:include/linux/skbuff.h ****  */
 856:include/linux/skbuff.h **** static inline int skb_tailroom(const struct sk_buff *skb)
 857:include/linux/skbuff.h **** {
 858:include/linux/skbuff.h **** 	return skb_is_nonlinear(skb) ? 0 : skb->end - skb->tail;
 859:include/linux/skbuff.h **** }
 860:include/linux/skbuff.h **** 
 861:include/linux/skbuff.h **** /**
 862:include/linux/skbuff.h ****  *	skb_reserve - adjust headroom
 863:include/linux/skbuff.h ****  *	@skb: buffer to alter
 864:include/linux/skbuff.h ****  *	@len: bytes to move
 865:include/linux/skbuff.h ****  *
 866:include/linux/skbuff.h ****  *	Increase the headroom of an empty &sk_buff by reducing the tail
 867:include/linux/skbuff.h ****  *	room. This is only allowed for an empty buffer.
 868:include/linux/skbuff.h ****  */
 869:include/linux/skbuff.h **** static inline void skb_reserve(struct sk_buff *skb, unsigned int len)
 870:include/linux/skbuff.h **** {
 871:include/linux/skbuff.h **** 	skb->data += len;
 872:include/linux/skbuff.h **** 	skb->tail += len;
 873:include/linux/skbuff.h **** }
 874:include/linux/skbuff.h **** 
 875:include/linux/skbuff.h **** /*
 876:include/linux/skbuff.h ****  * CPUs often take a performance hit when accessing unaligned memory
 877:include/linux/skbuff.h ****  * locations. The actual performance hit varies, it can be small if the
 878:include/linux/skbuff.h ****  * hardware handles it or large if we have to take an exception and fix it
 879:include/linux/skbuff.h ****  * in software.
 880:include/linux/skbuff.h ****  *
 881:include/linux/skbuff.h ****  * Since an ethernet header is 14 bytes network drivers often end up with
 882:include/linux/skbuff.h ****  * the IP header at an unaligned offset. The IP header can be aligned by
 883:include/linux/skbuff.h ****  * shifting the start of the packet by 2 bytes. Drivers should do this
 884:include/linux/skbuff.h ****  * with:
 885:include/linux/skbuff.h ****  *
 886:include/linux/skbuff.h ****  * skb_reserve(NET_IP_ALIGN);
 887:include/linux/skbuff.h ****  *
 888:include/linux/skbuff.h ****  * The downside to this alignment of the IP header is that the DMA is now
 889:include/linux/skbuff.h ****  * unaligned. On some architectures the cost of an unaligned DMA is high
 890:include/linux/skbuff.h ****  * and this cost outweighs the gains made by aligning the IP header.
 891:include/linux/skbuff.h ****  * 
 892:include/linux/skbuff.h ****  * Since this trade off varies between architectures, we allow NET_IP_ALIGN
 893:include/linux/skbuff.h ****  * to be overridden.
 894:include/linux/skbuff.h ****  */
 895:include/linux/skbuff.h **** #ifndef NET_IP_ALIGN
 896:include/linux/skbuff.h **** #define NET_IP_ALIGN	2
 897:include/linux/skbuff.h **** #endif
 898:include/linux/skbuff.h **** 
 899:include/linux/skbuff.h **** extern int ___pskb_trim(struct sk_buff *skb, unsigned int len, int realloc);
 900:include/linux/skbuff.h **** 
 901:include/linux/skbuff.h **** static inline void __skb_trim(struct sk_buff *skb, unsigned int len)
 902:include/linux/skbuff.h **** {
GAS LISTING  			page 72


 903:include/linux/skbuff.h **** 	if (!skb->data_len) {
 904:include/linux/skbuff.h **** 		skb->len  = len;
 905:include/linux/skbuff.h **** 		skb->tail = skb->data + len;
 906:include/linux/skbuff.h **** 	} else
 907:include/linux/skbuff.h **** 		___pskb_trim(skb, len, 0);
 908:include/linux/skbuff.h **** }
 909:include/linux/skbuff.h **** 
 910:include/linux/skbuff.h **** /**
 911:include/linux/skbuff.h ****  *	skb_trim - remove end from a buffer
 912:include/linux/skbuff.h ****  *	@skb: buffer to alter
 913:include/linux/skbuff.h ****  *	@len: new length
 914:include/linux/skbuff.h ****  *
 915:include/linux/skbuff.h ****  *	Cut the length of a buffer down by removing data from the tail. If
 916:include/linux/skbuff.h ****  *	the buffer is already under the length specified it is not modified.
 917:include/linux/skbuff.h ****  */
 918:include/linux/skbuff.h **** static inline void skb_trim(struct sk_buff *skb, unsigned int len)
 919:include/linux/skbuff.h **** {
 920:include/linux/skbuff.h **** 	if (skb->len > len)
 921:include/linux/skbuff.h **** 		__skb_trim(skb, len);
 922:include/linux/skbuff.h **** }
 923:include/linux/skbuff.h **** 
 924:include/linux/skbuff.h **** 
 925:include/linux/skbuff.h **** static inline int __pskb_trim(struct sk_buff *skb, unsigned int len)
 926:include/linux/skbuff.h **** {
 927:include/linux/skbuff.h **** 	if (!skb->data_len) {
 928:include/linux/skbuff.h **** 		skb->len  = len;
 929:include/linux/skbuff.h **** 		skb->tail = skb->data+len;
 930:include/linux/skbuff.h **** 		return 0;
 931:include/linux/skbuff.h **** 	}
 932:include/linux/skbuff.h **** 	return ___pskb_trim(skb, len, 1);
 933:include/linux/skbuff.h **** }
 934:include/linux/skbuff.h **** 
 935:include/linux/skbuff.h **** static inline int pskb_trim(struct sk_buff *skb, unsigned int len)
 936:include/linux/skbuff.h **** {
 937:include/linux/skbuff.h **** 	return (len < skb->len) ? __pskb_trim(skb, len) : 0;
 938:include/linux/skbuff.h **** }
 939:include/linux/skbuff.h **** 
 940:include/linux/skbuff.h **** /**
 941:include/linux/skbuff.h ****  *	skb_orphan - orphan a buffer
 942:include/linux/skbuff.h ****  *	@skb: buffer to orphan
 943:include/linux/skbuff.h ****  *
 944:include/linux/skbuff.h ****  *	If a buffer currently has an owner then we call the owner's
 945:include/linux/skbuff.h ****  *	destructor function and make the @skb unowned. The buffer continues
 946:include/linux/skbuff.h ****  *	to exist but is no longer charged to its former owner.
 947:include/linux/skbuff.h ****  */
 948:include/linux/skbuff.h **** static inline void skb_orphan(struct sk_buff *skb)
 949:include/linux/skbuff.h **** {
 950:include/linux/skbuff.h **** 	if (skb->destructor)
 951:include/linux/skbuff.h **** 		skb->destructor(skb);
 952:include/linux/skbuff.h **** 	skb->destructor = NULL;
 953:include/linux/skbuff.h **** 	skb->sk		= NULL;
 954:include/linux/skbuff.h **** }
 955:include/linux/skbuff.h **** 
 956:include/linux/skbuff.h **** /**
 957:include/linux/skbuff.h ****  *	__skb_queue_purge - empty a list
 958:include/linux/skbuff.h ****  *	@list: list to empty
 959:include/linux/skbuff.h ****  *
GAS LISTING  			page 73


 960:include/linux/skbuff.h ****  *	Delete all buffers on an &sk_buff list. Each buffer is removed from
 961:include/linux/skbuff.h ****  *	the list and one reference dropped. This function does not take the
 962:include/linux/skbuff.h ****  *	list lock and the caller must hold the relevant locks to use it.
 963:include/linux/skbuff.h ****  */
 964:include/linux/skbuff.h **** extern void skb_queue_purge(struct sk_buff_head *list);
 965:include/linux/skbuff.h **** static inline void __skb_queue_purge(struct sk_buff_head *list)
 966:include/linux/skbuff.h **** {
 967:include/linux/skbuff.h **** 	struct sk_buff *skb;
 968:include/linux/skbuff.h **** 	while ((skb = __skb_dequeue(list)) != NULL)
 969:include/linux/skbuff.h **** 		kfree_skb(skb);
 970:include/linux/skbuff.h **** }
 971:include/linux/skbuff.h **** 
 972:include/linux/skbuff.h **** #ifndef CONFIG_HAVE_ARCH_DEV_ALLOC_SKB
 973:include/linux/skbuff.h **** /**
 974:include/linux/skbuff.h ****  *	__dev_alloc_skb - allocate an skbuff for sending
 975:include/linux/skbuff.h ****  *	@length: length to allocate
 976:include/linux/skbuff.h ****  *	@gfp_mask: get_free_pages mask, passed to alloc_skb
 977:include/linux/skbuff.h ****  *
 978:include/linux/skbuff.h ****  *	Allocate a new &sk_buff and assign it a usage count of one. The
 979:include/linux/skbuff.h ****  *	buffer has unspecified headroom built in. Users should allocate
 980:include/linux/skbuff.h ****  *	the headroom they think they need without accounting for the
 981:include/linux/skbuff.h ****  *	built in space. The built in space is used for optimisations.
 982:include/linux/skbuff.h ****  *
 983:include/linux/skbuff.h ****  *	%NULL is returned in there is no free memory.
 984:include/linux/skbuff.h ****  */
 985:include/linux/skbuff.h **** static inline struct sk_buff *__dev_alloc_skb(unsigned int length,
 986:include/linux/skbuff.h **** 					      int gfp_mask)
 987:include/linux/skbuff.h **** {
 988:include/linux/skbuff.h **** 	struct sk_buff *skb = alloc_skb(length + 16, gfp_mask);
 989:include/linux/skbuff.h **** 	if (likely(skb))
 990:include/linux/skbuff.h **** 		skb_reserve(skb, 16);
 991:include/linux/skbuff.h **** 	return skb;
 992:include/linux/skbuff.h **** }
 993:include/linux/skbuff.h **** #else
 994:include/linux/skbuff.h **** extern struct sk_buff *__dev_alloc_skb(unsigned int length, int gfp_mask);
 995:include/linux/skbuff.h **** #endif
 996:include/linux/skbuff.h **** 
 997:include/linux/skbuff.h **** /**
 998:include/linux/skbuff.h ****  *	dev_alloc_skb - allocate an skbuff for sending
 999:include/linux/skbuff.h ****  *	@length: length to allocate
1000:include/linux/skbuff.h ****  *
1001:include/linux/skbuff.h ****  *	Allocate a new &sk_buff and assign it a usage count of one. The
1002:include/linux/skbuff.h ****  *	buffer has unspecified headroom built in. Users should allocate
1003:include/linux/skbuff.h ****  *	the headroom they think they need without accounting for the
1004:include/linux/skbuff.h ****  *	built in space. The built in space is used for optimisations.
1005:include/linux/skbuff.h ****  *
1006:include/linux/skbuff.h ****  *	%NULL is returned in there is no free memory. Although this function
1007:include/linux/skbuff.h ****  *	allocates memory it can be called from an interrupt.
1008:include/linux/skbuff.h ****  */
1009:include/linux/skbuff.h **** static inline struct sk_buff *dev_alloc_skb(unsigned int length)
1010:include/linux/skbuff.h **** {
 430              	.loc 3 1010 0
 431 022f 8B4500   	movl (%ebp),%eax
 432              	.LBB36:
 433              	.LBB37:
 434              	.LBB38:
 435              	.loc 3 988 0
GAS LISTING  			page 74


 436 0232 6A20     	pushl $32
 437              	.LCFI27:
 438 0234 8B4060   	movl 96(%eax),%eax
 439 0237 83C046   	addl $70,%eax
 440 023a 50       	pushl %eax
 441              	.LCFI28:
 442              	.LCFI29:
 443 023b E8FCFFFF 	call alloc_skb
 443      FF
 444 0240 5A       	popl %edx
 445              	.LCFI30:
 446              	.loc 3 989 0
 447 0241 85C0     	testl %eax,%eax
 448              	.loc 3 988 0
 449 0243 59       	popl %ecx
 450              	.LCFI31:
 451 0244 89C7     	movl %eax,%edi
 452              	.loc 3 989 0
 453 0246 740E     	je .L69
 454              	.LBB39:
 455              	.LBB40:
 456              	.loc 3 871 0
 457 0248 8380A800 	addl $16,168(%eax)
 457      000010
 458              	.loc 3 872 0
 459 024f 8380AC00 	addl $16,172(%eax)
 459      000010
 460              	.L69:
 461              	.LBE40:
 462              	.LBE39:
 463              	.LBE38:
 464              	.LBE37:
 465              	.LBE36:
 466              	.LBE35:
 101:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		/* Reserve enough space to fit maximum frame length */
 102:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		skb = dev_alloc_skb(ieee->dev->mtu +
 103:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				    sizeof(struct ieee80211_hdr_4addr) +
 104:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				    8 /* LLC */  +
 105:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				    2 /* alignment */  +
 106:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				    8 /* WEP */  + ETH_ALEN /* WDS */ );
 107:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		if (skb == NULL)
 108:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			return NULL;
 467              	.loc 1 108 0
 468 0256 31C0     	xorl %eax,%eax
 469              	.loc 1 107 0
 470 0258 85FF     	testl %edi,%edi
 471              	.loc 3 1010 0
 472 025a 897C2404 	movl %edi,4(%esp)
 473              	.loc 1 107 0
 474 025e 0F84F700 	je .L67
 474      0000
 109:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 110:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		entry = &ieee->frag_cache[ieee->frag_next_idx];
 475              	.loc 1 110 0
 476 0264 8B854807 	movl 1864(%ebp),%eax
 476      0000
 477 026a 6BD01C   	imull $28,%eax,%edx
GAS LISTING  			page 75


 111:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		ieee->frag_next_idx++;
 478              	.loc 1 111 0
 479 026d 40       	incl %eax
 112:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		if (ieee->frag_next_idx >= IEEE80211_FRAG_CACHE_LEN)
 480              	.loc 1 112 0
 481 026e 83F803   	cmpl $3,%eax
 482              	.loc 1 110 0
 483 0271 8DB415D8 	leal 1752(%ebp,%edx),%esi
 483      060000
 484              	.loc 1 111 0
 485 0278 89854807 	movl %eax,1864(%ebp)
 485      0000
 486              	.loc 1 112 0
 487 027e 760A     	jbe .L74
 113:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			ieee->frag_next_idx = 0;
 488              	.loc 1 113 0
 489 0280 C7854807 	movl $0,1864(%ebp)
 489      00000000 
 489      0000
 490              	.L74:
 114:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 115:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		if (entry->skb != NULL)
 491              	.loc 1 115 0
 492 028a 8B560C   	movl 12(%esi),%edx
 493 028d 85D2     	testl %edx,%edx
 494 028f 7461     	je .L75
 495              	.LBB41:
 496              	.LBB42:
 497              	.LBB43:
 498              	.LBB44:
 499              	.loc 5 91 0
 500 0291 B800E0FF 	movl $-8192,%eax
 500      FF
 501              	
 502 0296 21E0     	andl %esp,%eax
 503              	
 504              	.LBE44:
 505              	.LBE43:
 506              	.loc 5 89 0
 507 0298 F7401400 	testl $268369920,20(%eax)
 507      00FF0F
 508 029f 7507     	jne .L77
 509              	.LBB45:
 510              	.loc 6 659 0
 511              	
 512 02a1 9C58     	pushfl
 513              	
 514              	.LBE45:
 515 02a3 F6C402   	testb $2,%ah
 516 02a6 752B     	jne .L76
 517              	.L77:
 518              	.LBB46:
 519              	.LBB47:
 520              	.LBB48:
 521              	.LBB49:
 522              	.loc 7 135 0
 523              	
GAS LISTING  			page 76


 524 02a8 FF8AA000 	decl 160(%edx)
 524      00000F94 
 524      C0
 525              	
 526              	.LBE49:
 527              	.LBE48:
 528              	.loc 7 132 0
 529 02b1 84C0     	testb %al,%al
 530 02b3 743D     	je .L75
 531              	.LBB50:
 532              	.loc 6 645 0
 533              	
 534 02b5 9C5BFA   	pushfl
 535              	.loc 6 647 0
 536              	
 537 02b8 A1240000 	movl per_cpu__softnet_data+36,%eax
 537      00
 538 02bd 8902     	movl %eax,(%edx)
 539              	.loc 6 649 0
 540 02bf B8020000 	movl $2,%eax
 540      00
 541              	.loc 6 648 0
 542 02c4 89152400 	movl %edx,per_cpu__softnet_data+36
 542      0000
 543              	.loc 6 649 0
 544              	.LCFI32:
 545 02ca E8FCFFFF 	call raise_softirq_irqoff
 545      FF
 546              	.loc 6 650 0
 547              	
 548 02cf 539D     	pushl %ebx
 549              	
 550              	.LBE50:
 551              	.LBE47:
 552              	.LBE46:
 553 02d1 EB1F     	jmp .L75
 554              	.LCFI33:
 555              	.L76:
 556              	.LBB51:
 557              	.LBB52:
 558              	.loc 3 369 0
 559 02d3 8B82A000 	movl 160(%edx),%eax
 559      0000
 560 02d9 48       	decl %eax
 561 02da 7502     	jne .L85
 562              	.loc 3 370 0
 563 02dc EB0D     	jmp .L86
 564              	.L85:
 565              	.LBB53:
 566              	.LBB54:
 567              	.loc 7 135 0
 568              	
 569 02de FF8AA000 	decl 160(%edx)
 569      00000F94 
 569      C0
 570              	
 571              	.LBE54:
GAS LISTING  			page 77


 572              	.LBE53:
 573              	.loc 7 132 0
 574 02e7 84C0     	testb %al,%al
 575 02e9 7407     	je .L75
 576              	.L86:
 577              	.loc 3 373 0
 578 02eb 52       	pushl %edx
 579              	.LCFI34:
 580 02ec E8FCFFFF 	call __kfree_skb
 580      FF
 581 02f1 5D       	popl %ebp
 582              	.LCFI35:
 583              	.L75:
 584              	.LBE52:
 585              	.LBE51:
 586              	.LBE42:
 587              	.LBE41:
 116:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			dev_kfree_skb_any(entry->skb);
 117:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 118:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		entry->first_frag_time = jiffies;
 588              	.loc 1 118 0
 589 02f2 A1000000 	movl jiffies,%eax
 589      00
 590 02f7 8906     	movl %eax,(%esi)
 119:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		entry->seq = seq;
 591              	.loc 1 119 0
 592 02f9 8B0424   	movl (%esp),%eax
 593 02fc 894604   	movl %eax,4(%esi)
 120:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		entry->last_frag = frag;
 594              	.loc 1 120 0
 595 02ff C7460800 	movl $0,8(%esi)
 595      000000
 121:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		entry->skb = skb;
 596              	.loc 1 121 0
 597 0306 897E0C   	movl %edi,12(%esi)
 598              	.LBB55:
 599              	.LBB56:
 600              	.loc 4 240 0
 601 0309 8B542420 	movl 32(%esp),%edx
 602 030d 8B420A   	movl 10(%edx),%eax
 603 0310 894610   	movl %eax,16(%esi)
 604              	.loc 4 241 0
 605 0313 668B420E 	movw 14(%edx),%ax
 606 0317 66894614 	movw %ax,20(%esi)
 607              	.LBE56:
 608              	.LBE55:
 609              	.LBB57:
 610              	.LBB58:
 611              	.loc 4 240 0
 612 031b 8B4204   	movl 4(%edx),%eax
 613 031e 894616   	movl %eax,22(%esi)
 614              	.loc 4 241 0
 615 0321 668B4208 	movw 8(%edx),%ax
 616 0325 6689461A 	movw %ax,26(%esi)
 617 0329 EB2C     	jmp .L135
 618              	.L68:
 619              	.LBE58:
GAS LISTING  			page 78


 620              	.LBE57:
 122:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		memcpy(entry->src_addr, hdr->addr2, ETH_ALEN);
 123:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		memcpy(entry->dst_addr, hdr->addr1, ETH_ALEN);
 124:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	} else {
 125:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		/* received a fragment of a frame for which the head fragment
 126:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		 * should have already been received */
 127:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		entry = ieee80211_frag_cache_find(ieee, seq, frag, hdr->addr2,
 621              	.loc 1 127 0
 622 032b 8B442420 	movl 32(%esp),%eax
 623 032f 83C004   	addl $4,%eax
 624 0332 50       	pushl %eax
 625              	.LCFI36:
 626 0333 8B442424 	movl 36(%esp),%eax
 627 0337 83C00A   	addl $10,%eax
 628 033a 50       	pushl %eax
 629              	.LCFI37:
 630 033b 53       	pushl %ebx
 631              	.LCFI38:
 632 033c FF74240C 	pushl 12(%esp)
 633              	.LCFI39:
 634 0340 55       	pushl %ebp
 635              	.LCFI40:
 636 0341 E863FDFF 	call ieee80211_frag_cache_find
 636      FF
 128:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 						  hdr->addr1);
 129:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		if (entry != NULL) {
 637              	.loc 1 129 0
 638 0346 83C414   	addl $20,%esp
 639              	.LCFI41:
 640 0349 85C0     	testl %eax,%eax
 641 034b 740A     	je .L135
 130:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			entry->last_frag = frag;
 131:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			skb = entry->skb;
 642              	.loc 1 131 0
 643 034d 8B700C   	movl 12(%eax),%esi
 644              	.loc 1 130 0
 645 0350 895808   	movl %ebx,8(%eax)
 646              	.loc 1 131 0
 647 0353 89742404 	movl %esi,4(%esp)
 648              	.L135:
 132:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		}
 133:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	}
 134:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 135:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	return skb;
 649              	.loc 1 135 0
 650 0357 8B442404 	movl 4(%esp),%eax
 651              	.L67:
 136:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** }
 652              	.loc 1 136 0
 653 035b 5E       	popl %esi
 654              	.LCFI42:
 655 035c 5F       	popl %edi
 656              	.LCFI43:
 657 035d 5B       	popl %ebx
 658 035e 5E       	popl %esi
 659 035f 5F       	popl %edi
 660 0360 5D       	popl %ebp
GAS LISTING  			page 79


 661 0361 C3       	ret
 662              	.LFE926:
 664              	.section .rodata
 665 001a 00000000 	.align 32
 665      0000
 668              	__func__.3:
 669 0020 69656565 	.string "ieee80211_frag_cache_invalidate"
 669      38303231 
 669      315F6672 
 669      61675F63 
 669      61636865 
 670              	.section .rodata.str1.1
 671              	.LC1:
 672 0047 3C373E69 	.string "<7>ieee80211: %c %s could not invalidate fragment cache entry (seq=%u)\n"
 672      65656538 
 672      30323131 
 672      3A202563 
 672      20257320 
 673              	.text
 675              	ieee80211_frag_cache_invalidate:
 676              	.LFB927:
 137:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 138:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** /* Called only as a tasklet (software IRQ) */
 139:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** static int ieee80211_frag_cache_invalidate(struct ieee80211_device *ieee,
 140:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 					   struct ieee80211_hdr_4addr *hdr)
 141:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** {
 677              	.loc 1 141 0
 678 0362 53       	pushl %ebx
 679              	.LCFI44:
 680              	.loc 1 141 0
 681 0363 8B44240C 	movl 12(%esp),%eax
 142:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	u16 sc;
 143:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	unsigned int seq;
 144:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	struct ieee80211_frag_entry *entry;
 145:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 146:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	sc = le16_to_cpu(hdr->seq_ctl);
 147:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	seq = WLAN_GET_SEQ_SEQ(sc);
 148:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 149:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	entry = ieee80211_frag_cache_find(ieee, seq, -1, hdr->addr2,
 682              	.loc 1 149 0
 683 0367 8D5004   	leal 4(%eax),%edx
 684              	.loc 1 147 0
 685 036a 0FB75816 	movzwl 22(%eax),%ebx
 686              	.loc 1 149 0
 687 036e 52       	pushl %edx
 688              	.LCFI45:
 689 036f 83C00A   	addl $10,%eax
 690 0372 50       	pushl %eax
 691              	.LCFI46:
 692 0373 6AFF     	pushl $-1
 693              	.LCFI47:
 694              	.loc 1 147 0
 695 0375 81E3F0FF 	andl $65520,%ebx
 695      0000
 696              	.loc 1 149 0
 697 037b 53       	pushl %ebx
 698              	.LCFI48:
GAS LISTING  			page 80


 699 037c FF742418 	pushl 24(%esp)
 700              	.LCFI49:
 701 0380 E824FDFF 	call ieee80211_frag_cache_find
 701      FF
 150:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 					  hdr->addr1);
 151:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 152:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	if (entry == NULL) {
 702              	.loc 1 152 0
 703 0385 83C414   	addl $20,%esp
 704              	.LCFI50:
 705 0388 85C0     	testl %eax,%eax
 706 038a 753C     	jne .L138
 153:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		IEEE80211_DEBUG_FRAG("could not invalidate fragment cache "
 707              	.loc 1 153 0
 708 038c F6050000 	testb $32,ieee80211_debug_level
 708      000020
 709 0393 742E     	je .L139
 710              	.LBB59:
 711              	.LBB60:
 712              	.loc 5 91 0
 713 0395 B800E0FF 	movl $-8192,%eax
 713      FF
 714              	
 715 039a 21E0     	andl %esp,%eax
 716              	
 717              	.LBE60:
 718              	.LBE59:
 719              	.loc 5 89 0
 720 039c 8B4014   	movl 20(%eax),%eax
 721 039f 2500FFFF 	andl $268435200,%eax
 721      0F
 722 03a4 83F801   	cmpl $1,%eax
 723 03a7 19C0     	sbbl %eax,%eax
 724 03a9 53       	pushl %ebx
 725              	.LCFI51:
 726 03aa 83E00C   	andl $12,%eax
 727 03ad 68200000 	pushl $__func__.3
 727      00
 728              	.LCFI52:
 729 03b2 83C049   	addl $73,%eax
 730 03b5 50       	pushl %eax
 731              	.LCFI53:
 732 03b6 68470000 	pushl $.LC1
 732      00
 733              	.LCFI54:
 734 03bb E8FCFFFF 	call printk
 734      FF
 735 03c0 83C410   	addl $16,%esp
 736              	.LCFI55:
 737              	.L139:
 154:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				     "entry (seq=%u)\n", seq);
 155:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		return -1;
 738              	.loc 1 155 0
 739 03c3 83C8FF   	orl $-1,%eax
 740 03c6 EB09     	jmp .L137
 741              	.L138:
 156:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	}
GAS LISTING  			page 81


 157:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 158:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	entry->skb = NULL;
 742              	.loc 1 158 0
 743 03c8 C7400C00 	movl $0,12(%eax)
 743      000000
 159:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	return 0;
 744              	.loc 1 159 0
 745 03cf 31C0     	xorl %eax,%eax
 746              	.L137:
 160:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** }
 747              	.loc 1 160 0
 748 03d1 5B       	popl %ebx
 749 03d2 C3       	ret
 750              	.LFE927:
 752              	.data
 755              	rfc1042_header:
 756 0000 AA       	.byte -86
 757 0001 AA       	.byte -86
 758 0002 03       	.byte 3
 759 0003 00       	.byte 0
 760 0004 00       	.byte 0
 761 0005 00       	.byte 0
 764              	bridge_tunnel_header:
 765 0006 AA       	.byte -86
 766 0007 AA       	.byte -86
 767 0008 03       	.byte 3
 768 0009 00       	.byte 0
 769 000a 00       	.byte 0
 770 000b F8       	.byte -8
 771              	.text
 773              	ieee80211_is_eapol_frame:
 774              	.LFB928:
 161:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 162:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** #ifdef NOT_YET
 163:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** /* ieee80211_rx_frame_mgtmt
 164:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c ****  *
 165:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c ****  * Responsible for handling management control frames
 166:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c ****  *
 167:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c ****  * Called by ieee80211_rx */
 168:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** static int
 169:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** ieee80211_rx_frame_mgmt(struct ieee80211_device *ieee, struct sk_buff *skb,
 170:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			struct ieee80211_rx_stats *rx_stats, u16 type,
 171:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			u16 stype)
 172:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** {
 173:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	if (ieee->iw_mode == IW_MODE_MASTER) {
 174:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		printk(KERN_DEBUG "%s: Master mode not yet suppported.\n",
 175:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		       ieee->dev->name);
 176:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		return 0;
 177:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** /*
 178:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c ****   hostap_update_sta_ps(ieee, (struct hostap_ieee80211_hdr_4addr *)
 179:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c ****   skb->data);*/
 180:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	}
 181:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 182:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	if (ieee->hostapd && type == WLAN_FC_TYPE_MGMT) {
 183:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		if (stype == WLAN_FC_STYPE_BEACON &&
 184:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		    ieee->iw_mode == IW_MODE_MASTER) {
 185:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			struct sk_buff *skb2;
GAS LISTING  			page 82


 186:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			/* Process beacon frames also in kernel driver to
 187:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			 * update STA(AP) table statistics */
 188:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			skb2 = skb_clone(skb, GFP_ATOMIC);
 189:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			if (skb2)
 190:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				hostap_rx(skb2->dev, skb2, rx_stats);
 191:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		}
 192:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 193:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		/* send management frames to the user space daemon for
 194:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		 * processing */
 195:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		ieee->apdevstats.rx_packets++;
 196:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		ieee->apdevstats.rx_bytes += skb->len;
 197:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		prism2_rx_80211(ieee->apdev, skb, rx_stats, PRISM2_RX_MGMT);
 198:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		return 0;
 199:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	}
 200:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 201:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	if (ieee->iw_mode == IW_MODE_MASTER) {
 202:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		if (type != WLAN_FC_TYPE_MGMT && type != WLAN_FC_TYPE_CTRL) {
 203:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			printk(KERN_DEBUG "%s: unknown management frame "
 204:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			       "(type=0x%02x, stype=0x%02x) dropped\n",
 205:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			       skb->dev->name, type, stype);
 206:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			return -1;
 207:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		}
 208:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 209:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		hostap_rx(skb->dev, skb, rx_stats);
 210:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		return 0;
 211:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	}
 212:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 213:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	printk(KERN_DEBUG "%s: hostap_rx_frame_mgmt: management frame "
 214:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	       "received in non-Host AP mode\n", skb->dev->name);
 215:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	return -1;
 216:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** }
 217:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** #endif
 218:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 219:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** /* See IEEE 802.1H for LLC/SNAP encapsulation/decapsulation */
 220:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** /* Ethernet-II snap header (RFC1042 for most EtherTypes) */
 221:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** static unsigned char rfc1042_header[] = { 0xaa, 0xaa, 0x03, 0x00, 0x00, 0x00 };
 222:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 223:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** /* Bridge-Tunnel header (for EtherTypes ETH_P_AARP and ETH_P_IPX) */
 224:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** static unsigned char bridge_tunnel_header[] =
 225:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c ****     { 0xaa, 0xaa, 0x03, 0x00, 0x00, 0xf8 };
 226:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** /* No encapsulation header if EtherType < 0x600 (=length) */
 227:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 228:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** /* Called by ieee80211_rx_frame_decrypt */
 229:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** static int ieee80211_is_eapol_frame(struct ieee80211_device *ieee,
 230:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				    struct sk_buff *skb)
 231:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** {
 775              	.loc 1 231 0
 776 03d3 55       	pushl %ebp
 777              	.LCFI56:
 778 03d4 57       	pushl %edi
 779              	.LCFI57:
 780 03d5 56       	pushl %esi
 781              	.LCFI58:
 782 03d6 53       	pushl %ebx
 783              	.LCFI59:
 784 03d7 83EC0C   	subl $12,%esp
 785              	.LCFI60:
GAS LISTING  			page 83


 232:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	struct net_device *dev = ieee->dev;
 786              	.loc 1 232 0
 787 03da 8B442420 	movl 32(%esp),%eax
 788 03de 8B00     	movl (%eax),%eax
 789              	.loc 1 231 0
 790 03e0 8B542424 	movl 36(%esp),%edx
 791              	.loc 1 232 0
 792 03e4 89442408 	movl %eax,8(%esp)
 233:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	u16 fc, ethertype;
 234:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	struct ieee80211_hdr_3addr *hdr;
 235:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	u8 *pos;
 236:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 237:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	if (skb->len < 24)
 793              	.loc 1 237 0
 794 03e8 8B4260   	movl 96(%edx),%eax
 795 03eb 89442404 	movl %eax,4(%esp)
 238:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		return 0;
 796              	.loc 1 238 0
 797 03ef 31C0     	xorl %eax,%eax
 798              	.loc 1 237 0
 799 03f1 837C2404 	cmpl $23,4(%esp)
 799      17
 800 03f6 0F86D300 	jbe .L144
 800      0000
 239:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 240:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	hdr = (struct ieee80211_hdr_3addr *)skb->data;
 801              	.loc 1 240 0
 802 03fc 8BAAA800 	movl 168(%edx),%ebp
 802      0000
 241:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	fc = le16_to_cpu(hdr->frame_ctl);
 242:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 243:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	/* check that the frame is unicast frame to us */
 244:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	if ((fc & (IEEE80211_FCTL_TODS | IEEE80211_FCTL_FROMDS)) ==
 803              	.loc 1 244 0
 804 0402 0FB74500 	movzwl (%ebp),%eax
 805 0406 890424   	movl %eax,(%esp)
 806 0409 25000300 	andl $768,%eax
 806      00
 807 040e 3D000100 	cmpl $256,%eax
 807      00
 808 0413 754F     	jne .L146
 809              	.LBB61:
 810              	.loc 2 1165 0
 811 0415 8B4C2408 	movl 8(%esp),%ecx
 812 0419 81C19000 	addl $144,%ecx
 812      0000
 813 041f 8D5D04   	leal 4(%ebp),%ebx
 814              	.LBB62:
 815              	.loc 2 1169 0
 816 0422 8B442408 	movl 8(%esp),%eax
 817 0426 668BB890 	movw 144(%eax),%di
 817      000000
 818 042d 668B7102 	movw 2(%ecx),%si
 819 0431 668B5504 	movw 4(%ebp),%dx
 820 0435 668B4302 	movw 2(%ebx),%ax
 821 0439 31F0     	xorl %esi,%eax
 822 043b 31FA     	xorl %edi,%edx
GAS LISTING  			page 84


 823 043d 09C2     	orl %eax,%edx
 824 043f 668B4904 	movw 4(%ecx),%cx
 825 0443 668B4304 	movw 4(%ebx),%ax
 826 0447 31C8     	xorl %ecx,%eax
 827              	.LBE62:
 828              	.LBE61:
 829              	.loc 2 1165 0
 830 0449 6609C2   	orw %ax,%dx
 831 044c 7516     	jne .L146
 832              	.LBB63:
 833 044e 8D4510   	leal 16(%ebp),%eax
 834              	.LBB64:
 835              	.loc 2 1169 0
 836 0451 66337D10 	xorw 16(%ebp),%di
 837 0455 66337002 	xorw 2(%eax),%si
 838 0459 09F7     	orl %esi,%edi
 839 045b 66334804 	xorw 4(%eax),%cx
 840              	.LBE64:
 841              	.LBE63:
 842              	.loc 2 1165 0
 843 045f 6609CF   	orw %cx,%di
 844 0462 7447     	je .L153
 845              	.L146:
 245:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	    IEEE80211_FCTL_TODS &&
 246:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	    !compare_ether_addr(hdr->addr1, dev->dev_addr) &&
 247:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	    !compare_ether_addr(hdr->addr3, dev->dev_addr)) {
 248:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		/* ToDS frame with own addr BSSID and DA */
 249:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	} else if ((fc & (IEEE80211_FCTL_TODS | IEEE80211_FCTL_FROMDS)) ==
 846              	.loc 1 249 0
 847 0464 81242400 	andl $768,(%esp)
 847      030000
 848 046b 813C2400 	cmpl $512,(%esp)
 848      020000
 849 0472 7533     	jne .L154
 850              	.LBB65:
 851              	.loc 2 1165 0
 852 0474 8B4C2408 	movl 8(%esp),%ecx
 853 0478 81C19000 	addl $144,%ecx
 853      0000
 854              	.LBB66:
 855              	.loc 2 1169 0
 856 047e 8B442408 	movl 8(%esp),%eax
 857              	.LBE66:
 858              	.loc 2 1165 0
 859 0482 8D5D04   	leal 4(%ebp),%ebx
 860              	.LBB67:
 861              	.loc 2 1169 0
 862 0485 668B9090 	movw 144(%eax),%dx
 862      000000
 863 048c 668B4102 	movw 2(%ecx),%ax
 864 0490 66334302 	xorw 2(%ebx),%ax
 865 0494 66335504 	xorw 4(%ebp),%dx
 866 0498 09C2     	orl %eax,%edx
 867 049a 668B4104 	movw 4(%ecx),%ax
 868 049e 66334304 	xorw 4(%ebx),%ax
 869              	.LBE67:
 870              	.LBE65:
GAS LISTING  			page 85


 871              	.loc 2 1165 0
 872 04a2 6609C2   	orw %ax,%dx
 873 04a5 7404     	je .L153
 874              	.L154:
 250:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		   IEEE80211_FCTL_FROMDS &&
 251:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		   !compare_ether_addr(hdr->addr1, dev->dev_addr)) {
 252:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		/* FromDS frame with own addr as DA */
 253:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	} else
 254:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		return 0;
 875              	.loc 1 254 0
 876 04a7 31C0     	xorl %eax,%eax
 877 04a9 EB24     	jmp .L144
 878              	.L153:
 255:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 256:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	if (skb->len < 24 + 8)
 257:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		return 0;
 879              	.loc 1 257 0
 880 04ab 31C0     	xorl %eax,%eax
 881              	.loc 1 256 0
 882 04ad 837C2404 	cmpl $31,4(%esp)
 882      1F
 883 04b2 761B     	jbe .L144
 258:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 259:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	/* check for port access entity Ethernet type */
 260:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	pos = skb->data + 24;
 884              	.loc 1 260 0
 885 04b4 8D4518   	leal 24(%ebp),%eax
 261:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	ethertype = (pos[6] << 8) | pos[7];
 886              	.loc 1 261 0
 887 04b7 0FB65006 	movzbl 6(%eax),%edx
 888 04bb C1E208   	sall $8,%edx
 889 04be 660FB640 	movzbw 7(%eax),%ax
 889      07
 890 04c3 09D0     	orl %edx,%eax
 262:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	if (ethertype == ETH_P_PAE)
 263:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		return 1;
 891              	.loc 1 263 0
 892 04c5 663D8E88 	cmpw $-30578,%ax
 893 04c9 0F94C0   	sete %al
 894 04cc 0FB6C0   	movzbl %al,%eax
 895              	.L144:
 264:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 265:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	return 0;
 266:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** }
 896              	.loc 1 266 0
 897 04cf 83C40C   	addl $12,%esp
 898 04d2 5B       	popl %ebx
 899 04d3 5E       	popl %esi
 900 04d4 5F       	popl %edi
 901 04d5 5D       	popl %ebp
 902 04d6 C3       	ret
 903              	.LFE928:
 905              	.section .rodata
 908              	__func__.4:
 909 0040 69656565 	.string "ieee80211_rx_frame_decrypt"
 909      38303231 
 909      315F7278 
GAS LISTING  			page 86


 909      5F667261 
 909      6D655F64 
 910              	.section .rodata.str1.1
 911              	.LC2:
 912 008f 3C373E69 	.string "<7>ieee80211: %c %s decryption failed (SA=%02x:%02x:%02x:%02x:%02x:%02x) res=%d\n"
 912      65656538 
 912      30323131 
 912      3A202563 
 912      20257320 
 913              	.LC3:
 914 00e0 3C373E69 	.string "<7>ieee80211: %c %s Decryption failed ICV mismatch (key %d)\n"
 914      65656538 
 914      30323131 
 914      3A202563 
 914      20257320 
 915              	.text
 917              	ieee80211_rx_frame_decrypt:
 918              	.LFB929:
 267:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 268:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** /* Called only as a tasklet (software IRQ), by ieee80211_rx */
 269:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** static int
 270:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** ieee80211_rx_frame_decrypt(struct ieee80211_device *ieee, struct sk_buff *skb,
 271:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			   struct ieee80211_crypt_data *crypt)
 272:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** {
 919              	.loc 1 272 0
 920 04d7 55       	pushl %ebp
 921              	.LCFI61:
 922 04d8 57       	pushl %edi
 923              	.LCFI62:
 924 04d9 56       	pushl %esi
 925              	.LCFI63:
 926 04da 53       	pushl %ebx
 927              	.LCFI64:
 928              	.loc 1 272 0
 929 04db 8B74241C 	movl 28(%esp),%esi
 273:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	struct ieee80211_hdr_3addr *hdr;
 274:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	int res, hdrlen;
 275:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 276:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	if (crypt == NULL || crypt->ops->decrypt_mpdu == NULL)
 930              	.loc 1 276 0
 931 04df 85F6     	testl %esi,%esi
 932 04e1 7409     	je .L163
 933 04e3 8B7E08   	movl 8(%esi),%edi
 934 04e6 837F1C00 	cmpl $0,28(%edi)
 935 04ea 7507     	jne .L162
 936              	.L163:
 277:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		return 0;
 937              	.loc 1 277 0
 938 04ec 31C0     	xorl %eax,%eax
 939 04ee E92C0100 	jmp .L161
 939      00
 940              	.L162:
 278:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 279:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	hdr = (struct ieee80211_hdr_3addr *)skb->data;
 941              	.loc 1 279 0
 942 04f3 8B442418 	movl 24(%esp),%eax
 943 04f7 8B98A800 	movl 168(%eax),%ebx
GAS LISTING  			page 87


 943      0000
 944              	.LBB68:
 945              	.loc 2 1230 0
 946 04fd 0FB703   	movzwl (%ebx),%eax
 947              	.LBB69:
 948              	.loc 2 1234 0
 949 0500 89C2     	movl %eax,%edx
 950              	.loc 2 1232 0
 951 0502 89C1     	movl %eax,%ecx
 952              	.loc 2 1234 0
 953 0504 83E20C   	andl $12,%edx
 954              	.loc 2 1232 0
 955 0507 6681E1F0 	andw $240,%cx
 955      00
 956              	.loc 2 1234 0
 957 050c 83FA04   	cmpl $4,%edx
 958              	.loc 2 1231 0
 959 050f BD180000 	movl $24,%ebp
 959      00
 960              	.loc 2 1234 0
 961 0514 741C     	je .L168
 962 0516 83FA08   	cmpl $8,%edx
 963 0519 7534     	jne .L164
 964              	.loc 2 1236 0
 965 051b F6C402   	testb $2,%ah
 966 051e 7409     	je .L166
 967 0520 F6C401   	testb $1,%ah
 968 0523 7404     	je .L166
 969              	.loc 2 1237 0
 970 0525 66BD1E00 	movw $30,%bp
 971              	.L166:
 972              	.loc 2 1238 0
 973 0529 84C9     	testb %cl,%cl
 974 052b 7922     	jns .L164
 975              	.loc 2 1239 0
 976 052d 83C502   	addl $2,%ebp
 977              	.loc 2 1240 0
 978 0530 EB1D     	jmp .L164
 979              	.L168:
 980              	.loc 2 1242 0
 981 0532 25F00000 	andl $240,%eax
 981      00
 982 0537 3DC00000 	cmpl $192,%eax
 982      00
 983 053c 740C     	je .L171
 984 053e 3DD00000 	cmpl $208,%eax
 984      00
 985              	.loc 2 1248 0
 986 0543 BD100000 	movl $16,%ebp
 986      00
 987              	.loc 2 1242 0
 988 0548 7505     	jne .L164
 989              	.L171:
 990              	.loc 2 1245 0
 991 054a BD0A0000 	movl $10,%ebp
 991      00
 992              	.L164:
GAS LISTING  			page 88


 993              	.LBE69:
 994              	.LBE68:
 995              	.LBB70:
 996              	.LBB71:
 997              	.loc 7 103 0
 998              	
 999 054f FF4610   	incl 16(%esi)
 1000              	
 1001              	.LBE71:
 1002              	.LBE70:
 280:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	hdrlen = ieee80211_get_hdrlen(le16_to_cpu(hdr->frame_ctl));
 281:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 282:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	atomic_inc(&crypt->refcnt);
 283:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	res = crypt->ops->decrypt_mpdu(skb, hdrlen, crypt->priv);
 1003              	.loc 1 283 0
 1004 0552 FF760C   	pushl 12(%esi)
 1005              	.LCFI65:
 1006 0555 55       	pushl %ebp
 1007              	.LCFI66:
 1008 0556 FF742420 	pushl 32(%esp)
 1009              	.LCFI67:
 1010 055a FF571C   	call *28(%edi)
 1011 055d 89C7     	movl %eax,%edi
 1012              	.loc 7 116 0
 1013 055f 83C40C   	addl $12,%esp
 1014              	.LCFI68:
 1015              	.LBB72:
 1016              	.LBB73:
 1017              	.loc 7 117 0
 1018              	
 1019 0562 FF4E10   	decl 16(%esi)
 1020              	
 1021              	.LBE73:
 1022              	.LBE72:
 284:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	atomic_dec(&crypt->refcnt);
 285:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	if (res < 0) {
 1023              	.loc 1 285 0
 1024 0565 85FF     	testl %edi,%edi
 1025 0567 0F89B200 	jns .L161
 1025      0000
 286:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		IEEE80211_DEBUG_DROP("decryption failed (SA=" MAC_FMT
 1026              	.loc 1 286 0
 1027 056d 803D0000 	cmpb $0,ieee80211_debug_level
 1027      000000
 1028 0574 794C     	jns .L177
 1029              	.LBB74:
 1030              	.LBB75:
 1031              	.loc 5 91 0
 1032 0576 B800E0FF 	movl $-8192,%eax
 1032      FF
 1033              	
 1034 057b 21E0     	andl %esp,%eax
 1035              	
 1036              	.LBE75:
 1037              	.LBE74:
 1038              	.loc 5 89 0
 1039 057d 8B4014   	movl 20(%eax),%eax
GAS LISTING  			page 89


 1040 0580 2500FFFF 	andl $268435200,%eax
 1040      0F
 1041 0585 57       	pushl %edi
 1042              	.LCFI69:
 1043 0586 83F801   	cmpl $1,%eax
 1044 0589 0FB6430F 	movzbl 15(%ebx),%eax
 1045 058d 50       	pushl %eax
 1046              	.LCFI70:
 1047 058e 0FB6430E 	movzbl 14(%ebx),%eax
 1048 0592 50       	pushl %eax
 1049              	.LCFI71:
 1050 0593 0FB6430D 	movzbl 13(%ebx),%eax
 1051 0597 50       	pushl %eax
 1052              	.LCFI72:
 1053 0598 0FB6430C 	movzbl 12(%ebx),%eax
 1054 059c 50       	pushl %eax
 1055              	.LCFI73:
 1056 059d 0FB6430B 	movzbl 11(%ebx),%eax
 1057 05a1 50       	pushl %eax
 1058              	.LCFI74:
 1059 05a2 0FB6430A 	movzbl 10(%ebx),%eax
 1060 05a6 19D2     	sbbl %edx,%edx
 1061 05a8 50       	pushl %eax
 1062              	.LCFI75:
 1063 05a9 83E20C   	andl $12,%edx
 1064 05ac 68400000 	pushl $__func__.4
 1064      00
 1065              	.LCFI76:
 1066 05b1 83C249   	addl $73,%edx
 1067 05b4 52       	pushl %edx
 1068              	.LCFI77:
 1069 05b5 688F0000 	pushl $.LC2
 1069      00
 1070              	.LCFI78:
 1071 05ba E8FCFFFF 	call printk
 1071      FF
 1072 05bf 83C428   	addl $40,%esp
 1073              	.LCFI79:
 1074              	.L177:
 287:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				     ") res=%d\n", MAC_ARG(hdr->addr2), res);
 288:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		if (res == -2)
 1075              	.loc 1 288 0
 1076 05c2 83FFFE   	cmpl $-2,%edi
 1077 05c5 754B     	jne .L182
 289:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			IEEE80211_DEBUG_DROP("Decryption failed ICV "
 1078              	.loc 1 289 0
 1079 05c7 803D0000 	cmpb $0,ieee80211_debug_level
 1079      000000
 1080 05ce 7942     	jns .L182
 1081              	.LBB76:
 1082              	.LBB77:
 1083              	.loc 5 91 0
 1084 05d0 B800E0FF 	movl $-8192,%eax
 1084      FF
 1085              	
 1086 05d5 21E0     	andl %esp,%eax
 1087              	
GAS LISTING  			page 90


 1088              	.LBE77:
 1089              	.LBE76:
 1090              	.loc 5 89 0
 1091 05d7 8B4014   	movl 20(%eax),%eax
 1092 05da 8B4C2418 	movl 24(%esp),%ecx
 1093 05de 2500FFFF 	andl $268435200,%eax
 1093      0F
 1094 05e3 83F801   	cmpl $1,%eax
 1095 05e6 8B81A800 	movl 168(%ecx),%eax
 1095      0000
 1096 05ec 8A442803 	movb 3(%eax,%ebp),%al
 1097 05f0 19D2     	sbbl %edx,%edx
 1098 05f2 C0E806   	shrb $6,%al
 1099 05f5 0FB6C0   	movzbl %al,%eax
 1100 05f8 50       	pushl %eax
 1101              	.LCFI80:
 1102 05f9 83E20C   	andl $12,%edx
 1103 05fc 68400000 	pushl $__func__.4
 1103      00
 1104              	.LCFI81:
 1105 0601 83C249   	addl $73,%edx
 1106 0604 52       	pushl %edx
 1107              	.LCFI82:
 1108 0605 68E00000 	pushl $.LC3
 1108      00
 1109              	.LCFI83:
 1110 060a E8FCFFFF 	call printk
 1110      FF
 1111 060f 83C410   	addl $16,%esp
 1112              	.LCFI84:
 1113              	.L182:
 290:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 					     "mismatch (key %d)\n",
 291:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 					     skb->data[hdrlen + 3] >> 6);
 292:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		ieee->ieee_stats.rx_discards_undecryptable++;
 1114              	.loc 1 292 0
 1115 0612 8B442414 	movl 20(%esp),%eax
 1116 0616 FF803801 	incl 312(%eax)
 1116      0000
 293:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		return -1;
 1117              	.loc 1 293 0
 1118 061c 83C8FF   	orl $-1,%eax
 1119              	.L161:
 294:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	}
 295:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 296:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	return res;
 297:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** }
 1120              	.loc 1 297 0
 1121 061f 5B       	popl %ebx
 1122 0620 5E       	popl %esi
 1123 0621 5F       	popl %edi
 1124 0622 5D       	popl %ebp
 1125 0623 C3       	ret
 1126              	.LFE929:
 1128              	.section .rodata.str1.1
 1129              	.LC4:
 1130 011d 3C373E25 	.string "<7>%s: MSDU decryption/MIC verification failed (SA=%02x:%02x:%02x:%02x:%02x:%02x keyidx=%d)\n"
 1130      733A204D 
GAS LISTING  			page 91


 1130      53445520 
 1130      64656372 
 1130      79707469 
 1131              	.text
 1133              	ieee80211_rx_frame_decrypt_msdu:
 1134              	.LFB930:
 298:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 299:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** /* Called only as a tasklet (software IRQ), by ieee80211_rx */
 300:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** static int
 301:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** ieee80211_rx_frame_decrypt_msdu(struct ieee80211_device *ieee,
 302:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				struct sk_buff *skb, int keyidx,
 303:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				struct ieee80211_crypt_data *crypt)
 304:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** {
 1135              	.loc 1 304 0
 1136 0624 55       	pushl %ebp
 1137              	.LCFI85:
 1138 0625 57       	pushl %edi
 1139              	.LCFI86:
 1140 0626 56       	pushl %esi
 1141              	.LCFI87:
 1142 0627 53       	pushl %ebx
 1143              	.LCFI88:
 1144              	.loc 1 304 0
 1145 0628 8B742420 	movl 32(%esp),%esi
 305:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	struct ieee80211_hdr_3addr *hdr;
 306:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	int res, hdrlen;
 307:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 308:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	if (crypt == NULL || crypt->ops->decrypt_msdu == NULL)
 1146              	.loc 1 308 0
 1147 062c 85F6     	testl %esi,%esi
 1148 062e 7409     	je .L190
 1149 0630 8B6E08   	movl 8(%esi),%ebp
 1150 0633 837D2400 	cmpl $0,36(%ebp)
 1151 0637 7507     	jne .L189
 1152              	.L190:
 309:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		return 0;
 1153              	.loc 1 309 0
 1154 0639 31D2     	xorl %edx,%edx
 1155 063b E9B20000 	jmp .L188
 1155      00
 1156              	.L189:
 310:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 311:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	hdr = (struct ieee80211_hdr_3addr *)skb->data;
 1157              	.loc 1 311 0
 1158 0640 8B442418 	movl 24(%esp),%eax
 1159 0644 8B98A800 	movl 168(%eax),%ebx
 1159      0000
 1160              	.LBB78:
 1161              	.loc 2 1230 0
 1162 064a 0FB703   	movzwl (%ebx),%eax
 1163              	.LBB79:
 1164              	.loc 2 1234 0
 1165 064d 89C2     	movl %eax,%edx
 1166              	.loc 2 1232 0
 1167 064f 89C7     	movl %eax,%edi
 1168              	.loc 2 1234 0
 1169 0651 83E20C   	andl $12,%edx
GAS LISTING  			page 92


 1170              	.loc 2 1232 0
 1171 0654 6681E7F0 	andw $240,%di
 1171      00
 1172              	.loc 2 1234 0
 1173 0659 83FA04   	cmpl $4,%edx
 1174              	.loc 2 1231 0
 1175 065c B9180000 	movl $24,%ecx
 1175      00
 1176              	.loc 2 1234 0
 1177 0661 741C     	je .L195
 1178 0663 83FA08   	cmpl $8,%edx
 1179 0666 7534     	jne .L191
 1180              	.loc 2 1236 0
 1181 0668 F6C402   	testb $2,%ah
 1182 066b 7407     	je .L193
 1183 066d F6C401   	testb $1,%ah
 1184 0670 7402     	je .L193
 1185              	.loc 2 1237 0
 1186 0672 B11E     	movb $30,%cl
 1187              	.L193:
 1188              	.loc 2 1238 0
 1189 0674 89F8     	movl %edi,%eax
 1190 0676 84C0     	testb %al,%al
 1191 0678 7922     	jns .L191
 1192              	.loc 2 1239 0
 1193 067a 83C102   	addl $2,%ecx
 1194              	.loc 2 1240 0
 1195 067d EB1D     	jmp .L191
 1196              	.L195:
 1197              	.loc 2 1242 0
 1198 067f 25F00000 	andl $240,%eax
 1198      00
 1199 0684 3DC00000 	cmpl $192,%eax
 1199      00
 1200 0689 740C     	je .L198
 1201 068b 3DD00000 	cmpl $208,%eax
 1201      00
 1202              	.loc 2 1248 0
 1203 0690 B9100000 	movl $16,%ecx
 1203      00
 1204              	.loc 2 1242 0
 1205 0695 7505     	jne .L191
 1206              	.L198:
 1207              	.loc 2 1245 0
 1208 0697 B90A0000 	movl $10,%ecx
 1208      00
 1209              	.L191:
 1210              	.LBE79:
 1211              	.LBE78:
 1212              	.LBB80:
 1213              	.LBB81:
 1214              	.loc 7 103 0
 1215              	
 1216 069c FF4610   	incl 16(%esi)
 1217              	
 1218              	.LBE81:
 1219              	.LBE80:
GAS LISTING  			page 93


 312:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	hdrlen = ieee80211_get_hdrlen(le16_to_cpu(hdr->frame_ctl));
 313:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 314:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	atomic_inc(&crypt->refcnt);
 315:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	res = crypt->ops->decrypt_msdu(skb, keyidx, hdrlen, crypt->priv);
 1220              	.loc 1 315 0
 1221 069f FF760C   	pushl 12(%esi)
 1222              	.LCFI89:
 1223 06a2 51       	pushl %ecx
 1224              	.LCFI90:
 1225 06a3 FF742424 	pushl 36(%esp)
 1226              	.LCFI91:
 1227 06a7 FF742424 	pushl 36(%esp)
 1228              	.LCFI92:
 1229 06ab FF5524   	call *36(%ebp)
 1230              	.loc 7 116 0
 1231 06ae 83C410   	addl $16,%esp
 1232              	.LCFI93:
 1233              	.LBB82:
 1234              	.LBB83:
 1235              	.loc 7 117 0
 1236              	
 1237 06b1 FF4E10   	decl 16(%esi)
 1238              	
 1239              	.LBE83:
 1240              	.LBE82:
 316:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	atomic_dec(&crypt->refcnt);
 317:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	if (res < 0) {
 318:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		printk(KERN_DEBUG "%s: MSDU decryption/MIC verification failed"
 319:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		       " (SA=" MAC_FMT " keyidx=%d)\n",
 320:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		       ieee->dev->name, MAC_ARG(hdr->addr2), keyidx);
 321:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		return -1;
 322:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	}
 323:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 324:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	return 0;
 1241              	.loc 1 324 0
 1242 06b4 31D2     	xorl %edx,%edx
 1243              	.loc 1 317 0
 1244 06b6 85C0     	testl %eax,%eax
 1245 06b8 7938     	jns .L188
 1246              	.loc 1 318 0
 1247 06ba FF74241C 	pushl 28(%esp)
 1248              	.LCFI94:
 1249 06be 0FB6430F 	movzbl 15(%ebx),%eax
 1250 06c2 50       	pushl %eax
 1251              	.LCFI95:
 1252 06c3 0FB6430E 	movzbl 14(%ebx),%eax
 1253 06c7 50       	pushl %eax
 1254              	.LCFI96:
 1255 06c8 0FB6430D 	movzbl 13(%ebx),%eax
 1256 06cc 50       	pushl %eax
 1257              	.LCFI97:
 1258 06cd 0FB6430C 	movzbl 12(%ebx),%eax
 1259 06d1 50       	pushl %eax
 1260              	.LCFI98:
 1261 06d2 0FB6430B 	movzbl 11(%ebx),%eax
 1262 06d6 50       	pushl %eax
 1263              	.LCFI99:
GAS LISTING  			page 94


 1264 06d7 0FB6430A 	movzbl 10(%ebx),%eax
 1265 06db 50       	pushl %eax
 1266              	.LCFI100:
 1267 06dc 8B442430 	movl 48(%esp),%eax
 1268 06e0 FF30     	pushl (%eax)
 1269              	.LCFI101:
 1270 06e2 681D0100 	pushl $.LC4
 1270      00
 1271              	.LCFI102:
 1272 06e7 E8FCFFFF 	call printk
 1272      FF
 1273              	.loc 1 321 0
 1274 06ec 83C424   	addl $36,%esp
 1275              	.LCFI103:
 1276 06ef 83CAFF   	orl $-1,%edx
 1277              	.L188:
 325:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** }
 1278              	.loc 1 325 0
 1279 06f2 5B       	popl %ebx
 1280 06f3 5E       	popl %esi
 1281 06f4 5F       	popl %edi
 1282 06f5 89D0     	movl %edx,%eax
 1283 06f7 5D       	popl %ebp
 1284 06f8 C3       	ret
 1285              	.LFE930:
 1287              	.section .rodata
 1290              	__func__.5:
 1291 005b 69656565 	.string "ieee80211_rx"
 1291      38303231 
 1291      315F7278 
 1291      00
 1292              	.section .rodata.str1.1
 1293              	.LC5:
 1294 017a 3C363E25 	.string "<6>%s: SKB length < 10\n"
 1294      733A2053 
 1294      4B42206C 
 1294      656E6774 
 1294      68203C20 
 1295              	.LC6:
 1296 0192 3C373E69 	.string "<7>ieee80211: %c %s Decryption failed (not set) (SA=%02x:%02x:%02x:%02x:%02x:%02x)\n"
 1296      65656538 
 1296      30323131 
 1296      3A202563 
 1296      20257320 
 1297              	.LC7:
 1298 01e6 3C373E69 	.string "<7>ieee80211: %c %s RX: dropped data frame with no data (type=0x%02x, subtype=0x%02x, len=%d)\n"
 1298      65656538 
 1298      30323131 
 1298      3A202563 
 1298      20257320 
 1299              	.LC8:
 1300 0245 3C373E69 	.string "<7>ieee80211: %c %s Rx Fragment received (%u)\n"
 1300      65656538 
 1300      30323131 
 1300      3A202563 
 1300      20257320 
 1301              	.LC9:
GAS LISTING  			page 95


 1302 0274 3C373E69 	.string "<7>ieee80211: %c %s Rx cannot get skb from fragment cache (morefrag=%d seq=%u frag=%u)\n"
 1302      65656538 
 1302      30323131 
 1302      3A202563 
 1302      20257320 
 1303              	.LC10:
 1304 02cc 3C343E25 	.string "<4>%s: host decrypted and reassembled frame did not fit skb\n"
 1304      733A2068 
 1304      6F737420 
 1304      64656372 
 1304      79707465 
 1305              	.LC11:
 1306 0309 3C373E69 	.string "<7>ieee80211: %c %s encryption configured, but RX frame not encrypted (SA=%02x:%02x:%02x:%02x:%02x:%02x)\n"
 1306      65656538 
 1306      30323131 
 1306      3A202563 
 1306      20257320 
 1307              	.LC12:
 1308 0373 3C373E69 	.string "<7>ieee80211: %c %s dropped unencrypted RX data frame from %02x:%02x:%02x:%02x:%02x:%02x (drop_unencrypted=1)\n"
 1308      65656538 
 1308      30323131 
 1308      3A202563 
 1308      20257320 
 1309              	.LC13:
 1310 03e2 3C373E69 	.string "<7>ieee80211: %c %s RX: netif_rx dropped the packet\n"
 1310      65656538 
 1310      30323131 
 1310      3A202563 
 1310      20257320 
 1311              	.text
 1312              	.globl ieee80211_rx
 1314              	ieee80211_rx:
 1315              	.LFB931:
 326:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 327:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** /* All received frames are sent to this function. @skb contains the frame in
 328:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c ****  * IEEE 802.11 format, i.e., in the format it was sent over air.
 329:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c ****  * This function is called only as a tasklet (software IRQ). */
 330:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** int ieee80211_rx(struct ieee80211_device *ieee, struct sk_buff *skb,
 331:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		 struct ieee80211_rx_stats *rx_stats)
 332:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** {
 1316              	.loc 1 332 0
 1317 06f9 55       	pushl %ebp
 1318              	.LCFI104:
 1319 06fa 57       	pushl %edi
 1320              	.LCFI105:
 1321 06fb 56       	pushl %esi
 1322              	.LCFI106:
 1323 06fc 53       	pushl %ebx
 1324              	.LCFI107:
 1325 06fd 83EC60   	subl $96,%esp
 1326              	.LCFI108:
 333:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	struct net_device *dev = ieee->dev;
 1327              	.loc 1 333 0
 1328 0700 8B442474 	movl 116(%esp),%eax
 1329 0704 8B00     	movl (%eax),%eax
 334:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	struct ieee80211_hdr_4addr *hdr;
 335:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	size_t hdrlen;
GAS LISTING  			page 96


 336:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	u16 fc, type, stype, sc;
 337:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	struct net_device_stats *stats;
 338:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	unsigned int frag;
 339:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	u8 *payload;
 340:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	u16 ethertype;
 341:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** #ifdef NOT_YET
 342:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	struct net_device *wds = NULL;
 343:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	struct sk_buff *skb2 = NULL;
 344:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	struct net_device *wds = NULL;
 345:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	int frame_authorized = 0;
 346:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	int from_assoc_ap = 0;
 347:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	void *sta = NULL;
 348:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** #endif
 349:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	u8 dst[ETH_ALEN];
 350:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	u8 src[ETH_ALEN];
 351:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	struct ieee80211_crypt_data *crypt = NULL;
 352:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	int keyidx = 0;
 353:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	int can_be_decrypted = 0;
 354:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 355:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	hdr = (struct ieee80211_hdr_4addr *)skb->data;
 356:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	stats = &ieee->stats;
 1330              	.loc 1 356 0
 1331 0706 8B542474 	movl 116(%esp),%edx
 1332              	.loc 1 332 0
 1333 070a 8B6C2478 	movl 120(%esp),%ebp
 1334              	.loc 1 333 0
 1335 070e 89442438 	movl %eax,56(%esp)
 1336              	.loc 1 351 0
 1337 0712 C7442418 	movl $0,24(%esp)
 1337      00000000 
 1338              	.loc 1 352 0
 1339 071a C7442414 	movl $0,20(%esp)
 1339      00000000 
 1340              	.loc 1 356 0
 1341 0722 81C29400 	addl $148,%edx
 1341      0000
 1342              	.loc 1 355 0
 1343 0728 8B9DA800 	movl 168(%ebp),%ebx
 1343      0000
 1344              	.loc 1 356 0
 1345 072e 89542420 	movl %edx,32(%esp)
 357:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 358:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	if (skb->len < 10) {
 1346              	.loc 1 358 0
 1347 0732 8B7D60   	movl 96(%ebp),%edi
 1348 0735 83FF09   	cmpl $9,%edi
 1349 0738 7712     	ja .L205
 359:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		printk(KERN_INFO "%s: SKB length < 10\n", dev->name);
 1350              	.loc 1 359 0
 1351 073a 50       	pushl %eax
 1352              	.LCFI109:
 1353 073b 687A0100 	pushl $.LC5
 1353      00
 1354              	.LCFI110:
 1355 0740 E8FCFFFF 	call printk
 1355      FF
 360:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		goto rx_dropped;
GAS LISTING  			page 97


 1356              	.loc 1 360 0
 1357 0745 58       	popl %eax
 1358              	.LCFI111:
 1359 0746 5A       	popl %edx
 1360              	.LCFI112:
 1361 0747 E9250800 	jmp .L206
 1361      00
 1362              	.L205:
 361:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	}
 362:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 363:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	fc = le16_to_cpu(hdr->frame_ctl);
 1363              	.loc 1 363 0
 1364 074c 668B0B   	movw (%ebx),%cx
 1365 074f 66894C24 	movw %cx,40(%esp)
 1365      28
 364:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	type = WLAN_FC_GET_TYPE(fc);
 1366              	.loc 1 364 0
 1367 0754 83E10C   	andl $12,%ecx
 1368 0757 66894C24 	movw %cx,38(%esp)
 1368      26
 365:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	stype = WLAN_FC_GET_STYPE(fc);
 366:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	sc = le16_to_cpu(hdr->seq_ctl);
 367:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	frag = WLAN_GET_SEQ_FRAG(sc);
 1369              	.loc 1 367 0
 1370 075c 0FB74316 	movzwl 22(%ebx),%eax
 1371 0760 89442410 	movl %eax,16(%esp)
 1372              	.LBB84:
 1373              	.LBB85:
 1374              	.loc 2 1234 0
 1375 0764 0FB77424 	movzwl 40(%esp),%esi
 1375      28
 1376              	.LBE85:
 1377              	.LBE84:
 1378              	.loc 1 367 0
 1379 0769 83E00F   	andl $15,%eax
 1380 076c 8944241C 	movl %eax,28(%esp)
 1381              	.LBB86:
 1382              	.LBB87:
 1383              	.loc 2 1234 0
 1384 0770 89F0     	movl %esi,%eax
 1385              	.LBE87:
 1386              	.LBE86:
 1387              	.loc 1 365 0
 1388 0772 8B4C2428 	movl 40(%esp),%ecx
 1389              	.LBB88:
 1390              	.LBB89:
 1391              	.loc 2 1234 0
 1392 0776 83E00C   	andl $12,%eax
 1393              	.LBE89:
 1394              	.LBE88:
 1395              	.loc 1 365 0
 1396 0779 6681E1F0 	andw $240,%cx
 1396      00
 1397              	.LBB90:
 1398              	.LBB91:
 1399              	.loc 2 1234 0
 1400 077e 83F804   	cmpl $4,%eax
GAS LISTING  			page 98


 1401              	.loc 2 1231 0
 1402 0781 C744240C 	movl $24,12(%esp)
 1402      18000000 
 1403              	.loc 2 1234 0
 1404 0789 7428     	je .L211
 1405 078b 83F808   	cmpl $8,%eax
 1406 078e 7548     	jne .L207
 1407              	.loc 2 1236 0
 1408 0790 F7C60002 	testl $512,%esi
 1408      0000
 1409 0796 7410     	je .L209
 1410 0798 F7C60001 	testl $256,%esi
 1410      0000
 1411 079e 7408     	je .L209
 1412              	.loc 2 1237 0
 1413 07a0 C744240C 	movl $30,12(%esp)
 1413      1E000000 
 1414              	.L209:
 1415              	.loc 2 1238 0
 1416 07a8 84C9     	testb %cl,%cl
 1417 07aa 792C     	jns .L207
 1418              	.loc 2 1239 0
 1419 07ac 8344240C 	addl $2,12(%esp)
 1419      02
 1420              	.loc 2 1240 0
 1421 07b1 EB25     	jmp .L207
 1422              	.L211:
 1423              	.loc 2 1242 0
 1424 07b3 89F0     	movl %esi,%eax
 1425 07b5 25F00000 	andl $240,%eax
 1425      00
 1426 07ba 3DC00000 	cmpl $192,%eax
 1426      00
 1427 07bf 740F     	je .L214
 1428 07c1 3DD00000 	cmpl $208,%eax
 1428      00
 1429              	.loc 2 1248 0
 1430 07c6 C744240C 	movl $16,12(%esp)
 1430      10000000 
 1431              	.loc 2 1242 0
 1432 07ce 7508     	jne .L207
 1433              	.L214:
 1434              	.loc 2 1245 0
 1435 07d0 C744240C 	movl $10,12(%esp)
 1435      0A000000 
 1436              	.L207:
 1437              	.LBE91:
 1438              	.LBE90:
 368:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	hdrlen = ieee80211_get_hdrlen(fc);
 369:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 370:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	/* Put this code here so that we avoid duplicating it in all
 371:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	 * Rx paths. - Jean II */
 372:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** #ifdef CONFIG_WIRELESS_EXT
 373:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** #ifdef IW_WIRELESS_SPY		/* defined in iw_handler.h */
 374:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	/* If spy monitoring on */
 375:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	if (ieee->spy_data.spy_number > 0) {
 376:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		struct iw_quality wstats;
GAS LISTING  			page 99


 377:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 378:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		wstats.updated = 0;
 379:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		if (rx_stats->mask & IEEE80211_STATMASK_RSSI) {
 380:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			wstats.level = rx_stats->rssi;
 381:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			wstats.updated |= IW_QUAL_LEVEL_UPDATED;
 382:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		} else
 383:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			wstats.updated |= IW_QUAL_LEVEL_INVALID;
 384:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 385:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		if (rx_stats->mask & IEEE80211_STATMASK_NOISE) {
 386:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			wstats.noise = rx_stats->noise;
 387:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			wstats.updated |= IW_QUAL_NOISE_UPDATED;
 388:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		} else
 389:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			wstats.updated |= IW_QUAL_NOISE_INVALID;
 390:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 391:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		if (rx_stats->mask & IEEE80211_STATMASK_SIGNAL) {
 392:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			wstats.qual = rx_stats->signal;
 393:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			wstats.updated |= IW_QUAL_QUAL_UPDATED;
 394:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		} else
 395:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			wstats.updated |= IW_QUAL_QUAL_INVALID;
 396:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 397:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		/* Update spy records */
 398:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		wireless_spy_update(ieee->dev, hdr->addr2, &wstats);
 399:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	}
 400:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** #endif				/* IW_WIRELESS_SPY */
 401:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** #endif				/* CONFIG_WIRELESS_EXT */
 402:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 403:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** #ifdef NOT_YET
 404:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	hostap_update_rx_stats(local->ap, hdr, rx_stats);
 405:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** #endif
 406:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 407:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	if (ieee->iw_mode == IW_MODE_MONITOR) {
 1439              	.loc 1 407 0
 1440 07d8 8B542474 	movl 116(%esp),%edx
 1441 07dc 83BAF005 	cmpl $6,1520(%edx)
 1441      000006
 1442 07e3 7524     	jne .L217
 408:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		ieee80211_monitor_rx(ieee, skb, rx_stats);
 1443              	.loc 1 408 0
 1444 07e5 FF74247C 	pushl 124(%esp)
 1445              	.LCFI113:
 1446 07e9 55       	pushl %ebp
 1447              	.LCFI114:
 1448 07ea 52       	pushl %edx
 1449              	.LCFI115:
 1450 07eb E810F8FF 	call ieee80211_monitor_rx
 1450      FF
 409:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		stats->rx_packets++;
 1451              	.loc 1 409 0
 1452 07f0 8B4C242C 	movl 44(%esp),%ecx
 1453 07f4 FF01     	incl (%ecx)
 410:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		stats->rx_bytes += skb->len;
 1454              	.loc 1 410 0
 1455 07f6 8B4560   	movl 96(%ebp),%eax
 1456 07f9 014108   	addl %eax,8(%ecx)
 411:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		return 1;
 1457              	.loc 1 411 0
 1458 07fc 83C40C   	addl $12,%esp
GAS LISTING  			page 100


 1459              	.LCFI116:
 1460 07ff B8010000 	movl $1,%eax
 1460      00
 1461 0804 E9710700 	jmp .L204
 1461      00
 1462              	.L217:
 1463              	.file 8 "include/linux/etherdevice.h"
   1:include/linux/etherdevice.h **** /*
   2:include/linux/etherdevice.h ****  * INET		An implementation of the TCP/IP protocol suite for the LINUX
   3:include/linux/etherdevice.h ****  *		operating system.  NET  is implemented using the  BSD Socket
   4:include/linux/etherdevice.h ****  *		interface as the means of communication with the user level.
   5:include/linux/etherdevice.h ****  *
   6:include/linux/etherdevice.h ****  *		Definitions for the Ethernet handlers.
   7:include/linux/etherdevice.h ****  *
   8:include/linux/etherdevice.h ****  * Version:	@(#)eth.h	1.0.4	05/13/93
   9:include/linux/etherdevice.h ****  *
  10:include/linux/etherdevice.h ****  * Authors:	Ross Biro
  11:include/linux/etherdevice.h ****  *		Fred N. van Kempen, <waltje@uWalt.NL.Mugnet.ORG>
  12:include/linux/etherdevice.h ****  *
  13:include/linux/etherdevice.h ****  *		Relocated to include/linux where it belongs by Alan Cox 
  14:include/linux/etherdevice.h ****  *							<gw4pts@gw4pts.ampr.org>
  15:include/linux/etherdevice.h ****  *
  16:include/linux/etherdevice.h ****  *		This program is free software; you can redistribute it and/or
  17:include/linux/etherdevice.h ****  *		modify it under the terms of the GNU General Public License
  18:include/linux/etherdevice.h ****  *		as published by the Free Software Foundation; either version
  19:include/linux/etherdevice.h ****  *		2 of the License, or (at your option) any later version.
  20:include/linux/etherdevice.h ****  *
  21:include/linux/etherdevice.h ****  *	WARNING: This move may well be temporary. This file will get merged with others RSN.
  22:include/linux/etherdevice.h ****  *
  23:include/linux/etherdevice.h ****  */
  24:include/linux/etherdevice.h **** #ifndef _LINUX_ETHERDEVICE_H
  25:include/linux/etherdevice.h **** #define _LINUX_ETHERDEVICE_H
  26:include/linux/etherdevice.h **** 
  27:include/linux/etherdevice.h **** #include <linux/if_ether.h>
  28:include/linux/etherdevice.h **** #include <linux/random.h>
  29:include/linux/etherdevice.h **** 
  30:include/linux/etherdevice.h **** #ifdef __KERNEL__
  31:include/linux/etherdevice.h **** extern int		eth_header(struct sk_buff *skb, struct net_device *dev,
  32:include/linux/etherdevice.h **** 				   unsigned short type, void *daddr,
  33:include/linux/etherdevice.h **** 				   void *saddr, unsigned len);
  34:include/linux/etherdevice.h **** extern int		eth_rebuild_header(struct sk_buff *skb);
  35:include/linux/etherdevice.h **** extern unsigned short	eth_type_trans(struct sk_buff *skb, struct net_device *dev);
  36:include/linux/etherdevice.h **** extern void		eth_header_cache_update(struct hh_cache *hh, struct net_device *dev,
  37:include/linux/etherdevice.h **** 						unsigned char * haddr);
  38:include/linux/etherdevice.h **** extern int		eth_header_cache(struct neighbour *neigh,
  39:include/linux/etherdevice.h **** 					 struct hh_cache *hh);
  40:include/linux/etherdevice.h **** 
  41:include/linux/etherdevice.h **** extern struct net_device *alloc_etherdev(int sizeof_priv);
  42:include/linux/etherdevice.h **** static inline void eth_copy_and_sum (struct sk_buff *dest, 
  43:include/linux/etherdevice.h **** 				     const unsigned char *src, 
  44:include/linux/etherdevice.h **** 				     int len, int base)
  45:include/linux/etherdevice.h **** {
  46:include/linux/etherdevice.h **** 	memcpy (dest->data, src, len);
  47:include/linux/etherdevice.h **** }
  48:include/linux/etherdevice.h **** 
  49:include/linux/etherdevice.h **** /**
  50:include/linux/etherdevice.h ****  * is_zero_ether_addr - Determine if give Ethernet address is all
GAS LISTING  			page 101


  51:include/linux/etherdevice.h ****  * zeros.
  52:include/linux/etherdevice.h ****  */
  53:include/linux/etherdevice.h **** static inline int is_zero_ether_addr(const u8 *addr)
  54:include/linux/etherdevice.h **** {
  55:include/linux/etherdevice.h **** 	return !(addr[0] | addr[1] | addr[2] | addr[3] | addr[4] | addr[5]);
  56:include/linux/etherdevice.h **** }
  57:include/linux/etherdevice.h **** 
  58:include/linux/etherdevice.h **** /**
  59:include/linux/etherdevice.h ****  * is_multicast_ether_addr - Determine if the given Ethernet address is a
  60:include/linux/etherdevice.h ****  * multicast address.
  61:include/linux/etherdevice.h ****  *
  62:include/linux/etherdevice.h ****  * @addr: Pointer to a six-byte array containing the Ethernet address
  63:include/linux/etherdevice.h ****  *
  64:include/linux/etherdevice.h ****  * Return true if the address is a multicast address.
  65:include/linux/etherdevice.h ****  */
  66:include/linux/etherdevice.h **** static inline int is_multicast_ether_addr(const u8 *addr)
  67:include/linux/etherdevice.h **** {
 1464              	.loc 8 67 0
 1465 0809 F6430401 	testb $1,4(%ebx)
 1466 080d 7519     	jne .L220
 1467              	.LBB92:
 1468              	.loc 2 1181 0
 1469 080f 8D530A   	leal 10(%ebx),%edx
 1470              	.LBB93:
 1471              	.loc 2 1182 0
 1472 0812 8A4201   	movb 1(%edx),%al
 1473 0815 22430A   	andb 10(%ebx),%al
 1474 0818 224202   	andb 2(%edx),%al
 1475 081b 224203   	andb 3(%edx),%al
 1476 081e 224204   	andb 4(%edx),%al
 1477 0821 224205   	andb 5(%edx),%al
 1478              	.LBE93:
 1479              	.LBE92:
 1480              	.loc 2 1181 0
 1481 0824 FEC0     	incb %al
 1482 0826 7510     	jne .L218
 1483              	.L220:
 1484 0828 8B442474 	movl 116(%esp),%eax
 1485 082c 8B807406 	movl 1652(%eax),%eax
 1485      0000
 1486 0832 89442408 	movl %eax,8(%esp)
 1487 0836 EB0E     	jmp .L219
 1488              	.L218:
 1489 0838 8B542474 	movl 116(%esp),%edx
 1490 083c 8B927006 	movl 1648(%edx),%edx
 1490      0000
 1491 0842 89542408 	movl %edx,8(%esp)
 1492              	.L219:
 412:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	}
 413:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 414:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	can_be_decrypted = (is_multicast_ether_addr(hdr->addr1) ||
 415:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			    is_broadcast_ether_addr(hdr->addr2)) ?
 416:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	    ieee->host_mc_decrypt : ieee->host_decrypt;
 417:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 418:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	if (can_be_decrypted) {
 1493              	.loc 1 418 0
 1494 0846 837C2408 	cmpl $0,8(%esp)
GAS LISTING  			page 102


 1494      00
 1495 084b 0F84AE00 	je .L223
 1495      0000
 1496              	.LBB94:
 419:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		int idx = 0;
 420:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		if (skb->len >= hdrlen + 3) {
 1497              	.loc 1 420 0
 1498 0851 8B44240C 	movl 12(%esp),%eax
 1499 0855 83C003   	addl $3,%eax
 1500              	.loc 1 419 0
 1501 0858 31D2     	xorl %edx,%edx
 1502              	.loc 1 420 0
 1503 085a 39C7     	cmpl %eax,%edi
 1504 085c 720E     	jb .L224
 421:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			/* Top two-bits of byte 3 are the key index */
 422:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			idx = skb->data[hdrlen + 3] >> 6;
 1505              	.loc 1 422 0
 1506 085e 8B54240C 	movl 12(%esp),%edx
 1507 0862 8A441303 	movb 3(%ebx,%edx),%al
 1508 0866 C0E806   	shrb $6,%al
 1509 0869 0FB6D0   	movzbl %al,%edx
 1510              	.L224:
 423:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		}
 424:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 425:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		/* ieee->crypt[] is WEP_KEY (4) in length.  Given that idx
 426:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		 * is only allowed 2-bits of storage, no value of idx can
 427:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		 * be provided via above code that would result in idx
 428:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		 * being out of range */
 429:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		crypt = ieee->crypt[idx];
 1511              	.loc 1 429 0
 1512 086c 8B442474 	movl 116(%esp),%eax
 1513 0870 8B9490A0 	movl 1696(%eax,%edx,4),%edx
 1513      060000
 430:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 431:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** #ifdef NOT_YET
 432:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		sta = NULL;
 433:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 434:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		/* Use station specific key to override default keys if the
 435:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		 * receiver address is a unicast address ("individual RA"). If
 436:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		 * bcrx_sta_key parameter is set, station specific key is used
 437:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		 * even with broad/multicast targets (this is against IEEE
 438:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		 * 802.11, but makes it easier to use different keys with
 439:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		 * stations that do not support WEP key mapping). */
 440:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 441:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		if (!(hdr->addr1[0] & 0x01) || local->bcrx_sta_key)
 442:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			(void)hostap_handle_sta_crypto(local, hdr, &crypt,
 443:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 						       &sta);
 444:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** #endif
 445:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 446:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		/* allow NULL decrypt to indicate an station specific override
 447:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		 * for default encryption */
 448:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		if (crypt && (crypt->ops == NULL ||
 1514              	.loc 1 448 0
 1515 0877 85D2     	testl %edx,%edx
 1516              	.loc 1 429 0
 1517 0879 89542418 	movl %edx,24(%esp)
 1518              	.loc 1 448 0
GAS LISTING  			page 103


 1519 087d 7415     	je .L703
 1520 087f 8B4208   	movl 8(%edx),%eax
 1521 0882 85C0     	testl %eax,%eax
 1522 0884 7406     	je .L226
 1523 0886 83781C00 	cmpl $0,28(%eax)
 1524 088a 7573     	jne .L223
 1525              	.L226:
 449:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			      crypt->ops->decrypt_mpdu == NULL))
 450:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			crypt = NULL;
 1526              	.loc 1 450 0
 1527 088c C7442418 	movl $0,24(%esp)
 1527      00000000 
 1528              	.L703:
 451:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 452:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		if (!crypt && (fc & IEEE80211_FCTL_PROTECTED)) {
 1529              	.loc 1 452 0
 1530 0894 81E60040 	andl $16384,%esi
 1530      0000
 1531 089a 7463     	je .L223
 453:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			/* This seems to be triggered by some (multicast?)
 454:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			 * frames from other than current BSS, so just drop the
 455:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			 * frames silently instead of filling system log with
 456:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			 * these reports. */
 457:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			IEEE80211_DEBUG_DROP("Decryption failed (not set)"
 1532              	.loc 1 457 0
 1533 089c 803D0000 	cmpb $0,ieee80211_debug_level
 1533      000000
 1534 08a3 794B     	jns .L228
 1535              	.LBB95:
 1536              	.LBB96:
 1537              	.loc 5 91 0
 1538 08a5 B800E0FF 	movl $-8192,%eax
 1538      FF
 1539              	
 1540 08aa 21E0     	andl %esp,%eax
 1541              	
 1542              	.LBE96:
 1543              	.LBE95:
 1544              	.loc 5 89 0
 1545 08ac 8B4014   	movl 20(%eax),%eax
 1546 08af 2500FFFF 	andl $268435200,%eax
 1546      0F
 1547 08b4 83F801   	cmpl $1,%eax
 1548 08b7 0FB6430F 	movzbl 15(%ebx),%eax
 1549 08bb 50       	pushl %eax
 1550              	.LCFI117:
 1551 08bc 0FB6430E 	movzbl 14(%ebx),%eax
 1552 08c0 50       	pushl %eax
 1553              	.LCFI118:
 1554 08c1 0FB6430D 	movzbl 13(%ebx),%eax
 1555 08c5 50       	pushl %eax
 1556              	.LCFI119:
 1557 08c6 0FB6430C 	movzbl 12(%ebx),%eax
 1558 08ca 50       	pushl %eax
 1559              	.LCFI120:
 1560 08cb 0FB6430B 	movzbl 11(%ebx),%eax
 1561 08cf 50       	pushl %eax
GAS LISTING  			page 104


 1562              	.LCFI121:
 1563 08d0 0FB6430A 	movzbl 10(%ebx),%eax
 1564 08d4 19D2     	sbbl %edx,%edx
 1565 08d6 50       	pushl %eax
 1566              	.LCFI122:
 1567 08d7 83E20C   	andl $12,%edx
 1568 08da 685B0000 	pushl $__func__.5
 1568      00
 1569              	.LCFI123:
 1570 08df 83C249   	addl $73,%edx
 1571 08e2 52       	pushl %edx
 1572              	.LCFI124:
 1573 08e3 68920100 	pushl $.LC6
 1573      00
 1574              	.LCFI125:
 1575 08e8 E8FCFFFF 	call printk
 1575      FF
 1576 08ed 83C424   	addl $36,%esp
 1577              	.LCFI126:
 1578              	.L228:
 458:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 					     " (SA=" MAC_FMT ")\n",
 459:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 					     MAC_ARG(hdr->addr2));
 460:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			ieee->ieee_stats.rx_discards_undecryptable++;
 1579              	.loc 1 460 0
 1580 08f0 8B542474 	movl 116(%esp),%edx
 1581 08f4 FF823801 	incl 312(%edx)
 1581      0000
 461:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			goto rx_dropped;
 1582              	.loc 1 461 0
 1583 08fa E9720600 	jmp .L206
 1583      00
 1584              	.L223:
 1585              	.LBE94:
 462:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		}
 463:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	}
 464:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** #ifdef NOT_YET
 465:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	if (type != WLAN_FC_TYPE_DATA) {
 466:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		if (type == WLAN_FC_TYPE_MGMT && stype == WLAN_FC_STYPE_AUTH &&
 467:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		    fc & IEEE80211_FCTL_PROTECTED && ieee->host_decrypt &&
 468:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		    (keyidx = hostap_rx_frame_decrypt(ieee, skb, crypt)) < 0) {
 469:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			printk(KERN_DEBUG "%s: failed to decrypt mgmt::auth "
 470:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			       "from " MAC_FMT "\n", dev->name,
 471:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			       MAC_ARG(hdr->addr2));
 472:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			/* TODO: could inform hostapd about this so that it
 473:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			 * could send auth failure report */
 474:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			goto rx_dropped;
 475:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		}
 476:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 477:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		if (ieee80211_rx_frame_mgmt(ieee, skb, rx_stats, type, stype))
 478:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			goto rx_dropped;
 479:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		else
 480:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			goto rx_exit;
 481:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	}
 482:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** #endif
 483:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 484:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	/* Data frame - extract src/dst addresses */
 485:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	if (skb->len < IEEE80211_3ADDR_LEN)
GAS LISTING  			page 105


 1586              	.loc 1 485 0
 1587 08ff 8B5560   	movl 96(%ebp),%edx
 1588 0902 83FA17   	cmpl $23,%edx
 1589 0905 0F866606 	jbe .L206
 1589      0000
 486:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		goto rx_dropped;
 487:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 488:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	switch (fc & (IEEE80211_FCTL_FROMDS | IEEE80211_FCTL_TODS)) {
 1590              	.loc 1 488 0
 1591 090b 0FB77424 	movzwl 40(%esp),%esi
 1591      28
 1592 0910 89F0     	movl %esi,%eax
 1593 0912 25000300 	andl $768,%eax
 1593      00
 1594 0917 3D000100 	cmpl $256,%eax
 1594      00
 1595 091c 7438     	je .L280
 1596 091e 7F09     	jg .L416
 1597 0920 85C0     	testl %eax,%eax
 1598 0922 7465     	je .L371
 1599 0924 E9800000 	jmp .L234
 1599      00
 1600              	.L416:
 1601 0929 3D000200 	cmpl $512,%eax
 1601      00
 1602 092e 7409     	je .L235
 1603 0930 3D000300 	cmpl $768,%eax
 1603      00
 1604 0935 742C     	je .L325
 1605 0937 EB70     	jmp .L234
 1606              	.L235:
 1607              	.LBB97:
 1608              	.LBB98:
 1609              	.loc 4 240 0
 1610 0939 8B4304   	movl 4(%ebx),%eax
 1611 093c 89442450 	movl %eax,80(%esp)
 1612              	.loc 4 241 0
 1613 0940 668B4308 	movw 8(%ebx),%ax
 1614 0944 66894424 	movw %ax,84(%esp)
 1614      54
 1615              	.LBE98:
 1616              	.LBE97:
 1617              	.LBB99:
 1618              	.LBB100:
 1619              	.loc 4 240 0
 1620 0949 8B4310   	movl 16(%ebx),%eax
 1621 094c 89442440 	movl %eax,64(%esp)
 1622              	.loc 4 241 0
 1623 0950 668B4314 	movw 20(%ebx),%ax
 1624 0954 EB4E     	jmp .L705
 1625              	.L280:
 1626              	.LBE100:
 1627              	.LBE99:
 1628              	.LBB101:
 1629              	.LBB102:
 1630              	.loc 4 240 0
 1631 0956 8B4310   	movl 16(%ebx),%eax
GAS LISTING  			page 106


 1632 0959 89442450 	movl %eax,80(%esp)
 1633              	.loc 4 241 0
 1634 095d 668B4314 	movw 20(%ebx),%ax
 1635 0961 EB31     	jmp .L709
 1636              	.L325:
 1637              	.LBE102:
 1638              	.LBE101:
 489:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	case IEEE80211_FCTL_FROMDS:
 490:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		memcpy(dst, hdr->addr1, ETH_ALEN);
 491:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		memcpy(src, hdr->addr3, ETH_ALEN);
 492:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		break;
 493:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	case IEEE80211_FCTL_TODS:
 494:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		memcpy(dst, hdr->addr3, ETH_ALEN);
 495:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		memcpy(src, hdr->addr2, ETH_ALEN);
 496:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		break;
 497:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	case IEEE80211_FCTL_FROMDS | IEEE80211_FCTL_TODS:
 498:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		if (skb->len < IEEE80211_4ADDR_LEN)
 1639              	.loc 1 498 0
 1640 0963 83FA1D   	cmpl $29,%edx
 1641 0966 0F860506 	jbe .L206
 1641      0000
 1642              	.LBB103:
 1643              	.LBB104:
 1644              	.loc 4 240 0
 1645 096c 8B4310   	movl 16(%ebx),%eax
 1646 096f 89442450 	movl %eax,80(%esp)
 1647              	.loc 4 241 0
 1648 0973 668B4314 	movw 20(%ebx),%ax
 1649 0977 66894424 	movw %ax,84(%esp)
 1649      54
 1650              	.LBE104:
 1651              	.LBE103:
 1652              	.LBB105:
 1653              	.LBB106:
 1654              	.loc 4 240 0
 1655 097c 8B4318   	movl 24(%ebx),%eax
 1656 097f 89442440 	movl %eax,64(%esp)
 1657              	.loc 4 241 0
 1658 0983 668B431C 	movw 28(%ebx),%ax
 1659 0987 EB1B     	jmp .L705
 1660              	.L371:
 1661              	.LBE106:
 1662              	.LBE105:
 1663              	.LBB107:
 1664              	.LBB108:
 1665              	.loc 4 240 0
 1666 0989 8B4304   	movl 4(%ebx),%eax
 1667 098c 89442450 	movl %eax,80(%esp)
 1668              	.loc 4 241 0
 1669 0990 668B4308 	movw 8(%ebx),%ax
 1670              	.L709:
 1671 0994 66894424 	movw %ax,84(%esp)
 1671      54
 1672              	.LBE108:
 1673              	.LBE107:
 1674              	.LBB109:
 1675              	.LBB110:
GAS LISTING  			page 107


 1676              	.loc 4 240 0
 1677 0999 8B430A   	movl 10(%ebx),%eax
 1678 099c 89442440 	movl %eax,64(%esp)
 1679              	.loc 4 241 0
 1680 09a0 668B430E 	movw 14(%ebx),%ax
 1681              	.L705:
 1682 09a4 66894424 	movw %ax,68(%esp)
 1682      44
 1683              	.L234:
 1684              	.LBE110:
 1685              	.LBE109:
 499:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			goto rx_dropped;
 500:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		memcpy(dst, hdr->addr3, ETH_ALEN);
 501:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		memcpy(src, hdr->addr4, ETH_ALEN);
 502:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		break;
 503:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	case 0:
 504:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		memcpy(dst, hdr->addr1, ETH_ALEN);
 505:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		memcpy(src, hdr->addr2, ETH_ALEN);
 506:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		break;
 507:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	}
 508:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 509:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** #ifdef NOT_YET
 510:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	if (hostap_rx_frame_wds(ieee, hdr, fc, &wds))
 511:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		goto rx_dropped;
 512:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	if (wds) {
 513:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		skb->dev = dev = wds;
 514:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		stats = hostap_get_stats(dev);
 515:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	}
 516:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 517:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	if (ieee->iw_mode == IW_MODE_MASTER && !wds &&
 518:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	    (fc & (IEEE80211_FCTL_TODS | IEEE80211_FCTL_FROMDS)) ==
 519:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	    IEEE80211_FCTL_FROMDS && ieee->stadev
 520:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	    && !compare_ether_addr(hdr->addr2, ieee->assoc_ap_addr)) {
 521:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		/* Frame from BSSID of the AP for which we are a client */
 522:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		skb->dev = dev = ieee->stadev;
 523:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		stats = hostap_get_stats(dev);
 524:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		from_assoc_ap = 1;
 525:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	}
 526:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** #endif
 527:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 528:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	dev->last_rx = jiffies;
 1686              	.loc 1 528 0
 1687 09a9 A1000000 	movl jiffies,%eax
 1687      00
 1688 09ae 8B542438 	movl 56(%esp),%edx
 529:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 530:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** #ifdef NOT_YET
 531:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	if ((ieee->iw_mode == IW_MODE_MASTER ||
 532:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	     ieee->iw_mode == IW_MODE_REPEAT) && !from_assoc_ap) {
 533:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		switch (hostap_handle_sta_rx(ieee, dev, skb, rx_stats,
 534:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 					     wds != NULL)) {
 535:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		case AP_RX_CONTINUE_NOT_AUTHORIZED:
 536:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			frame_authorized = 0;
 537:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			break;
 538:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		case AP_RX_CONTINUE:
 539:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			frame_authorized = 1;
 540:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			break;
GAS LISTING  			page 108


 541:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		case AP_RX_DROP:
 542:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			goto rx_dropped;
 543:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		case AP_RX_EXIT:
 544:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			goto rx_exit;
 545:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		}
 546:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	}
 547:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** #endif
 548:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 549:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	/* Nullfunc frames may have PS-bit set, so they must be passed to
 550:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	 * hostap_handle_sta_rx() before being dropped here. */
 551:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 552:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	stype &= ~IEEE80211_STYPE_QOS_DATA;
 553:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 554:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	if (stype != IEEE80211_STYPE_DATA &&
 1689              	.loc 1 554 0
 1690 09b2 6681E17F 	andw $-129,%cx
 1690      FF
 1691              	.loc 1 528 0
 1692 09b7 894254   	movl %eax,84(%edx)
 1693              	.loc 1 554 0
 1694 09ba 7460     	je .L417
 1695 09bc 6683F910 	cmpw $16,%cx
 1696 09c0 745A     	je .L417
 1697 09c2 6683F920 	cmpw $32,%cx
 1698 09c6 7454     	je .L417
 1699 09c8 6683F930 	cmpw $48,%cx
 1700 09cc 744E     	je .L417
 555:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	    stype != IEEE80211_STYPE_DATA_CFACK &&
 556:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	    stype != IEEE80211_STYPE_DATA_CFPOLL &&
 557:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	    stype != IEEE80211_STYPE_DATA_CFACKPOLL) {
 558:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		if (stype != IEEE80211_STYPE_NULLFUNC)
 1701              	.loc 1 558 0
 1702 09ce 6683F940 	cmpw $64,%cx
 1703 09d2 0F849905 	je .L206
 1703      0000
 559:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			IEEE80211_DEBUG_DROP("RX: dropped data frame "
 1704              	.loc 1 559 0
 1705 09d8 803D0000 	cmpb $0,ieee80211_debug_level
 1705      000000
 1706 09df 0F898C05 	jns .L206
 1706      0000
 1707              	.LBB111:
 1708              	.LBB112:
 1709              	.loc 5 91 0
 1710 09e5 B800E0FF 	movl $-8192,%eax
 1710      FF
 1711              	
 1712 09ea 21E0     	andl %esp,%eax
 1713              	
 1714              	.LBE112:
 1715              	.LBE111:
 1716              	.loc 5 89 0
 1717 09ec 8B4014   	movl 20(%eax),%eax
 1718 09ef 2500FFFF 	andl $268435200,%eax
 1718      0F
 1719 09f4 FF7560   	pushl 96(%ebp)
 1720              	.LCFI127:
GAS LISTING  			page 109


 1721 09f7 83F801   	cmpl $1,%eax
 1722 09fa 0FB7C1   	movzwl %cx,%eax
 1723 09fd 50       	pushl %eax
 1724              	.LCFI128:
 1725 09fe 0FB74424 	movzwl 46(%esp),%eax
 1725      2E
 1726 0a03 19D2     	sbbl %edx,%edx
 1727 0a05 50       	pushl %eax
 1728              	.LCFI129:
 1729 0a06 83E20C   	andl $12,%edx
 1730 0a09 685B0000 	pushl $__func__.5
 1730      00
 1731              	.LCFI130:
 1732 0a0e 83C249   	addl $73,%edx
 1733 0a11 52       	pushl %edx
 1734              	.LCFI131:
 1735 0a12 68E60100 	pushl $.LC7
 1735      00
 1736              	.LCFI132:
 1737 0a17 E9E60000 	jmp .L708
 1737      00
 1738              	.LCFI133:
 1739              	.L417:
 560:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 					     "with no data (type=0x%02x, "
 561:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 					     "subtype=0x%02x, len=%d)\n",
 562:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 					     type, stype, skb->len);
 563:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		goto rx_dropped;
 564:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	}
 565:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 566:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	/* skb: hdr + (possibly fragmented, possibly encrypted) payload */
 567:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 568:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	if ((fc & IEEE80211_FCTL_PROTECTED) && can_be_decrypted &&
 1740              	.loc 1 568 0
 1741 0a1c F7C60040 	testl $16384,%esi
 1741      0000
 1742 0a22 7424     	je .L424
 1743 0a24 837C2408 	cmpl $0,8(%esp)
 1743      00
 1744 0a29 741D     	je .L424
 1745 0a2b FF742418 	pushl 24(%esp)
 1746              	.LCFI134:
 1747 0a2f 55       	pushl %ebp
 1748              	.LCFI135:
 1749 0a30 FF74247C 	pushl 124(%esp)
 1750              	.LCFI136:
 1751 0a34 E89EFAFF 	call ieee80211_rx_frame_decrypt
 1751      FF
 1752 0a39 89442420 	movl %eax,32(%esp)
 1753 0a3d 83C40C   	addl $12,%esp
 1754              	.LCFI137:
 1755 0a40 85C0     	testl %eax,%eax
 1756 0a42 0F882905 	js .L206
 1756      0000
 1757              	.L424:
 569:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	    (keyidx = ieee80211_rx_frame_decrypt(ieee, skb, crypt)) < 0)
 570:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		goto rx_dropped;
 571:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
GAS LISTING  			page 110


 572:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	hdr = (struct ieee80211_hdr_4addr *)skb->data;
 573:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 574:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	/* skb: hdr + (possibly fragmented) plaintext payload */
 575:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	// PR: FIXME: hostap has additional conditions in the "if" below:
 576:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	// ieee->host_decrypt && (fc & IEEE80211_FCTL_PROTECTED) &&
 577:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	if ((frag != 0) || (fc & IEEE80211_FCTL_MOREFRAGS)) {
 1758              	.loc 1 577 0
 1759 0a48 837C241C 	cmpl $0,28(%esp)
 1759      00
 1760              	.loc 1 572 0
 1761 0a4d 8B9DA800 	movl 168(%ebp),%ebx
 1761      0000
 1762              	.loc 1 577 0
 1763 0a53 750C     	jne .L426
 1764 0a55 81E60004 	andl $1024,%esi
 1764      0000
 1765 0a5b 0F84D301 	je .L425
 1765      0000
 1766              	.L426:
 1767              	.LBB113:
 578:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		int flen;
 579:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		struct sk_buff *frag_skb = ieee80211_frag_cache_get(ieee, hdr);
 1768              	.loc 1 579 0
 1769 0a61 53       	pushl %ebx
 1770              	.LCFI138:
 1771 0a62 FF742478 	pushl 120(%esp)
 1772              	.LCFI139:
 1773 0a66 E894F7FF 	call ieee80211_frag_cache_get
 1773      FF
 1774 0a6b 8944240C 	movl %eax,12(%esp)
 580:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		IEEE80211_DEBUG_FRAG("Rx Fragment received (%u)\n", frag);
 1775              	.loc 1 580 0
 1776 0a6f F6050000 	testb $32,ieee80211_debug_level
 1776      000020
 1777 0a76 5F       	popl %edi
 1778              	.LCFI140:
 1779 0a77 58       	popl %eax
 1780              	.LCFI141:
 1781 0a78 7431     	je .L427
 1782              	.LBB114:
 1783              	.LBB115:
 1784              	.loc 5 91 0
 1785 0a7a B800E0FF 	movl $-8192,%eax
 1785      FF
 1786              	
 1787 0a7f 21E0     	andl %esp,%eax
 1788              	
 1789              	.LBE115:
 1790              	.LBE114:
 1791              	.loc 5 89 0
 1792 0a81 8B4014   	movl 20(%eax),%eax
 1793 0a84 2500FFFF 	andl $268435200,%eax
 1793      0F
 1794 0a89 83F801   	cmpl $1,%eax
 1795 0a8c 19C0     	sbbl %eax,%eax
 1796 0a8e FF74241C 	pushl 28(%esp)
 1797              	.LCFI142:
GAS LISTING  			page 111


 1798 0a92 83E00C   	andl $12,%eax
 1799 0a95 685B0000 	pushl $__func__.5
 1799      00
 1800              	.LCFI143:
 1801 0a9a 83C049   	addl $73,%eax
 1802 0a9d 50       	pushl %eax
 1803              	.LCFI144:
 1804 0a9e 68450200 	pushl $.LC8
 1804      00
 1805              	.LCFI145:
 1806 0aa3 E8FCFFFF 	call printk
 1806      FF
 1807 0aa8 83C410   	addl $16,%esp
 1808              	.LCFI146:
 1809              	.L427:
 581:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 582:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		if (!frag_skb) {
 1810              	.loc 1 582 0
 1811 0aab 837C2404 	cmpl $0,4(%esp)
 1811      00
 1812 0ab0 755D     	jne .L432
 583:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			IEEE80211_DEBUG(IEEE80211_DL_RX | IEEE80211_DL_FRAG,
 1813              	.loc 1 583 0
 1814 0ab2 F7050000 	testl $544,ieee80211_debug_level
 1814      00002002 
 1814      0000
 1815 0abc 0F84AF04 	je .L206
 1815      0000
 1816              	.LBB116:
 1817              	.LBB117:
 1818              	.loc 5 91 0
 1819 0ac2 B800E0FF 	movl $-8192,%eax
 1819      FF
 1820              	
 1821 0ac7 21E0     	andl %esp,%eax
 1822              	
 1823              	.LBE117:
 1824              	.LBE116:
 1825              	.loc 5 89 0
 1826 0ac9 8B4014   	movl 20(%eax),%eax
 1827 0acc 2500FFFF 	andl $268435200,%eax
 1827      0F
 1828 0ad1 83F801   	cmpl $1,%eax
 1829 0ad4 FF74241C 	pushl 28(%esp)
 1830              	.LCFI147:
 1831 0ad8 19D2     	sbbl %edx,%edx
 1832 0ada 81642414 	andl $65520,20(%esp)
 1832      F0FF0000 
 1833 0ae2 FF742414 	pushl 20(%esp)
 1834              	.LCFI148:
 1835 0ae6 8B442430 	movl 48(%esp),%eax
 1836 0aea C1E80A   	shrl $10,%eax
 1837 0aed 83E001   	andl $1,%eax
 1838 0af0 50       	pushl %eax
 1839              	.LCFI149:
 1840 0af1 83E20C   	andl $12,%edx
 1841 0af4 685B0000 	pushl $__func__.5
GAS LISTING  			page 112


 1841      00
 1842              	.LCFI150:
 1843 0af9 83C249   	addl $73,%edx
 1844 0afc 52       	pushl %edx
 1845              	.LCFI151:
 1846 0afd 68740200 	pushl $.LC9
 1846      00
 1847              	.LCFI152:
 1848              	.L708:
 1849 0b02 E8FCFFFF 	call printk
 1849      FF
 1850 0b07 83C418   	addl $24,%esp
 1851              	.LCFI153:
 584:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 					"Rx cannot get skb from fragment "
 585:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 					"cache (morefrag=%d seq=%u frag=%u)\n",
 586:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 					(fc & IEEE80211_FCTL_MOREFRAGS) != 0,
 587:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 					WLAN_GET_SEQ_SEQ(sc), frag);
 588:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			goto rx_dropped;
 1852              	.loc 1 588 0
 1853 0b0a E9620400 	jmp .L206
 1853      00
 1854              	.L432:
 589:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		}
 590:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 591:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		flen = skb->len;
 592:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		if (frag != 0)
 1855              	.loc 1 592 0
 1856 0b0f 837C241C 	cmpl $0,28(%esp)
 1856      00
 1857              	.loc 1 591 0
 1858 0b14 8B4560   	movl 96(%ebp),%eax
 1859              	.loc 1 592 0
 1860 0b17 7404     	je .L438
 593:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			flen -= hdrlen;
 1861              	.loc 1 593 0
 1862 0b19 2B44240C 	subl 12(%esp),%eax
 1863              	.L438:
 594:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 595:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		if (frag_skb->tail + flen > frag_skb->end) {
 1864              	.loc 1 595 0
 1865 0b1d 8B4C2404 	movl 4(%esp),%ecx
 1866 0b21 8BB9AC00 	movl 172(%ecx),%edi
 1866      0000
 1867 0b27 8D1407   	leal (%edi,%eax),%edx
 1868 0b2a 3B91B000 	cmpl 176(%ecx),%edx
 1868      0000
 1869 0b30 7623     	jbe .L439
 596:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			printk(KERN_WARNING "%s: host decrypted and "
 1870              	.loc 1 596 0
 1871 0b32 FF742438 	pushl 56(%esp)
 1872              	.LCFI154:
 1873 0b36 68CC0200 	pushl $.LC10
 1873      00
 1874              	.LCFI155:
 1875 0b3b E8FCFFFF 	call printk
 1875      FF
 597:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			       "reassembled frame did not fit skb\n",
GAS LISTING  			page 113


 598:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			       dev->name);
 599:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			ieee80211_frag_cache_invalidate(ieee, hdr);
 1876              	.loc 1 599 0
 1877 0b40 53       	pushl %ebx
 1878              	.LCFI156:
 1879 0b41 FFB42480 	pushl 128(%esp)
 1879      000000
 1880              	.LCFI157:
 1881              	.LCFI158:
 1882 0b48 E815F8FF 	call ieee80211_frag_cache_invalidate
 1882      FF
 600:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			goto rx_dropped;
 1883              	.loc 1 600 0
 1884 0b4d 83C410   	addl $16,%esp
 1885              	.LCFI159:
 1886 0b50 E91C0400 	jmp .L206
 1886      00
 1887              	.L439:
 601:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		}
 602:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 603:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		if (frag == 0) {
 1888              	.loc 1 603 0
 1889 0b55 837C241C 	cmpl $0,28(%esp)
 1889      00
 1890 0b5a 7521     	jne .L440
 1891              	.LBB118:
 1892              	.LBB119:
 1893              	.LBB120:
 1894              	.loc 3 702 0
 1895 0b5c 8B4C2404 	movl 4(%esp),%ecx
 1896 0b60 83796400 	cmpl $0,100(%ecx)
 1897 0b64 7402     	je .L470
 1898              	.loc 3 759 0
 1899              	
 1900 0b66 0F0B     	ud2
 1901              	
 1902              	
 1903              	.L470:
 1904              	.loc 3 760 0
 1905 0b68 8B4C2404 	movl 4(%esp),%ecx
 1906              	.loc 3 761 0
 1907 0b6c 014160   	addl %eax,96(%ecx)
 1908              	.LBE120:
 1909              	.LBE119:
 1910              	.loc 4 205 0
 1911 0b6f 8BB5A800 	movl 168(%ebp),%esi
 1911      0000
 1912              	.LBB121:
 1913              	.LBB122:
 1914              	.loc 3 760 0
 1915 0b75 8991AC00 	movl %edx,172(%ecx)
 1915      0000
 1916 0b7b EB23     	jmp .L706
 1917              	.L440:
 1918              	.LBE122:
 1919              	.LBE121:
 1920              	.LBE118:
GAS LISTING  			page 114


 1921              	.LBB123:
 1922              	.LBB124:
 1923              	.LBB125:
 1924              	.loc 3 702 0
 1925 0b7d 8B4C2404 	movl 4(%esp),%ecx
 1926 0b81 83796400 	cmpl $0,100(%ecx)
 1927 0b85 7402     	je .L506
 1928              	.loc 3 759 0
 1929              	
 1930 0b87 0F0B     	ud2
 1931              	
 1932              	
 1933              	.L506:
 1934              	.loc 3 760 0
 1935 0b89 8B4C2404 	movl 4(%esp),%ecx
 1936 0b8d 8991AC00 	movl %edx,172(%ecx)
 1936      0000
 1937              	.loc 3 761 0
 1938 0b93 014160   	addl %eax,96(%ecx)
 1939              	.LBE125:
 1940              	.LBE124:
 1941              	.loc 4 205 0
 1942 0b96 8B74240C 	movl 12(%esp),%esi
 1943 0b9a 03B5A800 	addl 168(%ebp),%esi
 1943      0000
 1944              	.L706:
 1945              	.LBB126:
 1946              	.loc 4 207 0
 1947 0ba0 89C1     	movl %eax,%ecx
 1948 0ba2 C1E902   	shrl $2,%ecx
 1949              	
 1950 0ba5 F3A5     	rep
 1951 0ba7 89C1     	movl %eax,%ecx
 1952 0ba9 83E103   	andl $3,%ecx
 1953 0bac 7402     	jz 1f
 1954 0bae F3A4     	rep
 1955              	1:
 1956              	
 1957              	.LBE126:
 1958              	.LBE123:
 1959              	.LBB127:
 1960              	.LBB128:
 1961              	.LBB129:
 1962              	.LBB130:
 1963              	.loc 5 91 0
 1964 0bb0 B800E0FF 	movl $-8192,%eax
 1964      FF
 1965              	
 1966 0bb5 21E0     	andl %esp,%eax
 1967              	
 1968              	.LBE130:
 1969              	.LBE129:
 1970              	.loc 5 89 0
 1971 0bb7 F7401400 	testl $268369920,20(%eax)
 1971      00FF0F
 1972 0bbe 7507     	jne .L513
 1973              	.LBB131:
GAS LISTING  			page 115


 1974              	.loc 6 659 0
 1975              	
 1976 0bc0 9C58     	pushfl
 1977              	
 1978              	.LBE131:
 1979 0bc2 F6C402   	testb $2,%ah
 1980 0bc5 752C     	jne .L512
 1981              	.L513:
 1982              	.LBB132:
 1983              	.LBB133:
 1984              	.LBB134:
 1985              	.LBB135:
 1986              	.loc 7 135 0
 1987              	
 1988 0bc7 FF8DA000 	decl 160(%ebp)
 1988      00000F94 
 1988      C0
 1989              	
 1990              	.LBE135:
 1991              	.LBE134:
 1992              	.loc 7 132 0
 1993 0bd0 84C0     	testb %al,%al
 1994 0bd2 743E     	je .L526
 1995              	.LBB136:
 1996              	.loc 6 645 0
 1997              	
 1998 0bd4 9C5BFA   	pushfl
 1999              	.loc 6 647 0
 2000              	
 2001 0bd7 A1240000 	movl per_cpu__softnet_data+36,%eax
 2001      00
 2002 0bdc 894500   	movl %eax,(%ebp)
 2003              	.loc 6 649 0
 2004 0bdf B8020000 	movl $2,%eax
 2004      00
 2005              	.loc 6 648 0
 2006 0be4 892D2400 	movl %ebp,per_cpu__softnet_data+36
 2006      0000
 2007              	.loc 6 649 0
 2008 0bea E8FCFFFF 	call raise_softirq_irqoff
 2008      FF
 2009              	.loc 6 650 0
 2010              	
 2011 0bef 539D     	pushl %ebx
 2012              	
 2013              	.LBE136:
 2014              	.LBE133:
 2015              	.LBE132:
 2016 0bf1 EB1F     	jmp .L526
 2017              	.L512:
 2018              	.LBB137:
 2019              	.LBB138:
 2020              	.loc 3 369 0
 2021 0bf3 8B85A000 	movl 160(%ebp),%eax
 2021      0000
 2022 0bf9 48       	decl %eax
 2023 0bfa 7502     	jne .L521
GAS LISTING  			page 116


 2024              	.loc 3 370 0
 2025 0bfc EB0D     	jmp .L522
 2026              	.L521:
 2027              	.LBB139:
 2028              	.LBB140:
 2029              	.loc 7 135 0
 2030              	
 2031 0bfe FF8DA000 	decl 160(%ebp)
 2031      00000F94 
 2031      C0
 2032              	
 2033              	.LBE140:
 2034              	.LBE139:
 2035              	.loc 7 132 0
 2036 0c07 84C0     	testb %al,%al
 2037 0c09 7407     	je .L526
 2038              	.L522:
 2039              	.loc 3 373 0
 2040 0c0b 55       	pushl %ebp
 2041              	.LCFI160:
 2042 0c0c E8FCFFFF 	call __kfree_skb
 2042      FF
 2043 0c11 5E       	popl %esi
 2044              	.LCFI161:
 2045              	.L526:
 2046              	.LBE138:
 2047              	.LBE137:
 2048              	.LBE128:
 2049              	.LBE127:
 604:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			/* copy first fragment (including full headers) into
 605:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			 * beginning of the fragment cache skb */
 606:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			memcpy(skb_put(frag_skb, flen), skb->data, flen);
 607:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		} else {
 608:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			/* append frame payload to the end of the fragment
 609:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			 * cache skb */
 610:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			memcpy(skb_put(frag_skb, flen), skb->data + hdrlen,
 611:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			       flen);
 612:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		}
 613:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		dev_kfree_skb_any(skb);
 614:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		skb = NULL;
 615:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 616:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		if (fc & IEEE80211_FCTL_MOREFRAGS) {
 2050              	.loc 1 616 0
 2051 0c12 66F74424 	testw $1024,40(%esp)
 2051      280004
 2052 0c19 0F854B03 	jne .L528
 2052      0000
 617:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			/* more fragments expected - leave the skb in fragment
 618:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			 * cache for now; it will be delivered to upper layers
 619:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			 * after all fragments have been received */
 620:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			goto rx_exit;
 621:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		}
 622:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 623:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		/* this was the last fragment and the frame will be
 624:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		 * delivered, so remove skb from fragment cache */
 625:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		skb = frag_skb;
 2053              	.loc 1 625 0
GAS LISTING  			page 117


 2054 0c1f 8B6C2404 	movl 4(%esp),%ebp
 626:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		hdr = (struct ieee80211_hdr_4addr *)skb->data;
 627:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		ieee80211_frag_cache_invalidate(ieee, hdr);
 2055              	.loc 1 627 0
 2056 0c23 FFB5A800 	pushl 168(%ebp)
 2056      0000
 2057              	.LCFI162:
 2058 0c29 FF742478 	pushl 120(%esp)
 2059              	.LCFI163:
 2060 0c2d E830F7FF 	call ieee80211_frag_cache_invalidate
 2060      FF
 2061              	.LBE113:
 2062 0c32 59       	popl %ecx
 2063              	.LCFI164:
 2064 0c33 5B       	popl %ebx
 2065              	.LCFI165:
 2066              	.L425:
 628:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	}
 629:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 630:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	/* skb: hdr + (possible reassembled) full MSDU payload; possibly still
 631:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	 * encrypted/authenticated */
 632:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	if ((fc & IEEE80211_FCTL_PROTECTED) && can_be_decrypted &&
 2067              	.loc 1 632 0
 2068 0c34 0FB77424 	movzwl 40(%esp),%esi
 2068      28
 2069 0c39 F7C60040 	testl $16384,%esi
 2069      0000
 2070 0c3f 7427     	je .L529
 2071 0c41 837C2408 	cmpl $0,8(%esp)
 2071      00
 2072 0c46 7420     	je .L529
 2073 0c48 FF742418 	pushl 24(%esp)
 2074              	.LCFI166:
 2075 0c4c FF742418 	pushl 24(%esp)
 2076              	.LCFI167:
 2077 0c50 55       	pushl %ebp
 2078              	.LCFI168:
 2079 0c51 FFB42480 	pushl 128(%esp)
 2079      000000
 2080              	.LCFI169:
 2081 0c58 E8C7F9FF 	call ieee80211_rx_frame_decrypt_msdu
 2081      FF
 2082 0c5d 83C410   	addl $16,%esp
 2083              	.LCFI170:
 2084 0c60 85C0     	testl %eax,%eax
 2085 0c62 0F850903 	jne .L206
 2085      0000
 2086              	.L529:
 633:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	    ieee80211_rx_frame_decrypt_msdu(ieee, skb, keyidx, crypt))
 634:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		goto rx_dropped;
 635:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 636:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	hdr = (struct ieee80211_hdr_4addr *)skb->data;
 637:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	if (crypt && !(fc & IEEE80211_FCTL_PROTECTED) && !ieee->open_wep) {
 2087              	.loc 1 637 0
 2088 0c68 837C2418 	cmpl $0,24(%esp)
 2088      00
 2089              	.loc 1 636 0
GAS LISTING  			page 118


 2090 0c6d 8B9DA800 	movl 168(%ebp),%ebx
 2090      0000
 2091              	.loc 1 637 0
 2092 0c73 0F84FA00 	je .L538
 2092      0000
 2093 0c79 F7C60040 	testl $16384,%esi
 2093      0000
 2094 0c7f 756C     	jne .L530
 2095 0c81 8B442474 	movl 116(%esp),%eax
 2096 0c85 83B86006 	cmpl $0,1632(%eax)
 2096      000000
 2097 0c8c 755F     	jne .L530
 638:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		if (		/*ieee->ieee802_1x && */
 2098              	.loc 1 638 0
 2099 0c8e 55       	pushl %ebp
 2100              	.LCFI171:
 2101 0c8f 50       	pushl %eax
 2102              	.LCFI172:
 2103 0c90 E83EF7FF 	call ieee80211_is_eapol_frame
 2103      FF
 2104 0c95 5F       	popl %edi
 2105              	.LCFI173:
 2106 0c96 85C0     	testl %eax,%eax
 2107 0c98 5A       	popl %edx
 2108              	.LCFI174:
 2109 0c99 7552     	jne .L530
 639:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			   ieee80211_is_eapol_frame(ieee, skb)) {
 640:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			/* pass unencrypted EAPOL frames even if encryption is
 641:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			 * configured */
 642:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		} else {
 643:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			IEEE80211_DEBUG_DROP("encryption configured, but RX "
 2110              	.loc 1 643 0
 2111 0c9b 803D0000 	cmpb $0,ieee80211_debug_level
 2111      000000
 2112 0ca2 0F89C902 	jns .L206
 2112      0000
 2113              	.LBB141:
 2114              	.LBB142:
 2115              	.loc 5 91 0
 2116 0ca8 B800E0FF 	movl $-8192,%eax
 2116      FF
 2117              	
 2118 0cad 21E0     	andl %esp,%eax
 2119              	
 2120              	.LBE142:
 2121              	.LBE141:
 2122              	.loc 5 89 0
 2123 0caf 8B4014   	movl 20(%eax),%eax
 2124 0cb2 2500FFFF 	andl $268435200,%eax
 2124      0F
 2125 0cb7 83F801   	cmpl $1,%eax
 2126 0cba 0FB6430F 	movzbl 15(%ebx),%eax
 2127 0cbe 50       	pushl %eax
 2128              	.LCFI175:
 2129 0cbf 0FB6430E 	movzbl 14(%ebx),%eax
 2130 0cc3 50       	pushl %eax
 2131              	.LCFI176:
GAS LISTING  			page 119


 2132 0cc4 0FB6430D 	movzbl 13(%ebx),%eax
 2133 0cc8 50       	pushl %eax
 2134              	.LCFI177:
 2135 0cc9 0FB6430C 	movzbl 12(%ebx),%eax
 2136 0ccd 50       	pushl %eax
 2137              	.LCFI178:
 2138 0cce 0FB6430B 	movzbl 11(%ebx),%eax
 2139 0cd2 50       	pushl %eax
 2140              	.LCFI179:
 2141 0cd3 0FB6430A 	movzbl 10(%ebx),%eax
 2142 0cd7 19D2     	sbbl %edx,%edx
 2143 0cd9 50       	pushl %eax
 2144              	.LCFI180:
 2145 0cda 83E20C   	andl $12,%edx
 2146 0cdd 685B0000 	pushl $__func__.5
 2146      00
 2147              	.LCFI181:
 2148 0ce2 83C249   	addl $73,%edx
 2149 0ce5 52       	pushl %edx
 2150              	.LCFI182:
 2151 0ce6 68090300 	pushl $.LC11
 2151      00
 2152              	.LCFI183:
 2153 0ceb EB79     	jmp .L707
 2154              	.LCFI184:
 2155              	.L530:
 644:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 					     "frame not encrypted (SA=" MAC_FMT
 645:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 					     ")\n", MAC_ARG(hdr->addr2));
 646:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			goto rx_dropped;
 647:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		}
 648:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	}
 649:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 650:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	if (crypt && !(fc & IEEE80211_FCTL_PROTECTED) && !ieee->open_wep &&
 2156              	.loc 1 650 0
 2157 0ced 837C2418 	cmpl $0,24(%esp)
 2157      00
 2158 0cf2 747F     	je .L538
 2159 0cf4 81E60040 	andl $16384,%esi
 2159      0000
 2160 0cfa 7577     	jne .L538
 2161 0cfc 8B542474 	movl 116(%esp),%edx
 2162 0d00 83BA6006 	cmpl $0,1632(%edx)
 2162      000000
 2163 0d07 756A     	jne .L538
 2164 0d09 55       	pushl %ebp
 2165              	.LCFI185:
 2166 0d0a 52       	pushl %edx
 2167              	.LCFI186:
 2168 0d0b E8C3F6FF 	call ieee80211_is_eapol_frame
 2168      FF
 2169 0d10 5A       	popl %edx
 2170              	.LCFI187:
 2171 0d11 85C0     	testl %eax,%eax
 2172 0d13 59       	popl %ecx
 2173              	.LCFI188:
 2174 0d14 755D     	jne .L538
 651:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	    !ieee80211_is_eapol_frame(ieee, skb)) {
GAS LISTING  			page 120


 652:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		IEEE80211_DEBUG_DROP("dropped unencrypted RX data "
 2175              	.loc 1 652 0
 2176 0d16 803D0000 	cmpb $0,ieee80211_debug_level
 2176      000000
 2177 0d1d 0F894E02 	jns .L206
 2177      0000
 2178              	.LBB143:
 2179              	.LBB144:
 2180              	.loc 5 91 0
 2181 0d23 B800E0FF 	movl $-8192,%eax
 2181      FF
 2182              	
 2183 0d28 21E0     	andl %esp,%eax
 2184              	
 2185              	.LBE144:
 2186              	.LBE143:
 2187              	.loc 5 89 0
 2188 0d2a 8B4014   	movl 20(%eax),%eax
 2189 0d2d 2500FFFF 	andl $268435200,%eax
 2189      0F
 2190 0d32 83F801   	cmpl $1,%eax
 2191 0d35 0FB6430F 	movzbl 15(%ebx),%eax
 2192 0d39 50       	pushl %eax
 2193              	.LCFI189:
 2194 0d3a 0FB6430E 	movzbl 14(%ebx),%eax
 2195 0d3e 50       	pushl %eax
 2196              	.LCFI190:
 2197 0d3f 0FB6430D 	movzbl 13(%ebx),%eax
 2198 0d43 50       	pushl %eax
 2199              	.LCFI191:
 2200 0d44 0FB6430C 	movzbl 12(%ebx),%eax
 2201 0d48 50       	pushl %eax
 2202              	.LCFI192:
 2203 0d49 0FB6430B 	movzbl 11(%ebx),%eax
 2204 0d4d 50       	pushl %eax
 2205              	.LCFI193:
 2206 0d4e 0FB6430A 	movzbl 10(%ebx),%eax
 2207 0d52 19D2     	sbbl %edx,%edx
 2208 0d54 50       	pushl %eax
 2209              	.LCFI194:
 2210 0d55 83E20C   	andl $12,%edx
 2211 0d58 685B0000 	pushl $__func__.5
 2211      00
 2212              	.LCFI195:
 2213 0d5d 83C249   	addl $73,%edx
 2214 0d60 52       	pushl %edx
 2215              	.LCFI196:
 2216 0d61 68730300 	pushl $.LC12
 2216      00
 2217              	.LCFI197:
 2218              	.L707:
 2219 0d66 E8FCFFFF 	call printk
 2219      FF
 2220 0d6b 83C424   	addl $36,%esp
 2221              	.LCFI198:
 653:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				     "frame from " MAC_FMT
 654:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				     " (drop_unencrypted=1)\n",
GAS LISTING  			page 121


 655:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				     MAC_ARG(hdr->addr2));
 656:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		goto rx_dropped;
 2222              	.loc 1 656 0
 2223 0d6e E9FE0100 	jmp .L206
 2223      00
 2224              	.L538:
 657:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	}
 658:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 659:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	/* skb: hdr + (possible reassembled) full plaintext payload */
 660:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 661:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	payload = skb->data + hdrlen;
 2225              	.loc 1 661 0
 2226 0d73 8B4C240C 	movl 12(%esp),%ecx
 2227 0d77 8D3C0B   	leal (%ebx,%ecx),%edi
 662:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	ethertype = (payload[6] << 8) | payload[7];
 2228              	.loc 1 662 0
 2229 0d7a 0FB64706 	movzbl 6(%edi),%eax
 2230 0d7e C1E008   	sall $8,%eax
 2231 0d81 660FB677 	movzbw 7(%edi),%si
 2231      07
 2232 0d86 09C6     	orl %eax,%esi
 663:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 664:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** #ifdef NOT_YET
 665:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	/* If IEEE 802.1X is used, check whether the port is authorized to send
 666:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	 * the received frame. */
 667:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	if (ieee->ieee802_1x && ieee->iw_mode == IW_MODE_MASTER) {
 668:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		if (ethertype == ETH_P_PAE) {
 669:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			printk(KERN_DEBUG "%s: RX: IEEE 802.1X frame\n",
 670:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			       dev->name);
 671:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			if (ieee->hostapd && ieee->apdev) {
 672:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				/* Send IEEE 802.1X frames to the user
 673:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				 * space daemon for processing */
 674:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				prism2_rx_80211(ieee->apdev, skb, rx_stats,
 675:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 						PRISM2_RX_MGMT);
 676:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				ieee->apdevstats.rx_packets++;
 677:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				ieee->apdevstats.rx_bytes += skb->len;
 678:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				goto rx_exit;
 679:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			}
 680:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		} else if (!frame_authorized) {
 681:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			printk(KERN_DEBUG "%s: dropped frame from "
 682:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			       "unauthorized port (IEEE 802.1X): "
 683:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			       "ethertype=0x%04x\n", dev->name, ethertype);
 684:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			goto rx_dropped;
 685:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		}
 686:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	}
 687:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** #endif
 688:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 689:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	/* convert hdr + possible LLC headers into Ethernet header */
 690:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	if (skb->len - hdrlen >= 8 &&
 2233              	.loc 1 690 0
 2234 0d88 8B4560   	movl 96(%ebp),%eax
 2235 0d8b 890424   	movl %eax,(%esp)
 2236 0d8e 29C8     	subl %ecx,%eax
 2237 0d90 83F807   	cmpl $7,%eax
 2238 0d93 7660     	jbe .L544
 2239 0d95 6A06     	pushl $6
 2240              	.LCFI199:
GAS LISTING  			page 122


 2241 0d97 68000000 	pushl $rfc1042_header
 2241      00
 2242              	.LCFI200:
 2243 0d9c 57       	pushl %edi
 2244              	.LCFI201:
 2245 0d9d E8FCFFFF 	call memcmp
 2245      FF
 2246 0da2 83C40C   	addl $12,%esp
 2247              	.LCFI202:
 2248 0da5 85C0     	testl %eax,%eax
 2249 0da7 750E     	jne .L546
 2250 0da9 6681FEF3 	cmpw $-32525,%si
 2250      80
 2251 0dae 7407     	je .L546
 2252 0db0 6681FE37 	cmpw $-32457,%si
 2252      81
 2253 0db5 7514     	jne .L545
 2254              	.L546:
 2255 0db7 6A06     	pushl $6
 2256              	.LCFI203:
 2257 0db9 68060000 	pushl $bridge_tunnel_header
 2257      00
 2258              	.LCFI204:
 2259 0dbe 57       	pushl %edi
 2260              	.LCFI205:
 2261 0dbf E8FCFFFF 	call memcmp
 2261      FF
 2262 0dc4 83C40C   	addl $12,%esp
 2263              	.LCFI206:
 2264 0dc7 85C0     	testl %eax,%eax
 2265 0dc9 752A     	jne .L544
 2266              	.L545:
 2267              	.LBB145:
 2268              	.loc 3 810 0
 2269 0dcb 8B54240C 	movl 12(%esp),%edx
 2270 0dcf 83C206   	addl $6,%edx
 2271              	.LBB146:
 2272              	.loc 3 811 0
 2273 0dd2 3B1424   	cmpl (%esp),%edx
 2274 0dd5 0F878D00 	ja .L712
 2274      0000
 2275              	.LBB147:
 2276              	.LBB148:
 2277              	.loc 3 794 0
 2278 0ddb 8B0424   	movl (%esp),%eax
 2279 0dde 29D0     	subl %edx,%eax
 2280              	.loc 3 795 0
 2281 0de0 3B4564   	cmpl 100(%ebp),%eax
 2282              	.loc 3 794 0
 2283 0de3 894560   	movl %eax,96(%ebp)
 2284              	.loc 3 795 0
 2285 0de6 7302     	jae .L549
 2286              	
 2287 0de8 0F0B     	ud2
 2288              	
 2289              	
 2290              	.L549:
GAS LISTING  			page 123


 2291 0dea 8D0413   	leal (%ebx,%edx),%eax
 2292 0ded 8985A800 	movl %eax,168(%ebp)
 2292      0000
 2293 0df3 EB73     	jmp .L712
 2294              	.L544:
 2295              	.LBE148:
 2296              	.LBE147:
 2297              	.LBE146:
 2298              	.LBE145:
 2299              	.LBB149:
 2300              	.LBB150:
 2301              	.LBB151:
 2302              	.loc 3 811 0
 2303 0df5 8B1424   	movl (%esp),%edx
 2304 0df8 3954240C 	cmpl %edx,12(%esp)
 2305 0dfc 771D     	ja .L607
 2306              	.LBB152:
 2307              	.LBB153:
 2308              	.loc 3 794 0
 2309 0dfe 89D0     	movl %edx,%eax
 2310 0e00 2B44240C 	subl 12(%esp),%eax
 2311              	.loc 3 795 0
 2312 0e04 3B4564   	cmpl 100(%ebp),%eax
 2313              	.loc 3 794 0
 2314 0e07 894560   	movl %eax,96(%ebp)
 2315              	.loc 3 795 0
 2316 0e0a 7302     	jae .L604
 2317              	
 2318 0e0c 0F0B     	ud2
 2319              	
 2320              	
 2321              	.L604:
 2322 0e0e 8B4C240C 	movl 12(%esp),%ecx
 2323 0e12 8D040B   	leal (%ebx,%ecx),%eax
 2324 0e15 8985A800 	movl %eax,168(%ebp)
 2324      0000
 2325              	.L607:
 2326              	.LBE153:
 2327              	.LBE152:
 2328              	.LBE151:
 2329              	.LBE150:
 2330              	.LBB154:
 2331              	.LBB155:
 2332              	.LBB156:
 2333              	.LBB157:
 2334              	.file 9 "include/linux/byteorder/swab.h"
   1:include/linux/byteorder/swab.h **** #ifndef _LINUX_BYTEORDER_SWAB_H
   2:include/linux/byteorder/swab.h **** #define _LINUX_BYTEORDER_SWAB_H
   3:include/linux/byteorder/swab.h **** 
   4:include/linux/byteorder/swab.h **** /*
   5:include/linux/byteorder/swab.h ****  * linux/byteorder/swab.h
   6:include/linux/byteorder/swab.h ****  * Byte-swapping, independently from CPU endianness
   7:include/linux/byteorder/swab.h ****  *	swabXX[ps]?(foo)
   8:include/linux/byteorder/swab.h ****  *
   9:include/linux/byteorder/swab.h ****  * Francois-Rene Rideau <fare@tunes.org> 19971205
  10:include/linux/byteorder/swab.h ****  *    separated swab functions from cpu_to_XX,
  11:include/linux/byteorder/swab.h ****  *    to clean up support for bizarre-endian architectures.
GAS LISTING  			page 124


  12:include/linux/byteorder/swab.h ****  *
  13:include/linux/byteorder/swab.h ****  * See asm-i386/byteorder.h and suches for examples of how to provide
  14:include/linux/byteorder/swab.h ****  * architecture-dependent optimized versions
  15:include/linux/byteorder/swab.h ****  *
  16:include/linux/byteorder/swab.h ****  */
  17:include/linux/byteorder/swab.h **** 
  18:include/linux/byteorder/swab.h **** #include <linux/compiler.h>
  19:include/linux/byteorder/swab.h **** 
  20:include/linux/byteorder/swab.h **** /* casts are necessary for constants, because we never know how for sure
  21:include/linux/byteorder/swab.h ****  * how U/UL/ULL map to __u16, __u32, __u64. At least not in a portable way.
  22:include/linux/byteorder/swab.h ****  */
  23:include/linux/byteorder/swab.h **** #define ___swab16(x) \
  24:include/linux/byteorder/swab.h **** ({ \
  25:include/linux/byteorder/swab.h **** 	__u16 __x = (x); \
  26:include/linux/byteorder/swab.h **** 	((__u16)( \
  27:include/linux/byteorder/swab.h **** 		(((__u16)(__x) & (__u16)0x00ffU) << 8) | \
  28:include/linux/byteorder/swab.h **** 		(((__u16)(__x) & (__u16)0xff00U) >> 8) )); \
  29:include/linux/byteorder/swab.h **** })
  30:include/linux/byteorder/swab.h **** 
  31:include/linux/byteorder/swab.h **** #define ___swab32(x) \
  32:include/linux/byteorder/swab.h **** ({ \
  33:include/linux/byteorder/swab.h **** 	__u32 __x = (x); \
  34:include/linux/byteorder/swab.h **** 	((__u32)( \
  35:include/linux/byteorder/swab.h **** 		(((__u32)(__x) & (__u32)0x000000ffUL) << 24) | \
  36:include/linux/byteorder/swab.h **** 		(((__u32)(__x) & (__u32)0x0000ff00UL) <<  8) | \
  37:include/linux/byteorder/swab.h **** 		(((__u32)(__x) & (__u32)0x00ff0000UL) >>  8) | \
  38:include/linux/byteorder/swab.h **** 		(((__u32)(__x) & (__u32)0xff000000UL) >> 24) )); \
  39:include/linux/byteorder/swab.h **** })
  40:include/linux/byteorder/swab.h **** 
  41:include/linux/byteorder/swab.h **** #define ___swab64(x) \
  42:include/linux/byteorder/swab.h **** ({ \
  43:include/linux/byteorder/swab.h **** 	__u64 __x = (x); \
  44:include/linux/byteorder/swab.h **** 	((__u64)( \
  45:include/linux/byteorder/swab.h **** 		(__u64)(((__u64)(__x) & (__u64)0x00000000000000ffULL) << 56) | \
  46:include/linux/byteorder/swab.h **** 		(__u64)(((__u64)(__x) & (__u64)0x000000000000ff00ULL) << 40) | \
  47:include/linux/byteorder/swab.h **** 		(__u64)(((__u64)(__x) & (__u64)0x0000000000ff0000ULL) << 24) | \
  48:include/linux/byteorder/swab.h **** 		(__u64)(((__u64)(__x) & (__u64)0x00000000ff000000ULL) <<  8) | \
  49:include/linux/byteorder/swab.h **** 	        (__u64)(((__u64)(__x) & (__u64)0x000000ff00000000ULL) >>  8) | \
  50:include/linux/byteorder/swab.h **** 		(__u64)(((__u64)(__x) & (__u64)0x0000ff0000000000ULL) >> 24) | \
  51:include/linux/byteorder/swab.h **** 		(__u64)(((__u64)(__x) & (__u64)0x00ff000000000000ULL) >> 40) | \
  52:include/linux/byteorder/swab.h **** 		(__u64)(((__u64)(__x) & (__u64)0xff00000000000000ULL) >> 56) )); \
  53:include/linux/byteorder/swab.h **** })
  54:include/linux/byteorder/swab.h **** 
  55:include/linux/byteorder/swab.h **** #define ___constant_swab16(x) \
  56:include/linux/byteorder/swab.h **** 	((__u16)( \
  57:include/linux/byteorder/swab.h **** 		(((__u16)(x) & (__u16)0x00ffU) << 8) | \
  58:include/linux/byteorder/swab.h **** 		(((__u16)(x) & (__u16)0xff00U) >> 8) ))
  59:include/linux/byteorder/swab.h **** #define ___constant_swab32(x) \
  60:include/linux/byteorder/swab.h **** 	((__u32)( \
  61:include/linux/byteorder/swab.h **** 		(((__u32)(x) & (__u32)0x000000ffUL) << 24) | \
  62:include/linux/byteorder/swab.h **** 		(((__u32)(x) & (__u32)0x0000ff00UL) <<  8) | \
  63:include/linux/byteorder/swab.h **** 		(((__u32)(x) & (__u32)0x00ff0000UL) >>  8) | \
  64:include/linux/byteorder/swab.h **** 		(((__u32)(x) & (__u32)0xff000000UL) >> 24) ))
  65:include/linux/byteorder/swab.h **** #define ___constant_swab64(x) \
  66:include/linux/byteorder/swab.h **** 	((__u64)( \
  67:include/linux/byteorder/swab.h **** 		(__u64)(((__u64)(x) & (__u64)0x00000000000000ffULL) << 56) | \
  68:include/linux/byteorder/swab.h **** 		(__u64)(((__u64)(x) & (__u64)0x000000000000ff00ULL) << 40) | \
GAS LISTING  			page 125


  69:include/linux/byteorder/swab.h **** 		(__u64)(((__u64)(x) & (__u64)0x0000000000ff0000ULL) << 24) | \
  70:include/linux/byteorder/swab.h **** 		(__u64)(((__u64)(x) & (__u64)0x00000000ff000000ULL) <<  8) | \
  71:include/linux/byteorder/swab.h **** 	        (__u64)(((__u64)(x) & (__u64)0x000000ff00000000ULL) >>  8) | \
  72:include/linux/byteorder/swab.h **** 		(__u64)(((__u64)(x) & (__u64)0x0000ff0000000000ULL) >> 24) | \
  73:include/linux/byteorder/swab.h **** 		(__u64)(((__u64)(x) & (__u64)0x00ff000000000000ULL) >> 40) | \
  74:include/linux/byteorder/swab.h **** 		(__u64)(((__u64)(x) & (__u64)0xff00000000000000ULL) >> 56) ))
  75:include/linux/byteorder/swab.h **** 
  76:include/linux/byteorder/swab.h **** /*
  77:include/linux/byteorder/swab.h ****  * provide defaults when no architecture-specific optimization is detected
  78:include/linux/byteorder/swab.h ****  */
  79:include/linux/byteorder/swab.h **** #ifndef __arch__swab16
  80:include/linux/byteorder/swab.h **** #  define __arch__swab16(x) ({ __u16 __tmp = (x) ; ___swab16(__tmp); })
  81:include/linux/byteorder/swab.h **** #endif
  82:include/linux/byteorder/swab.h **** #ifndef __arch__swab32
  83:include/linux/byteorder/swab.h **** #  define __arch__swab32(x) ({ __u32 __tmp = (x) ; ___swab32(__tmp); })
  84:include/linux/byteorder/swab.h **** #endif
  85:include/linux/byteorder/swab.h **** #ifndef __arch__swab64
  86:include/linux/byteorder/swab.h **** #  define __arch__swab64(x) ({ __u64 __tmp = (x) ; ___swab64(__tmp); })
  87:include/linux/byteorder/swab.h **** #endif
  88:include/linux/byteorder/swab.h **** 
  89:include/linux/byteorder/swab.h **** #ifndef __arch__swab16p
  90:include/linux/byteorder/swab.h **** #  define __arch__swab16p(x) __arch__swab16(*(x))
  91:include/linux/byteorder/swab.h **** #endif
  92:include/linux/byteorder/swab.h **** #ifndef __arch__swab32p
  93:include/linux/byteorder/swab.h **** #  define __arch__swab32p(x) __arch__swab32(*(x))
  94:include/linux/byteorder/swab.h **** #endif
  95:include/linux/byteorder/swab.h **** #ifndef __arch__swab64p
  96:include/linux/byteorder/swab.h **** #  define __arch__swab64p(x) __arch__swab64(*(x))
  97:include/linux/byteorder/swab.h **** #endif
  98:include/linux/byteorder/swab.h **** 
  99:include/linux/byteorder/swab.h **** #ifndef __arch__swab16s
 100:include/linux/byteorder/swab.h **** #  define __arch__swab16s(x) do { *(x) = __arch__swab16p((x)); } while (0)
 101:include/linux/byteorder/swab.h **** #endif
 102:include/linux/byteorder/swab.h **** #ifndef __arch__swab32s
 103:include/linux/byteorder/swab.h **** #  define __arch__swab32s(x) do { *(x) = __arch__swab32p((x)); } while (0)
 104:include/linux/byteorder/swab.h **** #endif
 105:include/linux/byteorder/swab.h **** #ifndef __arch__swab64s
 106:include/linux/byteorder/swab.h **** #  define __arch__swab64s(x) do { *(x) = __arch__swab64p((x)); } while (0)
 107:include/linux/byteorder/swab.h **** #endif
 108:include/linux/byteorder/swab.h **** 
 109:include/linux/byteorder/swab.h **** 
 110:include/linux/byteorder/swab.h **** /*
 111:include/linux/byteorder/swab.h ****  * Allow constant folding
 112:include/linux/byteorder/swab.h ****  */
 113:include/linux/byteorder/swab.h **** #if defined(__GNUC__) && (__GNUC__ >= 2) && defined(__OPTIMIZE__)
 114:include/linux/byteorder/swab.h **** #  define __swab16(x) \
 115:include/linux/byteorder/swab.h **** (__builtin_constant_p((__u16)(x)) ? \
 116:include/linux/byteorder/swab.h ****  ___swab16((x)) : \
 117:include/linux/byteorder/swab.h ****  __fswab16((x)))
 118:include/linux/byteorder/swab.h **** #  define __swab32(x) \
 119:include/linux/byteorder/swab.h **** (__builtin_constant_p((__u32)(x)) ? \
 120:include/linux/byteorder/swab.h ****  ___swab32((x)) : \
 121:include/linux/byteorder/swab.h ****  __fswab32((x)))
 122:include/linux/byteorder/swab.h **** #  define __swab64(x) \
 123:include/linux/byteorder/swab.h **** (__builtin_constant_p((__u64)(x)) ? \
 124:include/linux/byteorder/swab.h ****  ___swab64((x)) : \
 125:include/linux/byteorder/swab.h ****  __fswab64((x)))
GAS LISTING  			page 126


 126:include/linux/byteorder/swab.h **** #else
 127:include/linux/byteorder/swab.h **** #  define __swab16(x) __fswab16(x)
 128:include/linux/byteorder/swab.h **** #  define __swab32(x) __fswab32(x)
 129:include/linux/byteorder/swab.h **** #  define __swab64(x) __fswab64(x)
 130:include/linux/byteorder/swab.h **** #endif /* OPTIMIZE */
 131:include/linux/byteorder/swab.h **** 
 132:include/linux/byteorder/swab.h **** 
 133:include/linux/byteorder/swab.h **** static __inline__ __attribute_const__ __u16 __fswab16(__u16 x)
 134:include/linux/byteorder/swab.h **** {
 135:include/linux/byteorder/swab.h **** 	return __arch__swab16(x);
 2335              	.loc 9 135 0
 2336 0e1b 0FB74560 	movzwl 96(%ebp),%eax
 2337 0e1f 89C2     	movl %eax,%edx
 2338 0e21 C1E208   	sall $8,%edx
 2339 0e24 C1E808   	shrl $8,%eax
 2340 0e27 09C2     	orl %eax,%edx
 2341              	.LBE157:
 2342              	.LBE156:
 2343              	.LBE155:
 2344              	.LBE154:
 2345              	.loc 9 134 0
 2346 0e29 66895424 	movw %dx,62(%esp)
 2346      3E
 2347              	.LBB158:
 2348              	.LBB159:
 2349              	.LBB160:
 2350              	.loc 3 785 0
 2351 0e2e 8B85A800 	movl 168(%ebp),%eax
 2351      0000
 2352 0e34 83E802   	subl $2,%eax
 2353              	.loc 3 786 0
 2354 0e37 83456002 	addl $2,96(%ebp)
 2355              	.loc 3 787 0
 2356 0e3b 3B85A400 	cmpl 164(%ebp),%eax
 2356      0000
 2357              	.loc 3 785 0
 2358 0e41 8985A800 	movl %eax,168(%ebp)
 2358      0000
 2359              	.loc 3 787 0
 2360 0e47 7311     	jae .L611
 2361              	.LBB161:
 2362              	.loc 3 788 0
 2363              	
 2364 0e49 B84E0E00 	movl $1f,%eax
 2364      00
 2365              	1:
 2366              	
 2367              	.LBE161:
 2368 0e4e 50       	pushl %eax
 2369              	.LCFI207:
 2370 0e4f 6A02     	pushl $2
 2371              	.LCFI208:
 2372 0e51 55       	pushl %ebp
 2373              	.LCFI209:
 2374 0e52 E8FCFFFF 	call skb_under_panic
 2374      FF
 2375 0e57 83C40C   	addl $12,%esp
GAS LISTING  			page 127


 2376              	.LCFI210:
 2377              	.L611:
 2378 0e5a 8B85A800 	movl 168(%ebp),%eax
 2378      0000
 2379              	.LBE160:
 2380              	.LBE159:
 2381              	.LBB162:
 2382              	.loc 4 233 0
 2383 0e60 668B5424 	movw 62(%esp),%dx
 2383      3E
 2384 0e65 668910   	movw %dx,(%eax)
 2385              	.L712:
 2386              	.LBE162:
 2387              	.LBE158:
 2388              	.LBB163:
 2389              	.LBB164:
 2390              	.LBB165:
 2391              	.loc 3 785 0
 2392 0e68 8B85A800 	movl 168(%ebp),%eax
 2392      0000
 2393 0e6e 83E806   	subl $6,%eax
 2394              	.loc 3 786 0
 2395 0e71 83456006 	addl $6,96(%ebp)
 2396              	.loc 3 787 0
 2397 0e75 3B85A400 	cmpl 164(%ebp),%eax
 2397      0000
 2398              	.loc 3 785 0
 2399 0e7b 8985A800 	movl %eax,168(%ebp)
 2399      0000
 2400              	.loc 3 787 0
 2401 0e81 7311     	jae .L635
 2402              	.LBB166:
 2403              	.loc 3 788 0
 2404              	
 2405 0e83 B8880E00 	movl $1f,%eax
 2405      00
 2406              	1:
 2407              	
 2408              	.LBE166:
 2409 0e88 50       	pushl %eax
 2410              	.LCFI211:
 2411 0e89 6A06     	pushl $6
 2412              	.LCFI212:
 2413 0e8b 55       	pushl %ebp
 2414              	.LCFI213:
 2415 0e8c E8FCFFFF 	call skb_under_panic
 2415      FF
 2416 0e91 83C40C   	addl $12,%esp
 2417              	.LCFI214:
 2418              	.L635:
 2419              	.LBE165:
 2420              	.LBE164:
 2421              	.LBB167:
 2422              	.loc 4 240 0
 2423 0e94 8B442440 	movl 64(%esp),%eax
 2424              	.LBE167:
 2425              	.LBB168:
GAS LISTING  			page 128


 2426              	.LBB169:
 2427              	.loc 3 788 0
 2428 0e98 8B95A800 	movl 168(%ebp),%edx
 2428      0000
 2429              	.LBE169:
 2430              	.LBE168:
 2431              	.LBB170:
 2432              	.loc 4 240 0
 2433 0e9e 8902     	movl %eax,(%edx)
 2434              	.loc 4 241 0
 2435 0ea0 8B442444 	movl 68(%esp),%eax
 2436 0ea4 66894204 	movw %ax,4(%edx)
 2437              	.LBE170:
 2438              	.LBE163:
 2439              	.LBB171:
 2440              	.LBB172:
 2441              	.LBB173:
 2442              	.loc 3 785 0
 2443 0ea8 8B85A800 	movl 168(%ebp),%eax
 2443      0000
 2444 0eae 83E806   	subl $6,%eax
 2445              	.loc 3 786 0
 2446 0eb1 83456006 	addl $6,96(%ebp)
 2447              	.loc 3 787 0
 2448 0eb5 3B85A400 	cmpl 164(%ebp),%eax
 2448      0000
 2449              	.loc 3 785 0
 2450 0ebb 8985A800 	movl %eax,168(%ebp)
 2450      0000
 2451              	.loc 3 787 0
 2452 0ec1 7311     	jae .L659
 2453              	.LBB174:
 2454              	.loc 3 788 0
 2455              	
 2456 0ec3 B8C80E00 	movl $1f,%eax
 2456      00
 2457              	1:
 2458              	
 2459              	.LBE174:
 2460 0ec8 50       	pushl %eax
 2461              	.LCFI215:
 2462 0ec9 6A06     	pushl $6
 2463              	.LCFI216:
 2464 0ecb 55       	pushl %ebp
 2465              	.LCFI217:
 2466 0ecc E8FCFFFF 	call skb_under_panic
 2466      FF
 2467 0ed1 83C40C   	addl $12,%esp
 2468              	.LCFI218:
 2469              	.L659:
 2470 0ed4 8B85A800 	movl 168(%ebp),%eax
 2470      0000
 2471              	.LBE173:
 2472              	.LBE172:
 2473              	.LBB175:
 2474              	.loc 4 240 0
 2475 0eda 8B542450 	movl 80(%esp),%edx
GAS LISTING  			page 129


 2476 0ede 8910     	movl %edx,(%eax)
 2477              	.loc 4 241 0
 2478 0ee0 8B542454 	movl 84(%esp),%edx
 2479 0ee4 66895004 	movw %dx,4(%eax)
 2480              	.LBE175:
 2481              	.LBE171:
 2482              	.LBE149:
 691:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	    ((memcmp(payload, rfc1042_header, SNAP_SIZE) == 0 &&
 692:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	      ethertype != ETH_P_AARP && ethertype != ETH_P_IPX) ||
 693:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	     memcmp(payload, bridge_tunnel_header, SNAP_SIZE) == 0)) {
 694:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		/* remove RFC1042 or Bridge-Tunnel encapsulation and
 695:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		 * replace EtherType */
 696:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		skb_pull(skb, hdrlen + SNAP_SIZE);
 697:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		memcpy(skb_push(skb, ETH_ALEN), src, ETH_ALEN);
 698:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		memcpy(skb_push(skb, ETH_ALEN), dst, ETH_ALEN);
 699:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	} else {
 700:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		u16 len;
 701:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		/* Leave Ethernet header part of hdr and full payload */
 702:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		skb_pull(skb, hdrlen);
 703:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		len = htons(skb->len);
 704:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		memcpy(skb_push(skb, 2), &len, 2);
 705:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		memcpy(skb_push(skb, ETH_ALEN), src, ETH_ALEN);
 706:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		memcpy(skb_push(skb, ETH_ALEN), dst, ETH_ALEN);
 707:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	}
 708:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 709:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** #ifdef NOT_YET
 710:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	if (wds && ((fc & (IEEE80211_FCTL_TODS | IEEE80211_FCTL_FROMDS)) ==
 711:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		    IEEE80211_FCTL_TODS) && skb->len >= ETH_HLEN + ETH_ALEN) {
 712:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		/* Non-standard frame: get addr4 from its bogus location after
 713:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		 * the payload */
 714:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		memcpy(skb->data + ETH_ALEN,
 715:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		       skb->data + skb->len - ETH_ALEN, ETH_ALEN);
 716:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		skb_trim(skb, skb->len - ETH_ALEN);
 717:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	}
 718:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** #endif
 719:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 720:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	stats->rx_packets++;
 2483              	.loc 1 720 0
 2484 0ee8 8B442420 	movl 32(%esp),%eax
 2485 0eec FF00     	incl (%eax)
 721:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	stats->rx_bytes += skb->len;
 2486              	.loc 1 721 0
 2487 0eee 8B4560   	movl 96(%ebp),%eax
 2488 0ef1 8B542420 	movl 32(%esp),%edx
 2489 0ef5 014208   	addl %eax,8(%edx)
 722:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 723:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** #ifdef NOT_YET
 724:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	if (ieee->iw_mode == IW_MODE_MASTER && !wds && ieee->ap->bridge_packets) {
 725:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		if (dst[0] & 0x01) {
 726:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			/* copy multicast frame both to the higher layers and
 727:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			 * to the wireless media */
 728:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			ieee->ap->bridged_multicast++;
 729:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			skb2 = skb_clone(skb, GFP_ATOMIC);
 730:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			if (skb2 == NULL)
 731:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				printk(KERN_DEBUG "%s: skb_clone failed for "
 732:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				       "multicast frame\n", dev->name);
 733:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		} else if (hostap_is_sta_assoc(ieee->ap, dst)) {
GAS LISTING  			page 130


 734:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			/* send frame directly to the associated STA using
 735:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			 * wireless media and not passing to higher layers */
 736:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			ieee->ap->bridged_unicast++;
 737:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			skb2 = skb;
 738:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			skb = NULL;
 739:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		}
 740:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	}
 741:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 742:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	if (skb2 != NULL) {
 743:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		/* send to wireless media */
 744:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		skb2->protocol = __constant_htons(ETH_P_802_3);
 745:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		skb2->mac.raw = skb2->nh.raw = skb2->data;
 746:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		/* skb2->nh.raw = skb2->data + ETH_HLEN; */
 747:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		skb2->dev = dev;
 748:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		dev_queue_xmit(skb2);
 749:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	}
 750:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** #endif
 751:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 752:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	if (skb) {
 2490              	.loc 1 752 0
 2491 0ef8 85ED     	testl %ebp,%ebp
 2492 0efa 746E     	je .L528
 753:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		skb->protocol = eth_type_trans(skb, dev);
 2493              	.loc 1 753 0
 2494 0efc FF742438 	pushl 56(%esp)
 2495              	.LCFI219:
 2496 0f00 55       	pushl %ebp
 2497              	.LCFI220:
 2498 0f01 E8FCFFFF 	call eth_type_trans
 2498      FF
 2499 0f06 66894578 	movw %ax,120(%ebp)
 2500              	.loc 4 420 0
 2501 0f0a 5F       	popl %edi
 2502              	.LCFI221:
 2503 0f0b 58       	popl %eax
 2504              	.LCFI222:
 2505              	.LBB176:
 2506 0f0c 8D7D38   	leal 56(%ebp),%edi
 2507 0f0f 31C0     	xorl %eax,%eax
 2508              	.LBB177:
 2509              	.LBB178:
 2510              	.loc 4 448 0
 2511 0f11 B90A0000 	movl $10,%ecx
 2511      00
 2512              	
 2513 0f16 F3AB     	rep
 2514              	
 2515              	.LBE178:
 2516              	.LBE177:
 2517              	.LBE176:
 754:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		memset(skb->cb, 0, sizeof(skb->cb));
 755:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		skb->dev = dev;
 2518              	.loc 1 755 0
 2519 0f18 8B4C2438 	movl 56(%esp),%ecx
 2520 0f1c 894D18   	movl %ecx,24(%ebp)
 756:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		skb->ip_summed = CHECKSUM_NONE;	/* 802.11 crc not sufficient */
 2521              	.loc 1 756 0
GAS LISTING  			page 131


 2522 0f1f C6457300 	movb $0,115(%ebp)
 757:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		if (netif_rx(skb) == NET_RX_DROP) {
 2523              	.loc 1 757 0
 2524 0f23 55       	pushl %ebp
 2525              	.LCFI223:
 2526 0f24 E8FCFFFF 	call netif_rx
 2526      FF
 2527 0f29 48       	decl %eax
 2528 0f2a 5E       	popl %esi
 2529              	.LCFI224:
 2530 0f2b 753D     	jne .L528
 758:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			/* netif_rx always succeeds, but it might drop
 759:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			 * the packet.  If it drops the packet, we log that
 760:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			 * in our stats. */
 761:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			IEEE80211_DEBUG_DROP
 2531              	.loc 1 761 0
 2532 0f2d 803D0000 	cmpb $0,ieee80211_debug_level
 2532      000000
 2533 0f34 792D     	jns .L698
 2534              	.LBB179:
 2535              	.LBB180:
 2536              	.loc 5 91 0
 2537 0f36 B800E0FF 	movl $-8192,%eax
 2537      FF
 2538              	
 2539 0f3b 21E0     	andl %esp,%eax
 2540              	
 2541              	.LBE180:
 2542              	.LBE179:
 2543              	.loc 5 89 0
 2544 0f3d 8B4014   	movl 20(%eax),%eax
 2545 0f40 2500FFFF 	andl $268435200,%eax
 2545      0F
 2546 0f45 83F801   	cmpl $1,%eax
 2547 0f48 19C0     	sbbl %eax,%eax
 2548 0f4a 83E00C   	andl $12,%eax
 2549 0f4d 685B0000 	pushl $__func__.5
 2549      00
 2550              	.LCFI225:
 2551 0f52 83C049   	addl $73,%eax
 2552 0f55 50       	pushl %eax
 2553              	.LCFI226:
 2554 0f56 68E20300 	pushl $.LC13
 2554      00
 2555              	.LCFI227:
 2556 0f5b E8FCFFFF 	call printk
 2556      FF
 2557 0f60 83C40C   	addl $12,%esp
 2558              	.LCFI228:
 2559              	.L698:
 762:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			    ("RX: netif_rx dropped the packet\n");
 763:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			stats->rx_dropped++;
 2560              	.loc 1 763 0
 2561 0f63 8B442420 	movl 32(%esp),%eax
 2562 0f67 FF4018   	incl 24(%eax)
 2563              	.L528:
 764:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		}
GAS LISTING  			page 132


 765:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	}
 766:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 767:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c ****       rx_exit:
 768:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** #ifdef NOT_YET
 769:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	if (sta)
 770:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		hostap_handle_sta_release(sta);
 771:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** #endif
 772:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	return 1;
 2564              	.loc 1 772 0
 2565 0f6a B8010000 	movl $1,%eax
 2565      00
 2566 0f6f EB09     	jmp .L204
 2567              	.L206:
 773:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 774:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c ****       rx_dropped:
 775:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	stats->rx_dropped++;
 2568              	.loc 1 775 0
 2569 0f71 8B542420 	movl 32(%esp),%edx
 2570 0f75 FF4218   	incl 24(%edx)
 776:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 777:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	/* Returning 0 indicates to caller that we have not handled the SKB--
 778:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	 * so it is still allocated and can be used again by underlying
 779:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	 * hardware as a DMA target */
 780:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	return 0;
 2571              	.loc 1 780 0
 2572 0f78 31C0     	xorl %eax,%eax
 2573              	.L204:
 781:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** }
 2574              	.loc 1 781 0
 2575 0f7a 83C460   	addl $96,%esp
 2576 0f7d 5B       	popl %ebx
 2577 0f7e 5E       	popl %esi
 2578 0f7f 5F       	popl %edi
 2579 0f80 5D       	popl %ebp
 2580 0f81 C3       	ret
 2581              	.LFE931:
 2583              	.data
 2586              	qos_oui:
 2587 000c 00       	.byte 0
 2588 000d 50       	.byte 80
 2589 000e F2       	.byte -14
 2590              	.text
 2592              	ieee80211_verify_qos_info:
 2593              	.LFB932:
 782:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 783:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** #define MGMT_FRAME_FIXED_PART_LENGTH		0x24
 784:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 785:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** static u8 qos_oui[QOS_OUI_LEN] = { 0x00, 0x50, 0xF2 };
 786:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 787:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** /*
 788:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** * Make ther structure we read from the beacon packet has
 789:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** * the right values
 790:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** */
 791:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** static int ieee80211_verify_qos_info(struct ieee80211_qos_information_element
 792:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				     *info_element, int sub_type)
 793:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** {
 2594              	.loc 1 793 0
GAS LISTING  			page 133


 2595 0f82 53       	pushl %ebx
 2596              	.LCFI229:
 2597              	.loc 1 793 0
 2598 0f83 8B5C2408 	movl 8(%esp),%ebx
 794:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 795:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	if (info_element->qui_subtype != sub_type)
 2599              	.loc 1 795 0
 2600 0f87 0FB64306 	movzbl 6(%ebx),%eax
 796:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		return -1;
 2601              	.loc 1 796 0
 2602 0f8b 83CAFF   	orl $-1,%edx
 2603              	.loc 1 795 0
 2604 0f8e 3B44240C 	cmpl 12(%esp),%eax
 2605 0f92 752A     	jne .L713
 797:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	if (memcmp(info_element->qui, qos_oui, QOS_OUI_LEN))
 2606              	.loc 1 797 0
 2607 0f94 6A03     	pushl $3
 2608              	.LCFI230:
 2609 0f96 8D4302   	leal 2(%ebx),%eax
 2610 0f99 680C0000 	pushl $qos_oui
 2610      00
 2611              	.LCFI231:
 2612 0f9e 50       	pushl %eax
 2613              	.LCFI232:
 2614 0f9f E8FCFFFF 	call memcmp
 2614      FF
 2615 0fa4 83C40C   	addl $12,%esp
 2616              	.LCFI233:
 798:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		return -1;
 2617              	.loc 1 798 0
 2618 0fa7 83CAFF   	orl $-1,%edx
 2619              	.loc 1 797 0
 2620 0faa 85C0     	testl %eax,%eax
 2621 0fac 7510     	jne .L713
 799:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	if (info_element->qui_type != QOS_OUI_TYPE)
 2622              	.loc 1 799 0
 2623 0fae 807B0502 	cmpb $2,5(%ebx)
 2624 0fb2 750A     	jne .L713
 800:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		return -1;
 801:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	if (info_element->version != QOS_VERSION_1)
 802:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		return -1;
 2625              	.loc 1 802 0
 2626 0fb4 31D2     	xorl %edx,%edx
 2627 0fb6 807B0701 	cmpb $1,7(%ebx)
 2628 0fba 0F94C2   	sete %dl
 2629 0fbd 4A       	decl %edx
 2630              	.L713:
 803:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 804:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	return 0;
 805:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** }
 2631              	.loc 1 805 0
 2632 0fbe 89D0     	movl %edx,%eax
 2633 0fc0 5B       	popl %ebx
 2634 0fc1 C3       	ret
 2635              	.LFE932:
 2638              	ieee80211_read_qos_param_element:
 2639              	.LFB933:
GAS LISTING  			page 134


 806:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 807:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** /*
 808:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c ****  * Parse a QoS parameter element
 809:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c ****  */
 810:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** static int ieee80211_read_qos_param_element(struct ieee80211_qos_parameter_info
 811:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 					    *element_param, struct ieee80211_info_element
 812:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 					    *info_element)
 813:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** {
 2640              	.loc 1 813 0
 2641 0fc2 57       	pushl %edi
 2642              	.LCFI234:
 2643 0fc3 56       	pushl %esi
 2644              	.LCFI235:
 2645 0fc4 53       	pushl %ebx
 2646              	.LCFI236:
 2647              	.loc 1 813 0
 2648 0fc5 8B542414 	movl 20(%esp),%edx
 814:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	int ret = 0;
 815:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	u16 size = sizeof(struct ieee80211_qos_parameter_info) - 2;
 816:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 817:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	if ((info_element == NULL) || (element_param == NULL))
 2649              	.loc 1 817 0
 2650 0fc9 85D2     	testl %edx,%edx
 2651              	.loc 1 813 0
 2652 0fcb 8B5C2410 	movl 16(%esp),%ebx
 2653              	.loc 1 817 0
 2654 0fcf 7410     	je .L721
 2655 0fd1 85DB     	testl %ebx,%ebx
 2656 0fd3 740C     	je .L721
 818:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		return -1;
 819:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 820:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	if (info_element->id == QOS_ELEMENT_ID && info_element->len == size) {
 2657              	.loc 1 820 0
 2658 0fd5 803ADD   	cmpb $-35,(%edx)
 2659 0fd8 7507     	jne .L721
 2660 0fda 8A4201   	movb 1(%edx),%al
 2661 0fdd 3C18     	cmpb $24,%al
 2662 0fdf 7405     	je .L750
 2663              	.L721:
 821:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		memcpy(element_param->info_element.qui, info_element->data,
 822:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		       info_element->len);
 823:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		element_param->info_element.elementID = info_element->id;
 824:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		element_param->info_element.length = info_element->len;
 825:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	} else
 826:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		ret = -1;
 2664              	.loc 1 826 0
 2665 0fe1 83C8FF   	orl $-1,%eax
 2666 0fe4 EB2D     	jmp .L718
 2667              	.L750:
 2668              	.loc 1 821 0
 2669 0fe6 0FB6C0   	movzbl %al,%eax
 2670              	.LBB181:
 2671              	.LBB182:
 2672              	.loc 4 207 0
 2673 0fe9 89C1     	movl %eax,%ecx
 2674 0feb 8D7B02   	leal 2(%ebx),%edi
 2675 0fee 8D7202   	leal 2(%edx),%esi
GAS LISTING  			page 135


 2676 0ff1 C1E902   	shrl $2,%ecx
 2677              	
 2678 0ff4 F3A5     	rep
 2679 0ff6 89C1     	movl %eax,%ecx
 2680 0ff8 83E103   	andl $3,%ecx
 2681 0ffb 7402     	jz 1f
 2682 0ffd F3A4     	rep
 2683              	1:
 2684              	
 2685              	.LBE182:
 2686              	.LBE181:
 2687              	.loc 1 823 0
 2688 0fff 8A02     	movb (%edx),%al
 2689 1001 8803     	movb %al,(%ebx)
 2690              	.loc 1 824 0
 2691 1003 8A4201   	movb 1(%edx),%al
 2692 1006 884301   	movb %al,1(%ebx)
 827:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	if (ret == 0)
 828:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		ret = ieee80211_verify_qos_info(&element_param->info_element,
 2693              	.loc 1 828 0
 2694 1009 6A01     	pushl $1
 2695              	.LCFI237:
 2696 100b 53       	pushl %ebx
 2697              	.LCFI238:
 2698 100c E871FFFF 	call ieee80211_verify_qos_info
 2698      FF
 2699 1011 59       	popl %ecx
 2700              	.LCFI239:
 2701 1012 5B       	popl %ebx
 2702              	.LCFI240:
 2703              	.L718:
 829:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 						QOS_OUI_PARAM_SUB_TYPE);
 830:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	return ret;
 831:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** }
 2704              	.loc 1 831 0
 2705 1013 5B       	popl %ebx
 2706 1014 5E       	popl %esi
 2707 1015 5F       	popl %edi
 2708 1016 C3       	ret
 2709              	.LFE933:
 2712              	ieee80211_read_qos_info_element:
 2713              	.LFB934:
 832:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 833:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** /*
 834:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c ****  * Parse a QoS information element
 835:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c ****  */
 836:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** static int ieee80211_read_qos_info_element(struct
 837:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 					   ieee80211_qos_information_element
 838:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 					   *element_info, struct ieee80211_info_element
 839:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 					   *info_element)
 840:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** {
 2714              	.loc 1 840 0
 2715 1017 57       	pushl %edi
 2716              	.LCFI241:
 2717 1018 56       	pushl %esi
 2718              	.LCFI242:
 2719 1019 53       	pushl %ebx
GAS LISTING  			page 136


 2720              	.LCFI243:
 2721              	.loc 1 840 0
 2722 101a 8B5C2410 	movl 16(%esp),%ebx
 841:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	int ret = 0;
 842:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	u16 size = sizeof(struct ieee80211_qos_information_element) - 2;
 843:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 844:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	if (element_info == NULL)
 845:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		return -1;
 2723              	.loc 1 845 0
 2724 101e 83C8FF   	orl $-1,%eax
 2725              	.loc 1 844 0
 2726 1021 85DB     	testl %ebx,%ebx
 2727              	.loc 1 840 0
 2728 1023 8B542414 	movl 20(%esp),%edx
 2729              	.loc 1 844 0
 2730 1027 7442     	je .L751
 846:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	if (info_element == NULL)
 2731              	.loc 1 846 0
 2732 1029 85D2     	testl %edx,%edx
 2733 102b 743E     	je .L751
 847:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		return -1;
 848:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 849:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	if ((info_element->id == QOS_ELEMENT_ID) && (info_element->len == size)) {
 2734              	.loc 1 849 0
 2735 102d 803ADD   	cmpb $-35,(%edx)
 2736 1030 7507     	jne .L754
 2737 1032 8A4201   	movb 1(%edx),%al
 2738 1035 3C07     	cmpb $7,%al
 2739 1037 7405     	je .L783
 2740              	.L754:
 850:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		memcpy(element_info->qui, info_element->data,
 851:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		       info_element->len);
 852:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		element_info->elementID = info_element->id;
 853:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		element_info->length = info_element->len;
 854:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	} else
 855:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		ret = -1;
 2741              	.loc 1 855 0
 2742 1039 83C8FF   	orl $-1,%eax
 2743 103c EB2D     	jmp .L751
 2744              	.L783:
 2745              	.loc 1 850 0
 2746 103e 0FB6C0   	movzbl %al,%eax
 2747              	.LBB183:
 2748              	.LBB184:
 2749              	.loc 4 207 0
 2750 1041 89C1     	movl %eax,%ecx
 2751 1043 8D7B02   	leal 2(%ebx),%edi
 2752 1046 8D7202   	leal 2(%edx),%esi
 2753 1049 C1E902   	shrl $2,%ecx
 2754              	
 2755 104c F3A5     	rep
 2756 104e 89C1     	movl %eax,%ecx
 2757 1050 83E103   	andl $3,%ecx
 2758 1053 7402     	jz 1f
 2759 1055 F3A4     	rep
 2760              	1:
 2761              	
GAS LISTING  			page 137


 2762              	.LBE184:
 2763              	.LBE183:
 2764              	.loc 1 852 0
 2765 1057 8A02     	movb (%edx),%al
 2766 1059 8803     	movb %al,(%ebx)
 2767              	.loc 1 853 0
 2768 105b 8A4201   	movb 1(%edx),%al
 2769 105e 884301   	movb %al,1(%ebx)
 856:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 857:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	if (ret == 0)
 858:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		ret = ieee80211_verify_qos_info(element_info,
 2770              	.loc 1 858 0
 2771 1061 6A00     	pushl $0
 2772              	.LCFI244:
 2773 1063 53       	pushl %ebx
 2774              	.LCFI245:
 2775 1064 E819FFFF 	call ieee80211_verify_qos_info
 2775      FF
 2776 1069 5E       	popl %esi
 2777              	.LCFI246:
 2778 106a 5F       	popl %edi
 2779              	.LCFI247:
 2780              	.L751:
 859:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 						QOS_OUI_INFO_SUB_TYPE);
 860:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	return ret;
 861:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** }
 2781              	.loc 1 861 0
 2782 106b 5B       	popl %ebx
 2783 106c 5E       	popl %esi
 2784 106d 5F       	popl %edi
 2785 106e C3       	ret
 2786              	.LFE934:
 2789              	ieee80211_qos_convert_ac_to_parameters:
 2790              	.LFB935:
 862:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 863:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** /*
 864:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c ****  * Write QoS parameters from the ac parameters.
 865:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c ****  */
 866:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** static int ieee80211_qos_convert_ac_to_parameters(struct
 867:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 						  ieee80211_qos_parameter_info
 868:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 						  *param_elm, struct
 869:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 						  ieee80211_qos_parameters
 870:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 						  *qos_param)
 871:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** {
 2791              	.loc 1 871 0
 2792 106f 57       	pushl %edi
 2793              	.LCFI248:
 2794 1070 56       	pushl %esi
 2795              	.LCFI249:
 2796 1071 53       	pushl %ebx
 2797              	.LCFI250:
 2798              	.loc 1 871 0
 2799 1072 8B7C2414 	movl 20(%esp),%edi
 872:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	int rc = 0;
 873:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	int i;
 874:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	struct ieee80211_qos_ac_parameter *ac_params;
 875:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	u32 txop;
GAS LISTING  			page 138


 876:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	u8 cw_min;
 877:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	u8 cw_max;
 878:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 879:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	for (i = 0; i < QOS_QUEUE_NUM; i++) {
 2800              	.loc 1 879 0
 2801 1076 31F6     	xorl %esi,%esi
 2802 1078 8B5C2410 	movl 16(%esp),%ebx
 2803              	.L789:
 880:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		ac_params = &(param_elm->ac_params_record[i]);
 881:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 882:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		qos_param->aifs[i] = (ac_params->aci_aifsn) & 0x0F;
 2804              	.loc 1 882 0
 2805 107c 8A430A   	movb 10(%ebx),%al
 2806 107f 83E00F   	andl $15,%eax
 883:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		qos_param->aifs[i] -= (qos_param->aifs[i] < 2) ? 0 : 2;
 2807              	.loc 1 883 0
 2808 1082 3C01     	cmpb $1,%al
 2809              	.loc 1 882 0
 2810 1084 88443E10 	movb %al,16(%esi,%edi)
 2811              	.loc 1 883 0
 2812 1088 0FB6D0   	movzbl %al,%edx
 2813 108b 7603     	jbe .L788
 2814 108d 83EA02   	subl $2,%edx
 2815              	.L788:
 2816 1090 88543E10 	movb %dl,16(%esi,%edi)
 884:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 885:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		cw_min = ac_params->ecw_min_max & 0x0F;
 886:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		qos_param->cw_min[i] = (u16) ((1 << cw_min) - 1);
 2817              	.loc 1 886 0
 2818 1094 8A4B0B   	movb 11(%ebx),%cl
 2819 1097 B8010000 	movl $1,%eax
 2819      00
 2820 109c 83E10F   	andl $15,%ecx
 2821 109f 89C2     	movl %eax,%edx
 2822 10a1 D3E2     	sall %cl,%edx
 2823 10a3 89D1     	movl %edx,%ecx
 2824 10a5 49       	decl %ecx
 2825 10a6 66890C77 	movw %cx,(%edi,%esi,2)
 887:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 888:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		cw_max = (ac_params->ecw_min_max & 0xF0) >> 4;
 2826              	.loc 1 888 0
 2827 10aa 0FB64B0B 	movzbl 11(%ebx),%ecx
 889:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		qos_param->cw_max[i] = (u16) ((1 << cw_max) - 1);
 2828              	.loc 1 889 0
 2829 10ae C1E904   	shrl $4,%ecx
 2830 10b1 D3E0     	sall %cl,%eax
 2831 10b3 48       	decl %eax
 2832 10b4 66894477 	movw %ax,8(%edi,%esi,2)
 2832      08
 890:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 891:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		qos_param->flag[i] =
 2833              	.loc 1 891 0
 2834 10b9 0FB6430A 	movzbl 10(%ebx),%eax
 2835 10bd C1E804   	shrl $4,%eax
 2836 10c0 83E001   	andl $1,%eax
 2837 10c3 88443714 	movb %al,20(%edi,%esi)
 892:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		    (ac_params->aci_aifsn & 0x10) ? 0x01 : 0x00;
GAS LISTING  			page 139


 893:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 894:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		txop = le16_to_cpu(ac_params->tx_op_limit) * 32;
 2838              	.loc 1 894 0
 2839 10c7 0FB7430C 	movzwl 12(%ebx),%eax
 2840 10cb C1E005   	sall $5,%eax
 895:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		qos_param->tx_op_limit[i] = (u16) txop;
 2841              	.loc 1 895 0
 2842 10ce 66894477 	movw %ax,24(%edi,%esi,2)
 2842      18
 2843              	.loc 1 879 0
 2844 10d3 46       	incl %esi
 2845 10d4 83C304   	addl $4,%ebx
 2846 10d7 83FE03   	cmpl $3,%esi
 2847 10da 7EA0     	jle .L789
 896:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	}
 897:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	return rc;
 898:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** }
 2848              	.loc 1 898 0
 2849 10dc 5B       	popl %ebx
 2850 10dd 5E       	popl %esi
 2851 10de 31C0     	xorl %eax,%eax
 2852 10e0 5F       	popl %edi
 2853 10e1 C3       	ret
 2854              	.LFE935:
 2856              	.section .rodata
 2857 0068 00000000 	.align 32
 2857      00000000 
 2857      00000000 
 2857      00000000 
 2857      00000000 
 2860              	__func__.6:
 2861 0080 69656565 	.string "ieee80211_parse_qos_info_param_IE"
 2861      38303231 
 2861      315F7061 
 2861      7273655F 
 2861      716F735F 
 2862              	.section .rodata.str1.1
 2863              	.LC14:
 2864 0417 3C373E69 	.string "<7>ieee80211: %c %s QoS is supported\n"
 2864      65656538 
 2864      30323131 
 2864      3A202563 
 2864      20257320 
 2865              	.text
 2867              	ieee80211_parse_qos_info_param_IE:
 2868              	.LFB936:
 899:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 900:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** /*
 901:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c ****  * we have a generic data element which it may contain QoS information or
 902:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c ****  * parameters element. check the information element length to decide
 903:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c ****  * which type to read
 904:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c ****  */
 905:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** static int ieee80211_parse_qos_info_param_IE(struct ieee80211_info_element
 906:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 					     *info_element,
 907:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 					     struct ieee80211_network *network)
 908:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** {
 2869              	.loc 1 908 0
GAS LISTING  			page 140


 2870 10e2 57       	pushl %edi
 2871              	.LCFI251:
 2872 10e3 56       	pushl %esi
 2873              	.LCFI252:
 2874 10e4 53       	pushl %ebx
 2875              	.LCFI253:
 2876 10e5 83EC30   	subl $48,%esp
 2877              	.LCFI254:
 2878              	.loc 1 908 0
 2879 10e8 8B7C2440 	movl 64(%esp),%edi
 2880 10ec 8B5C2444 	movl 68(%esp),%ebx
 909:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	int rc = 0;
 910:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	struct ieee80211_qos_parameters *qos_param = NULL;
 911:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	struct ieee80211_qos_information_element qos_info_element;
 912:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 913:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	rc = ieee80211_read_qos_info_element(&qos_info_element, info_element);
 2881              	.loc 1 913 0
 2882 10f0 57       	pushl %edi
 2883              	.LCFI255:
 2884 10f1 8D442424 	leal 36(%esp),%eax
 2885 10f5 50       	pushl %eax
 2886              	.LCFI256:
 2887 10f6 E81CFFFF 	call ieee80211_read_qos_info_element
 2887      FF
 2888 10fb 89C6     	movl %eax,%esi
 914:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 915:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	if (rc == 0) {
 2889              	.loc 1 915 0
 2890 10fd 85F6     	testl %esi,%esi
 2891 10ff 58       	popl %eax
 2892              	.LCFI257:
 2893 1100 5A       	popl %edx
 2894              	.LCFI258:
 2895 1101 7513     	jne .L793
 916:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		network->qos_data.param_count = qos_info_element.ac_info & 0x0F;
 2896              	.loc 1 916 0
 2897 1103 8A442428 	movb 40(%esp),%al
 2898 1107 83E00F   	andl $15,%eax
 917:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		network->flags |= NETWORK_HAS_QOS_INFORMATION;
 2899              	.loc 1 917 0
 2900 110a 838B9C00 	orl $16,156(%ebx)
 2900      000010
 2901              	.loc 1 916 0
 2902 1111 884354   	movb %al,84(%ebx)
 2903              	.loc 1 917 0
 2904 1114 EB30     	jmp .L794
 2905              	.L793:
 2906              	.LBB185:
 918:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	} else {
 919:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		struct ieee80211_qos_parameter_info param_element;
 920:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 921:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		rc = ieee80211_read_qos_param_element(&param_element,
 2907              	.loc 1 921 0
 2908 1116 57       	pushl %edi
 2909              	.LCFI259:
 2910 1117 8D7C2404 	leal 4(%esp),%edi
 2911 111b 57       	pushl %edi
GAS LISTING  			page 141


 2912              	.LCFI260:
 2913 111c E8A1FEFF 	call ieee80211_read_qos_param_element
 2913      FF
 2914 1121 89C6     	movl %eax,%esi
 922:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 						      info_element);
 923:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		if (rc == 0) {
 2915              	.loc 1 923 0
 2916 1123 59       	popl %ecx
 2917              	.LCFI261:
 2918 1124 85F6     	testl %esi,%esi
 2919 1126 58       	popl %eax
 2920              	.LCFI262:
 2921 1127 755A     	jne .L796
 924:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			qos_param = &(network->qos_data.parameters);
 2922              	.loc 1 924 0
 2923 1129 8D432C   	leal 44(%ebx),%eax
 925:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			ieee80211_qos_convert_ac_to_parameters(&param_element,
 2924              	.loc 1 925 0
 2925 112c 50       	pushl %eax
 2926              	.LCFI263:
 2927 112d 57       	pushl %edi
 2928              	.LCFI264:
 2929 112e E83CFFFF 	call ieee80211_qos_convert_ac_to_parameters
 2929      FF
 926:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 							       qos_param);
 927:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			network->flags |= NETWORK_HAS_QOS_PARAMETERS;
 2930              	.loc 1 927 0
 2931 1133 838B9C00 	orl $8,156(%ebx)
 2931      000008
 928:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			network->qos_data.param_count =
 2932              	.loc 1 928 0
 2933 113a 8A442410 	movb 16(%esp),%al
 2934 113e 83E00F   	andl $15,%eax
 2935 1141 884354   	movb %al,84(%ebx)
 2936 1144 58       	popl %eax
 2937              	.LCFI265:
 2938 1145 5A       	popl %edx
 2939              	.LCFI266:
 2940              	.L794:
 2941              	.LBE185:
 929:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			    param_element.info_element.ac_info & 0x0F;
 930:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		}
 931:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	}
 932:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 933:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	if (rc == 0) {
 934:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		IEEE80211_DEBUG_QOS("QoS is supported\n");
 2942              	.loc 1 934 0
 2943 1146 833D0000 	cmpl $0,ieee80211_debug_level
 2943      000000
 2944 114d 792D     	jns .L797
 2945              	.LBB186:
 2946              	.LBB187:
 2947              	.loc 5 91 0
 2948 114f B800E0FF 	movl $-8192,%eax
 2948      FF
 2949              	
 2950 1154 21E0     	andl %esp,%eax
GAS LISTING  			page 142


 2951              	
 2952              	.LBE187:
 2953              	.LBE186:
 2954              	.loc 5 89 0
 2955 1156 8B4014   	movl 20(%eax),%eax
 2956 1159 2500FFFF 	andl $268435200,%eax
 2956      0F
 2957 115e 83F801   	cmpl $1,%eax
 2958 1161 19C0     	sbbl %eax,%eax
 2959 1163 83E00C   	andl $12,%eax
 2960 1166 68800000 	pushl $__func__.6
 2960      00
 2961              	.LCFI267:
 2962 116b 83C049   	addl $73,%eax
 2963 116e 50       	pushl %eax
 2964              	.LCFI268:
 2965 116f 68170400 	pushl $.LC14
 2965      00
 2966              	.LCFI269:
 2967 1174 E8FCFFFF 	call printk
 2967      FF
 2968 1179 83C40C   	addl $12,%esp
 2969              	.LCFI270:
 2970              	.L797:
 935:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		network->qos_data.supported = 1;
 2971              	.loc 1 935 0
 2972 117c C7435001 	movl $1,80(%ebx)
 2972      000000
 2973              	.L796:
 936:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	}
 937:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	return rc;
 938:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** }
 2974              	.loc 1 938 0
 2975 1183 83C430   	addl $48,%esp
 2976 1186 5B       	popl %ebx
 2977 1187 89F0     	movl %esi,%eax
 2978 1189 5E       	popl %esi
 2979 118a 5F       	popl %edi
 2980 118b C3       	ret
 2981              	.LFE936:
 2983              	.section .rodata.str1.1
 2984              	.LC28:
 2985 043d 504F5745 	.string "POWER_CAPABILITY"
 2985      525F4341 
 2985      50414249 
 2985      4C495459 
 2985      00
 2986              	.LC21:
 2987 044e 49425353 	.string "IBSS_SET"
 2987      5F534554 
 2987      00
 2988              	.LC17:
 2989 0457 46485F53 	.string "FH_SET"
 2989      455400
 2990              	.LC15:
 2991 045e 53534944 	.string "SSID"
 2991      00
GAS LISTING  			page 143


 2992              	.LC16:
 2993 0463 52415445 	.string "RATES"
 2993      5300
 2994              	.LC19:
 2995 0469 43465F53 	.string "CF_SET"
 2995      455400
 2996              	.LC24:
 2997 0470 484F505F 	.string "HOP_TABLE"
 2997      5441424C 
 2997      4500
 2998              	.LC22:
 2999 047a 434F554E 	.string "COUNTRY"
 2999      54525900 
 3000              	.LC23:
 3001 0482 484F505F 	.string "HOP_PARAMS"
 3001      50415241 
 3001      4D5300
 3002              	.LC26:
 3003 048d 4348414C 	.string "CHALLENGE"
 3003      4C454E47 
 3003      4500
 3004              	.LC25:
 3005 0497 52455155 	.string "REQUEST"
 3005      45535400 
 3006              	.LC27:
 3007 049f 504F5745 	.string "POWER_CONSTRAINT"
 3007      525F434F 
 3007      4E535452 
 3007      41494E54 
 3007      00
 3008              	.LC35:
 3009 04b0 51554945 	.string "QUIET"
 3009      5400
 3010              	.LC31:
 3011 04b6 53555050 	.string "SUPP_CHANNELS"
 3011      5F434841 
 3011      4E4E454C 
 3011      5300
 3012              	.LC29:
 3013 04c4 5450435F 	.string "TPC_REQUEST"
 3013      52455155 
 3013      45535400 
 3014              	.LC30:
 3015 04d0 5450435F 	.string "TPC_REPORT"
 3015      5245504F 
 3015      525400
 3016              	.LC33:
 3017 04db 4D454153 	.string "MEASURE_REQUEST"
 3017      5552455F 
 3017      52455155 
 3017      45535400 
 3018              	.LC38:
 3019 04eb 52534E00 	.string "RSN"
 3020              	.LC36:
 3021 04ef 49425353 	.string "IBSS_DFS"
 3021      5F444653 
 3021      00
GAS LISTING  			page 144


 3022              	.LC37:
 3023 04f8 4552505F 	.string "ERP_INFO"
 3023      494E464F 
 3023      00
 3024              	.LC40:
 3025 0501 47454E45 	.string "GENERIC"
 3025      52494300 
 3026              	.LC39:
 3027 0509 52415445 	.string "RATES_EX"
 3027      535F4558 
 3027      00
 3028              	.LC41:
 3029 0512 514F535F 	.string "QOS_PARAMETER"
 3029      50415241 
 3029      4D455445 
 3029      5200
 3030              	.LC18:
 3031 0520 44535F53 	.string "DS_SET"
 3031      455400
 3032              	.LC20:
 3033 0527 54494D00 	.string "TIM"
 3034              	.LC32:
 3035 052b 43534100 	.string "CSA"
 3036              	.LC34:
 3037 052f 4D454153 	.string "MEASURE_REPORT"
 3037      5552455F 
 3037      5245504F 
 3037      525400
 3038              	.LC42:
 3039 053e 554E4B4E 	.string "UNKNOWN"
 3039      4F574E00 
 3040              	.text
 3042              	get_info_element_string:
 3043              	.LFB937:
 939:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 940:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** #ifdef CONFIG_IEEE80211_DEBUG
 941:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** #define MFIE_STRING(x) case MFIE_TYPE_ ##x: return #x
 942:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 943:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** static const char *get_info_element_string(u16 id)
 944:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** {
 3044              	.loc 1 944 0
 945:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	switch (id) {
 3045              	.loc 1 945 0
 3046 118c 0FB75424 	movzwl 4(%esp),%edx
 3046      04
 3047 1191 83FA21   	cmpl $33,%edx
 946:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		MFIE_STRING(SSID);
 947:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		MFIE_STRING(RATES);
 948:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		MFIE_STRING(FH_SET);
 949:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		MFIE_STRING(DS_SET);
 950:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		MFIE_STRING(CF_SET);
 951:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		MFIE_STRING(TIM);
 952:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		MFIE_STRING(IBSS_SET);
 953:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		MFIE_STRING(COUNTRY);
 954:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		MFIE_STRING(HOP_PARAMS);
 955:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		MFIE_STRING(HOP_TABLE);
 956:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		MFIE_STRING(REQUEST);
GAS LISTING  			page 145


 957:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		MFIE_STRING(CHALLENGE);
 958:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		MFIE_STRING(POWER_CONSTRAINT);
 959:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		MFIE_STRING(POWER_CAPABILITY);
 3048              	.loc 1 959 0
 3049 1194 B83D0400 	movl $.LC28,%eax
 3049      00
 3050              	.loc 1 945 0
 3051 1199 0F845301 	je .L802
 3051      0000
 3052 119f 0F8FA600 	jg .L832
 3052      0000
 3053 11a5 83FA06   	cmpl $6,%edx
 3054              	.loc 1 952 0
 3055 11a8 B84E0400 	movl $.LC21,%eax
 3055      00
 3056              	.loc 1 945 0
 3057 11ad 0F843F01 	je .L802
 3057      0000
 3058 11b3 7F41     	jg .L833
 3059 11b5 83FA02   	cmpl $2,%edx
 3060              	.loc 1 948 0
 3061 11b8 B8570400 	movl $.LC17,%eax
 3061      00
 3062              	.loc 1 945 0
 3063 11bd 0F842F01 	je .L802
 3063      0000
 3064 11c3 7F18     	jg .L834
 3065 11c5 85D2     	testl %edx,%edx
 3066              	.loc 1 946 0
 3067 11c7 B85E0400 	movl $.LC15,%eax
 3067      00
 3068              	.loc 1 945 0
 3069 11cc 0F842001 	je .L802
 3069      0000
 3070              	.loc 1 947 0
 3071 11d2 B8630400 	movl $.LC16,%eax
 3071      00
 3072              	.loc 1 945 0
 3073 11d7 4A       	decl %edx
 3074 11d8 E9F40000 	jmp .L841
 3074      00
 3075              	.L834:
 3076 11dd 83FA04   	cmpl $4,%edx
 3077              	.loc 1 950 0
 3078 11e0 B8690400 	movl $.LC19,%eax
 3078      00
 3079              	.loc 1 945 0
 3080 11e5 0F840701 	je .L802
 3080      0000
 3081 11eb 0F8FEA00 	jg .L809
 3081      0000
 3082 11f1 E9DF0000 	jmp .L807
 3082      00
 3083              	.L833:
 3084 11f6 83FA09   	cmpl $9,%edx
 3085              	.loc 1 955 0
 3086 11f9 B8700400 	movl $.LC24,%eax
GAS LISTING  			page 146


 3086      00
 3087              	.loc 1 945 0
 3088 11fe 0F84EE00 	je .L802
 3088      0000
 3089 1204 7F1B     	jg .L835
 3090 1206 83FA07   	cmpl $7,%edx
 3091              	.loc 1 953 0
 3092 1209 B87A0400 	movl $.LC22,%eax
 3092      00
 3093              	.loc 1 945 0
 3094 120e 0F84DE00 	je .L802
 3094      0000
 3095              	.loc 1 954 0
 3096 1214 B8820400 	movl $.LC23,%eax
 3096      00
 3097              	.loc 1 945 0
 3098 1219 83FA08   	cmpl $8,%edx
 3099 121c E9B00000 	jmp .L841
 3099      00
 3100              	.L835:
 3101 1221 83FA10   	cmpl $16,%edx
 3102              	.loc 1 957 0
 3103 1224 B88D0400 	movl $.LC26,%eax
 3103      00
 3104              	.loc 1 945 0
 3105 1229 0F84C300 	je .L802
 3105      0000
 3106 122f 7F0D     	jg .L836
 3107              	.loc 1 956 0
 3108 1231 B8970400 	movl $.LC25,%eax
 3108      00
 3109              	.loc 1 945 0
 3110 1236 83FA0A   	cmpl $10,%edx
 3111 1239 E9930000 	jmp .L841
 3111      00
 3112              	.L836:
 3113              	.loc 1 958 0
 3114 123e B89F0400 	movl $.LC27,%eax
 3114      00
 3115              	.loc 1 945 0
 3116 1243 83FA20   	cmpl $32,%edx
 3117 1246 E9860000 	jmp .L841
 3117      00
 3118              	.L832:
 3119 124b 83FA28   	cmpl $40,%edx
 960:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		MFIE_STRING(TPC_REQUEST);
 961:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		MFIE_STRING(TPC_REPORT);
 962:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		MFIE_STRING(SUPP_CHANNELS);
 963:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		MFIE_STRING(CSA);
 964:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		MFIE_STRING(MEASURE_REQUEST);
 965:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		MFIE_STRING(MEASURE_REPORT);
 966:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		MFIE_STRING(QUIET);
 3120              	.loc 1 966 0
 3121 124e B8B00400 	movl $.LC35,%eax
 3121      00
 3122              	.loc 1 945 0
 3123 1253 0F849900 	je .L802
GAS LISTING  			page 147


 3123      0000
 3124 1259 7F32     	jg .L837
 3125 125b 83FA24   	cmpl $36,%edx
 3126              	.loc 1 962 0
 3127 125e B8B60400 	movl $.LC31,%eax
 3127      00
 3128              	.loc 1 945 0
 3129 1263 0F848900 	je .L802
 3129      0000
 3130 1269 7F14     	jg .L838
 3131 126b 83FA22   	cmpl $34,%edx
 3132              	.loc 1 960 0
 3133 126e B8C40400 	movl $.LC29,%eax
 3133      00
 3134              	.loc 1 945 0
 3135 1273 747D     	je .L802
 3136              	.loc 1 961 0
 3137 1275 B8D00400 	movl $.LC30,%eax
 3137      00
 3138              	.loc 1 945 0
 3139 127a 83FA23   	cmpl $35,%edx
 3140 127d EB52     	jmp .L841
 3141              	.L838:
 3142 127f 83FA26   	cmpl $38,%edx
 3143              	.loc 1 964 0
 3144 1282 B8DB0400 	movl $.LC33,%eax
 3144      00
 3145              	.loc 1 945 0
 3146 1287 7469     	je .L802
 3147 1289 7F5C     	jg .L823
 3148 128b EB54     	jmp .L821
 3149              	.L837:
 3150 128d 83FA30   	cmpl $48,%edx
 967:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		MFIE_STRING(IBSS_DFS);
 968:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		MFIE_STRING(ERP_INFO);
 969:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		MFIE_STRING(RSN);
 3151              	.loc 1 969 0
 3152 1290 B8EB0400 	movl $.LC38,%eax
 3152      00
 3153              	.loc 1 945 0
 3154 1295 745B     	je .L802
 3155 1297 7F14     	jg .L839
 3156 1299 83FA29   	cmpl $41,%edx
 3157              	.loc 1 967 0
 3158 129c B8EF0400 	movl $.LC36,%eax
 3158      00
 3159              	.loc 1 945 0
 3160 12a1 744F     	je .L802
 3161              	.loc 1 968 0
 3162 12a3 B8F80400 	movl $.LC37,%eax
 3162      00
 3163              	.loc 1 945 0
 3164 12a8 83FA2A   	cmpl $42,%edx
 3165 12ab EB24     	jmp .L841
 3166              	.L839:
 3167 12ad 81FADD00 	cmpl $221,%edx
 3167      0000
GAS LISTING  			page 148


 970:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		MFIE_STRING(RATES_EX);
 971:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		MFIE_STRING(GENERIC);
 3168              	.loc 1 971 0
 3169 12b3 B8010500 	movl $.LC40,%eax
 3169      00
 3170              	.loc 1 945 0
 3171 12b8 7438     	je .L802
 3172 12ba 7F0A     	jg .L840
 3173              	.loc 1 970 0
 3174 12bc B8090500 	movl $.LC39,%eax
 3174      00
 3175              	.loc 1 945 0
 3176 12c1 83FA32   	cmpl $50,%edx
 3177 12c4 EB0B     	jmp .L841
 3178              	.L840:
 972:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		MFIE_STRING(QOS_PARAMETER);
 3179              	.loc 1 972 0
 3180 12c6 B8120500 	movl $.LC41,%eax
 3180      00
 3181              	.loc 1 945 0
 3182 12cb 81FADE00 	cmpl $222,%edx
 3182      0000
 3183              	.L841:
 3184 12d1 741F     	je .L802
 3185 12d3 EB18     	jmp .L831
 3186              	.L807:
 3187              	.loc 1 949 0
 3188 12d5 B8200500 	movl $.LC18,%eax
 3188      00
 3189 12da C3       	ret
 3190              	.L809:
 3191              	.loc 1 951 0
 3192 12db B8270500 	movl $.LC20,%eax
 3192      00
 3193 12e0 C3       	ret
 3194              	.L821:
 3195              	.loc 1 963 0
 3196 12e1 B82B0500 	movl $.LC32,%eax
 3196      00
 3197 12e6 C3       	ret
 3198              	.L823:
 3199              	.loc 1 965 0
 3200 12e7 B82F0500 	movl $.LC34,%eax
 3200      00
 3201 12ec C3       	ret
 3202              	.L831:
 973:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	default:
 974:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		return "UNKNOWN";
 3203              	.loc 1 974 0
 3204 12ed B83E0500 	movl $.LC42,%eax
 3204      00
 3205              	.L802:
 975:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	}
 976:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** }
 3206              	.loc 1 976 0
 3207 12f2 C3       	ret
 3208              	.LFE937:
GAS LISTING  			page 149


 3210              	.section .rodata
 3213              	__func__.7:
 3214 00a2 69656565 	.string "ieee80211_parse_info_param"
 3214      38303231 
 3214      315F7061 
 3214      7273655F 
 3214      696E666F 
 3215              	.section .rodata.str1.1
 3216              	.LC43:
 3217 0546 3C373E69 	.string "<7>ieee80211: %c %s Info elem: parse failed: info_element->len + 2 > left : info_element->len+2=%zd left=%d, id=%d.\n"
 3217      65656538 
 3217      30323131 
 3217      3A202563 
 3217      20257320 
 3218              	.LC44:
 3219 05bb 3C373E69 	.string "<7>ieee80211: %c %s MFIE_TYPE_SSID: '%s' len=%d.\n"
 3219      65656538 
 3219      30323131 
 3219      3A202563 
 3219      20257320 
 3220              	.LC45:
 3221 05ed 25303258 	.string "%02X "
 3221      2000
 3222              	.LC46:
 3223 05f3 3C373E69 	.string "<7>ieee80211: %c %s MFIE_TYPE_RATES: '%s' (%d)\n"
 3223      65656538 
 3223      30323131 
 3223      3A202563 
 3223      20257320 
 3224              	.LC47:
 3225 0623 3C373E69 	.string "<7>ieee80211: %c %s MFIE_TYPE_RATES_EX: '%s' (%d)\n"
 3225      65656538 
 3225      30323131 
 3225      3A202563 
 3225      20257320 
 3226              	.LC48:
 3227 0656 3C373E69 	.string "<7>ieee80211: %c %s MFIE_TYPE_DS_SET: %d\n"
 3227      65656538 
 3227      30323131 
 3227      3A202563 
 3227      20257320 
 3228              	.LC49:
 3229 0680 3C373E69 	.string "<7>ieee80211: %c %s MFIE_TYPE_FH_SET: ignored\n"
 3229      65656538 
 3229      30323131 
 3229      3A202563 
 3229      20257320 
 3230              	.LC50:
 3231 06af 3C373E69 	.string "<7>ieee80211: %c %s MFIE_TYPE_CF_SET: ignored\n"
 3231      65656538 
 3231      30323131 
 3231      3A202563 
 3231      20257320 
 3232              	.LC51:
 3233 06de 3C373E69 	.string "<7>ieee80211: %c %s MFIE_TYPE_TIM: partially ignored\n"
 3233      65656538 
 3233      30323131 
GAS LISTING  			page 150


 3233      3A202563 
 3233      20257320 
 3234              	.LC52:
 3235 0714 3C373E69 	.string "<7>ieee80211: %c %s MFIE_TYPE_ERP_SET: %d\n"
 3235      65656538 
 3235      30323131 
 3235      3A202563 
 3235      20257320 
 3236              	.LC53:
 3237 073f 3C373E69 	.string "<7>ieee80211: %c %s MFIE_TYPE_IBSS_SET: %d\n"
 3237      65656538 
 3237      30323131 
 3237      3A202563 
 3237      20257320 
 3238              	.LC54:
 3239 076b 3C373E69 	.string "<7>ieee80211: %c %s MFIE_TYPE_CHALLENGE: ignored\n"
 3239      65656538 
 3239      30323131 
 3239      3A202563 
 3239      20257320 
 3240              	.LC55:
 3241 079d 3C373E69 	.string "<7>ieee80211: %c %s MFIE_TYPE_GENERIC: %d bytes\n"
 3241      65656538 
 3241      30323131 
 3241      3A202563 
 3241      20257320 
 3242              	.LC56:
 3243 07ce 3C373E69 	.string "<7>ieee80211: %c %s MFIE_TYPE_RSN: %d bytes\n"
 3243      65656538 
 3243      30323131 
 3243      3A202563 
 3243      20257320 
 3244              	.LC57:
 3245 07fb 3C333E51 	.string "<3>QoS Error need to parse QOS_PARAMETER IE\n"
 3245      6F532045 
 3245      72726F72 
 3245      206E6565 
 3245      6420746F 
 3246              	.LC58:
 3247 0828 3C373E69 	.string "<7>ieee80211: %c %s Unsupported info element: %s (%d)\n"
 3247      65656538 
 3247      30323131 
 3247      3A202563 
 3247      20257320 
 3248              	.text
 3250              	ieee80211_parse_info_param:
 3251              	.LFB938:
 977:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** #endif
 978:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 979:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** static int ieee80211_parse_info_param(struct ieee80211_info_element
 980:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				      *info_element, u16 length,
 981:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				      struct ieee80211_network *network)
 982:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** {
 3252              	.loc 1 982 0
 3253 12f3 55       	pushl %ebp
 3254              	.LCFI271:
 3255 12f4 57       	pushl %edi
GAS LISTING  			page 151


 3256              	.LCFI272:
 3257 12f5 56       	pushl %esi
 3258              	.LCFI273:
 3259 12f6 53       	pushl %ebx
 3260              	.LCFI274:
 3261 12f7 83EC44   	subl $68,%esp
 3262              	.LCFI275:
 3263              	.loc 1 982 0
 3264 12fa 8B44245C 	movl 92(%esp),%eax
 3265 12fe 8B6C2458 	movl 88(%esp),%ebp
 3266 1302 66894424 	movw %ax,2(%esp)
 3266      02
 983:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	u8 i;
 984:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** #ifdef CONFIG_IEEE80211_DEBUG
 985:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	char rates_str[64];
 986:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	char *p;
 987:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** #endif
 988:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
 989:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	while (length >= sizeof(*info_element)) {
 990:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		if (sizeof(*info_element) + info_element->len > length) {
 991:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			IEEE80211_DEBUG_MGMT("Info elem: parse failed: "
 992:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 					     "info_element->len + 2 > left : "
 993:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 					     "info_element->len+2=%zd left=%d, id=%d.\n",
 994:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 					     info_element->len +
 995:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 					     sizeof(*info_element),
 996:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 					     length, info_element->id);
 997:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			return 1;
 998:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		}
 999:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1000:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		switch (info_element->id) {
1001:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		case MFIE_TYPE_SSID:
1002:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			if (ieee80211_is_empty_essid(info_element->data,
1003:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 						     info_element->len)) {
1004:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				network->flags |= NETWORK_EMPTY_ESSID;
1005:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				break;
1006:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			}
1007:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1008:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			network->ssid_len = min(info_element->len,
1009:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 						(u8) IW_ESSID_MAX_SIZE);
1010:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			memcpy(network->ssid, info_element->data,
1011:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			       network->ssid_len);
1012:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			if (network->ssid_len < IW_ESSID_MAX_SIZE)
1013:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				memset(network->ssid + network->ssid_len, 0,
1014:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				       IW_ESSID_MAX_SIZE - network->ssid_len);
1015:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1016:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			IEEE80211_DEBUG_MGMT("MFIE_TYPE_SSID: '%s' len=%d.\n",
1017:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 					     network->ssid, network->ssid_len);
1018:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			break;
1019:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1020:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		case MFIE_TYPE_RATES:
1021:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** #ifdef CONFIG_IEEE80211_DEBUG
1022:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			p = rates_str;
1023:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** #endif
1024:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			network->rates_len = min(info_element->len,
1025:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 						 MAX_RATES_LENGTH);
1026:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			for (i = 0; i < network->rates_len; i++) {
1027:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				network->rates[i] = info_element->data[i];
GAS LISTING  			page 152


1028:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** #ifdef CONFIG_IEEE80211_DEBUG
1029:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				p += snprintf(p, sizeof(rates_str) -
1030:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 					      (p - rates_str), "%02X ",
1031:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 					      network->rates[i]);
1032:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** #endif
1033:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				if (ieee80211_is_ofdm_rate
1034:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				    (info_element->data[i])) {
1035:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 					network->flags |= NETWORK_HAS_OFDM;
1036:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 					if (info_element->data[i] &
1037:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 					    IEEE80211_BASIC_RATE_MASK)
1038:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 						network->flags &=
1039:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 						    ~NETWORK_HAS_CCK;
1040:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				}
1041:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			}
1042:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1043:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			IEEE80211_DEBUG_MGMT("MFIE_TYPE_RATES: '%s' (%d)\n",
1044:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 					     rates_str, network->rates_len);
1045:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			break;
1046:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1047:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		case MFIE_TYPE_RATES_EX:
1048:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** #ifdef CONFIG_IEEE80211_DEBUG
1049:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			p = rates_str;
1050:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** #endif
1051:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			network->rates_ex_len = min(info_element->len,
1052:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 						    MAX_RATES_EX_LENGTH);
1053:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			for (i = 0; i < network->rates_ex_len; i++) {
1054:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				network->rates_ex[i] = info_element->data[i];
1055:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** #ifdef CONFIG_IEEE80211_DEBUG
1056:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				p += snprintf(p, sizeof(rates_str) -
1057:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 					      (p - rates_str), "%02X ",
1058:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 					      network->rates[i]);
1059:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** #endif
1060:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				if (ieee80211_is_ofdm_rate
1061:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				    (info_element->data[i])) {
1062:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 					network->flags |= NETWORK_HAS_OFDM;
1063:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 					if (info_element->data[i] &
1064:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 					    IEEE80211_BASIC_RATE_MASK)
1065:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 						network->flags &=
1066:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 						    ~NETWORK_HAS_CCK;
1067:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				}
1068:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			}
1069:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1070:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			IEEE80211_DEBUG_MGMT("MFIE_TYPE_RATES_EX: '%s' (%d)\n",
1071:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 					     rates_str, network->rates_ex_len);
1072:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			break;
1073:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1074:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		case MFIE_TYPE_DS_SET:
1075:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			IEEE80211_DEBUG_MGMT("MFIE_TYPE_DS_SET: %d\n",
1076:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 					     info_element->data[0]);
1077:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			network->channel = info_element->data[0];
1078:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			break;
1079:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1080:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		case MFIE_TYPE_FH_SET:
1081:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			IEEE80211_DEBUG_MGMT("MFIE_TYPE_FH_SET: ignored\n");
1082:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			break;
1083:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1084:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		case MFIE_TYPE_CF_SET:
GAS LISTING  			page 153


1085:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			IEEE80211_DEBUG_MGMT("MFIE_TYPE_CF_SET: ignored\n");
1086:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			break;
1087:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1088:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		case MFIE_TYPE_TIM:
1089:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			network->tim.tim_count = info_element->data[0];
1090:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			network->tim.tim_period = info_element->data[1];
1091:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			IEEE80211_DEBUG_MGMT("MFIE_TYPE_TIM: partially ignored\n");
1092:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			break;
1093:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1094:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		case MFIE_TYPE_ERP_INFO:
1095:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			network->erp_value = info_element->data[0];
1096:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			IEEE80211_DEBUG_MGMT("MFIE_TYPE_ERP_SET: %d\n",
1097:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 					     network->erp_value);
1098:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			break;
1099:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1100:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		case MFIE_TYPE_IBSS_SET:
1101:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			network->atim_window = info_element->data[0];
1102:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			IEEE80211_DEBUG_MGMT("MFIE_TYPE_IBSS_SET: %d\n",
1103:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 					     network->atim_window);
1104:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			break;
1105:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1106:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		case MFIE_TYPE_CHALLENGE:
1107:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			IEEE80211_DEBUG_MGMT("MFIE_TYPE_CHALLENGE: ignored\n");
1108:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			break;
1109:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1110:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		case MFIE_TYPE_GENERIC:
1111:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			IEEE80211_DEBUG_MGMT("MFIE_TYPE_GENERIC: %d bytes\n",
1112:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 					     info_element->len);
1113:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			if (!ieee80211_parse_qos_info_param_IE(info_element,
1114:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 							       network))
1115:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				break;
1116:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1117:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			if (info_element->len >= 4 &&
1118:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			    info_element->data[0] == 0x00 &&
1119:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			    info_element->data[1] == 0x50 &&
1120:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			    info_element->data[2] == 0xf2 &&
1121:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			    info_element->data[3] == 0x01) {
1122:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				network->wpa_ie_len = min(info_element->len + 2,
1123:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 							  MAX_WPA_IE_LEN);
1124:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				memcpy(network->wpa_ie, info_element,
1125:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				       network->wpa_ie_len);
1126:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			}
1127:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			break;
1128:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1129:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		case MFIE_TYPE_RSN:
1130:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			IEEE80211_DEBUG_MGMT("MFIE_TYPE_RSN: %d bytes\n",
1131:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 					     info_element->len);
1132:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			network->rsn_ie_len = min(info_element->len + 2,
1133:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 						  MAX_WPA_IE_LEN);
1134:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			memcpy(network->rsn_ie, info_element,
1135:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			       network->rsn_ie_len);
1136:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			break;
1137:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1138:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		case MFIE_TYPE_QOS_PARAMETER:
1139:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			printk(KERN_ERR
1140:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			       "QoS Error need to parse QOS_PARAMETER IE\n");
1141:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			break;
GAS LISTING  			page 154


1142:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			/* 802.11h */
1143:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		case MFIE_TYPE_POWER_CONSTRAINT:
1144:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			network->power_constraint = info_element->data[0];
1145:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			network->flags |= NETWORK_HAS_POWER_CONSTRAINT;
1146:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			break;
1147:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1148:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		case MFIE_TYPE_CSA:
1149:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			network->power_constraint = info_element->data[0];
1150:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			network->flags |= NETWORK_HAS_CSA;
1151:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			break;
1152:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1153:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		case MFIE_TYPE_QUIET:
1154:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			network->quiet.count = info_element->data[0];
1155:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			network->quiet.period = info_element->data[1];
1156:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			network->quiet.duration = info_element->data[2];
1157:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			network->quiet.offset = info_element->data[3];
1158:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			network->flags |= NETWORK_HAS_QUIET;
1159:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			break;
1160:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1161:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		case MFIE_TYPE_IBSS_DFS:
1162:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			if (network->ibss_dfs)
1163:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				break;
1164:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			network->ibss_dfs =
1165:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			    kmalloc(info_element->len, GFP_ATOMIC);
1166:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			if (!network->ibss_dfs)
1167:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				return 1;
1168:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			memcpy(network->ibss_dfs, info_element->data,
1169:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			       info_element->len);
1170:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			network->flags |= NETWORK_HAS_IBSS_DFS;
1171:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			break;
1172:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1173:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		case MFIE_TYPE_TPC_REPORT:
1174:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			network->tpc_report.transmit_power =
1175:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			    info_element->data[0];
1176:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			network->tpc_report.link_margin = info_element->data[1];
1177:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			network->flags |= NETWORK_HAS_TPC_REPORT;
1178:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			break;
1179:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1180:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		default:
1181:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			IEEE80211_DEBUG_MGMT
1182:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			    ("Unsupported info element: %s (%d)\n",
1183:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			     get_info_element_string(info_element->id),
1184:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			     info_element->id);
1185:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			break;
1186:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		}
1187:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1188:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		length -= sizeof(*info_element) + info_element->len;
1189:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		info_element =
 3267              	.loc 1 1189 0
 3268 1307 6683F801 	cmpw $1,%ax
 3269              	.L1162:
 3270 130b 0F868708 	jbe .L1150
 3270      0000
 3271              	.loc 1 990 0
 3272 1311 8A4D01   	movb 1(%ebp),%cl
 3273 1314 0FB6D1   	movzbl %cl,%edx
 3274 1317 8D4202   	leal 2(%edx),%eax
GAS LISTING  			page 155


 3275 131a 0FB75C24 	movzwl 2(%esp),%ebx
 3275      02
 3276 131f 39D8     	cmpl %ebx,%eax
 3277 1321 764C     	jbe .L845
 3278              	.loc 1 991 0
 3279 1323 F6050000 	testb $16,ieee80211_debug_level
 3279      000010
 3280 132a 0F84A307 	je .L1172
 3280      0000
 3281              	.LBB188:
 3282              	.LBB189:
 3283              	.loc 5 91 0
 3284 1330 B800E0FF 	movl $-8192,%eax
 3284      FF
 3285              	
 3286 1335 21E0     	andl %esp,%eax
 3287              	
 3288              	.LBE189:
 3289              	.LBE188:
 3290              	.loc 5 89 0
 3291 1337 8B4014   	movl 20(%eax),%eax
 3292 133a 2500FFFF 	andl $268435200,%eax
 3292      0F
 3293 133f 83F801   	cmpl $1,%eax
 3294 1342 0FB64500 	movzbl (%ebp),%eax
 3295 1346 50       	pushl %eax
 3296              	.LCFI276:
 3297 1347 0FB6C1   	movzbl %cl,%eax
 3298 134a 19D2     	sbbl %edx,%edx
 3299 134c 53       	pushl %ebx
 3300              	.LCFI277:
 3301 134d 83C002   	addl $2,%eax
 3302 1350 50       	pushl %eax
 3303              	.LCFI278:
 3304 1351 83E20C   	andl $12,%edx
 3305 1354 68A20000 	pushl $__func__.7
 3305      00
 3306              	.LCFI279:
 3307 1359 83C249   	addl $73,%edx
 3308 135c 52       	pushl %edx
 3309              	.LCFI280:
 3310 135d 68460500 	pushl $.LC43
 3310      00
 3311              	.LCFI281:
 3312 1362 E8FCFFFF 	call printk
 3312      FF
 3313 1367 83C418   	addl $24,%esp
 3314              	.LCFI282:
 3315 136a E9640700 	jmp .L1172
 3315      00
 3316              	.L845:
 3317              	.loc 1 1000 0
 3318 136f 8A4500   	movb (%ebp),%al
 3319 1372 88442401 	movb %al,1(%esp)
 3320 1376 0FB6C0   	movzbl %al,%eax
 3321 1379 83F820   	cmpl $32,%eax
 3322 137c 0F84BD06 	je .L1072
GAS LISTING  			page 156


 3322      0000
 3323 1382 7F4D     	jg .L1143
 3324 1384 83F803   	cmpl $3,%eax
 3325 1387 0F84B503 	je .L963
 3325      0000
 3326 138d 7F1C     	jg .L1144
 3327 138f 83F801   	cmpl $1,%eax
 3328 1392 0F847901 	je .L909
 3328      0000
 3329 1398 0F8FEE03 	jg .L969
 3329      0000
 3330 139e 85C0     	testl %eax,%eax
 3331 13a0 0F849A00 	je .L852
 3331      0000
 3332 13a6 E97B0700 	jmp .L1137
 3332      00
 3333              	.L1144:
 3334 13ab 83F805   	cmpl $5,%eax
 3335 13ae 0F844604 	je .L981
 3335      0000
 3336 13b4 0F8C0904 	jl .L975
 3336      0000
 3337 13ba 83F806   	cmpl $6,%eax
 3338 13bd 0F84C904 	je .L993
 3338      0000
 3339 13c3 83F810   	cmpl $16,%eax
 3340 13c6 0F841305 	je .L999
 3340      0000
 3341 13cc E9550700 	jmp .L1137
 3341      00
 3342              	.L1143:
 3343 13d1 83F82A   	cmpl $42,%eax
 3344 13d4 0F846D04 	je .L987
 3344      0000
 3345 13da 7F30     	jg .L1145
 3346 13dc 83F825   	cmpl $37,%eax
 3347 13df 0F847306 	je .L1073
 3347      0000
 3348 13e5 7F0E     	jg .L1146
 3349 13e7 83F823   	cmpl $35,%eax
 3350 13ea 0F841407 	je .L1136
 3350      0000
 3351 13f0 E9310700 	jmp .L1137
 3351      00
 3352              	.L1146:
 3353 13f5 83F828   	cmpl $40,%eax
 3354 13f8 0F847306 	je .L1074
 3354      0000
 3355 13fe 83F829   	cmpl $41,%eax
 3356 1401 0F84A106 	je .L1075
 3356      0000
 3357 1407 E91A0700 	jmp .L1137
 3357      00
 3358              	.L1145:
 3359 140c 83F832   	cmpl $50,%eax
 3360 140f 0F841202 	je .L936
 3360      0000
GAS LISTING  			page 157


 3361 1415 7F0E     	jg .L1147
 3362 1417 83F830   	cmpl $48,%eax
 3363 141a 0F849F05 	je .L1039
 3363      0000
 3364 1420 E9010700 	jmp .L1137
 3364      00
 3365              	.L1147:
 3366 1425 3DDD0000 	cmpl $221,%eax
 3366      00
 3367 142a 0F84EE04 	je .L1005
 3367      0000
 3368 1430 3DDE0000 	cmpl $222,%eax
 3368      00
 3369 1435 0F84F405 	je .L1071
 3369      0000
 3370 143b E9E60600 	jmp .L1137
 3370      00
 3371              	.L852:
 3372              	.LBB190:
 3373              	.LBB191:
 3374              	.loc 2 1189 0
 3375 1440 83FA01   	cmpl $1,%edx
 3376              	.LBE191:
 3377              	.loc 2 1187 0
 3378 1443 8D5D02   	leal 2(%ebp),%ebx
 3379 1446 89D0     	movl %edx,%eax
 3380              	.LBB192:
 3381              	.loc 2 1189 0
 3382 1448 7506     	jne .L854
 3383 144a 807D0220 	cmpb $32,2(%ebp)
 3384 144e EB02     	jmp .L1163
 3385              	.L854:
 3386              	.loc 2 1195 0
 3387 1450 85D2     	testl %edx,%edx
 3388              	.L1163:
 3389 1452 740B     	je .L1158
 3390              	.loc 2 1194 0
 3391 1454 48       	decl %eax
 3392              	.loc 2 1195 0
 3393 1455 803C0300 	cmpb $0,(%ebx,%eax)
 3394 1459 7514     	jne .L1157
 3395 145b 85C0     	testl %eax,%eax
 3396 145d EBF3     	jmp .L1163
 3397              	.L1158:
 3398              	.LBE192:
 3399              	.LBE190:
 3400              	.loc 1 1004 0
 3401 145f 8B542460 	movl 96(%esp),%edx
 3402 1463 838A9C00 	orl $1,156(%edx)
 3402      000001
 3403              	.loc 1 1005 0
 3404 146a E9000700 	jmp .L851
 3404      00
 3405              	.L1157:
 3406              	.LBB193:
 3407              	.loc 1 1008 0
 3408 146f 80F920   	cmpb $32,%cl
GAS LISTING  			page 158


 3409 1472 B8200000 	movl $32,%eax
 3409      00
 3410 1477 7303     	jae .L861
 3411 1479 0FB6C1   	movzbl %cl,%eax
 3412              	.L861:
 3413              	.LBE193:
 3414 147c 8B4C2460 	movl 96(%esp),%ecx
 3415 1480 8D5907   	leal 7(%ecx),%ebx
 3416 1483 884128   	movb %al,40(%ecx)
 3417              	.LBB194:
 3418              	.LBB195:
 3419              	.loc 4 207 0
 3420 1486 89C1     	movl %eax,%ecx
 3421 1488 8D7502   	leal 2(%ebp),%esi
 3422 148b C1E902   	shrl $2,%ecx
 3423 148e 89DF     	movl %ebx,%edi
 3424              	
 3425 1490 F3A5     	rep
 3426 1492 89C1     	movl %eax,%ecx
 3427 1494 83E103   	andl $3,%ecx
 3428 1497 7402     	jz 1f
 3429 1499 F3A4     	rep
 3430              	1:
 3431              	
 3432              	.LBE195:
 3433              	.LBE194:
 3434              	.loc 1 1012 0
 3435 149b 8B542460 	movl 96(%esp),%edx
 3436 149f 8A4228   	movb 40(%edx),%al
 3437 14a2 3C1F     	cmpb $31,%al
 3438 14a4 772A     	ja .L887
 3439              	.loc 1 1013 0
 3440 14a6 0FB6D0   	movzbl %al,%edx
 3441 14a9 BE200000 	movl $32,%esi
 3441      00
 3442 14ae 29D6     	subl %edx,%esi
 3443              	.LBB196:
 3444              	.loc 4 371 0
 3445 14b0 8B4C2460 	movl 96(%esp),%ecx
 3446 14b4 8D7C1107 	leal 7(%ecx,%edx),%edi
 3447              	.LBB197:
 3448              	.loc 4 373 0
 3449 14b8 89F1     	movl %esi,%ecx
 3450 14ba C1E902   	shrl $2,%ecx
 3451 14bd 31C0     	xorl %eax,%eax
 3452 14bf 89F2     	movl %esi,%edx
 3453              	
 3454 14c1 F3AB     	rep
 3455 14c3 F6C202   	testb $2,%dl
 3456 14c6 7402     	je 1f
 3457 14c8 66AB     	stosw
 3458 14ca F6C201   	1:testb $1,%dl
 3459 14cd 7401     	je 2f
 3460 14cf AA       	stosb
 3461              	2:
 3462              	
 3463              	.L887:
GAS LISTING  			page 159


 3464              	.LBE197:
 3465              	.LBE196:
 3466              	.loc 1 1016 0
 3467 14d0 F6050000 	testb $16,ieee80211_debug_level
 3467      000010
 3468 14d7 0F849206 	je .L851
 3468      0000
 3469              	.LBB198:
 3470              	.LBB199:
 3471              	.loc 5 91 0
 3472 14dd B800E0FF 	movl $-8192,%eax
 3472      FF
 3473              	
 3474 14e2 21E0     	andl %esp,%eax
 3475              	
 3476              	.LBE199:
 3477              	.LBE198:
 3478              	.loc 5 89 0
 3479 14e4 8B4014   	movl 20(%eax),%eax
 3480 14e7 8B4C2460 	movl 96(%esp),%ecx
 3481 14eb 2500FFFF 	andl $268435200,%eax
 3481      0F
 3482 14f0 83F801   	cmpl $1,%eax
 3483 14f3 0FB64128 	movzbl 40(%ecx),%eax
 3484 14f7 50       	pushl %eax
 3485              	.LCFI283:
 3486 14f8 19D2     	sbbl %edx,%edx
 3487 14fa 53       	pushl %ebx
 3488              	.LCFI284:
 3489 14fb 83E20C   	andl $12,%edx
 3490 14fe 68A20000 	pushl $__func__.7
 3490      00
 3491              	.LCFI285:
 3492 1503 83C249   	addl $73,%edx
 3493 1506 52       	pushl %edx
 3494              	.LCFI286:
 3495 1507 68BB0500 	pushl $.LC44
 3495      00
 3496              	.LCFI287:
 3497 150c E9560600 	jmp .L1171
 3497      00
 3498              	.LCFI288:
 3499              	.L909:
 3500              	.LBB200:
 3501              	.loc 1 1024 0
 3502 1511 80F90C   	cmpb $12,%cl
 3503              	.LBE200:
 3504              	.loc 1 1022 0
 3505 1514 8D7C2404 	leal 4(%esp),%edi
 3506              	.LBB201:
 3507              	.loc 1 1024 0
 3508 1518 89D0     	movl %edx,%eax
 3509 151a 7205     	jb .L911
 3510 151c B80C0000 	movl $12,%eax
 3510      00
 3511              	.L911:
 3512              	.LBE201:
GAS LISTING  			page 160


 3513              	.loc 1 1026 0
 3514 1521 31F6     	xorl %esi,%esi
 3515              	.loc 1 1024 0
 3516 1523 8B542460 	movl 96(%esp),%edx
 3517              	.loc 1 1026 0
 3518 1527 89F1     	movl %esi,%ecx
 3519              	.loc 1 1024 0
 3520 1529 88828200 	movb %al,130(%edx)
 3520      0000
 3521              	.loc 1 1026 0
 3522 152f 38C1     	cmpb %al,%cl
 3523              	.L1164:
 3524 1531 0F83A800 	jae .L1154
 3524      0000
 3525              	.loc 1 1027 0
 3526 1537 89F0     	movl %esi,%eax
 3527 1539 0FB6D8   	movzbl %al,%ebx
 3528 153c 8A441D02 	movb 2(%ebp,%ebx),%al
 3529 1540 8B542460 	movl 96(%esp),%edx
 3530 1544 88441376 	movb %al,118(%ebx,%edx)
 3531              	.loc 1 1029 0
 3532 1548 0FB6C0   	movzbl %al,%eax
 3533 154b 50       	pushl %eax
 3534              	.LCFI289:
 3535 154c 68ED0500 	pushl $.LC45
 3535      00
 3536              	.LCFI290:
 3537 1551 8D44240C 	leal 12(%esp),%eax
 3538 1555 89FA     	movl %edi,%edx
 3539 1557 29C2     	subl %eax,%edx
 3540 1559 B8400000 	movl $64,%eax
 3540      00
 3541 155e 29D0     	subl %edx,%eax
 3542 1560 50       	pushl %eax
 3543              	.LCFI291:
 3544 1561 57       	pushl %edi
 3545              	.LCFI292:
 3546 1562 E8FCFFFF 	call snprintf
 3546      FF
 3547 1567 01C7     	addl %eax,%edi
 3548              	.LBB202:
 3549              	.LBB203:
1249:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 			break;
1250:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 		}
1251:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 		break;
1252:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	}
1253:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1254:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	return hdrlen;
1255:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** }
1256:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1257:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** static inline u8 *ieee80211_get_payload(struct ieee80211_hdr *hdr)
1258:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** {
1259:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	switch (ieee80211_get_hdrlen(le16_to_cpu(hdr->frame_ctl))) {
1260:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	case IEEE80211_1ADDR_LEN:
1261:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 		return ((struct ieee80211_hdr_1addr *)hdr)->payload;
1262:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	case IEEE80211_2ADDR_LEN:
1263:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 		return ((struct ieee80211_hdr_2addr *)hdr)->payload;
GAS LISTING  			page 161


1264:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	case IEEE80211_3ADDR_LEN:
1265:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 		return ((struct ieee80211_hdr_3addr *)hdr)->payload;
1266:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	case IEEE80211_4ADDR_LEN:
1267:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 		return ((struct ieee80211_hdr_4addr *)hdr)->payload;
1268:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	}
1269:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	return NULL;
1270:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** }
1271:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1272:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** static inline int ieee80211_is_ofdm_rate(u8 rate)
1273:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** {
1274:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	switch (rate & ~IEEE80211_BASIC_RATE_MASK) {
 3550              	.loc 2 1274 0
 3551 1569 0FB6441D 	movzbl 2(%ebp,%ebx),%eax
 3551      02
 3552 156e 247F     	andb $127,%al
 3553              	.LBE203:
 3554              	.LBE202:
 3555              	.loc 2 1273 0
 3556 1570 83C410   	addl $16,%esp
 3557              	.LCFI293:
 3558              	.LBB204:
 3559              	.LBB205:
 3560              	.loc 2 1274 0
 3561 1573 83F824   	cmpl $36,%eax
 3562 1576 7429     	je .L924
 3563 1578 7F11     	jg .L926
 3564 157a 83F812   	cmpl $18,%eax
 3565 157d 7422     	je .L924
 3566 157f 7F05     	jg .L927
 3567 1581 83F80C   	cmpl $12,%eax
 3568 1584 EB19     	jmp .L1165
 3569              	.L927:
 3570 1586 83F818   	cmpl $24,%eax
 3571 1589 EB14     	jmp .L1165
 3572              	.L926:
 3573 158b 83F848   	cmpl $72,%eax
 3574 158e 7411     	je .L924
 3575 1590 7F05     	jg .L928
 3576 1592 83F830   	cmpl $48,%eax
 3577 1595 EB08     	jmp .L1165
 3578              	.L928:
 3579 1597 83F860   	cmpl $96,%eax
 3580 159a 7405     	je .L924
 3581 159c 83F86C   	cmpl $108,%eax
 3582              	.L1165:
 3583 159f 752C     	jne .L914
 3584              	.L924:
 3585              	.LBE205:
 3586              	.LBE204:
 3587              	.loc 1 1035 0
 3588 15a1 8B4C2460 	movl 96(%esp),%ecx
 3589 15a5 8B919C00 	movl 156(%ecx),%edx
 3589      0000
 3590 15ab 83CA02   	orl $2,%edx
 3591 15ae 89919C00 	movl %edx,156(%ecx)
 3591      0000
 3592              	.loc 1 1036 0
GAS LISTING  			page 162


 3593 15b4 89F1     	movl %esi,%ecx
 3594 15b6 0FB6C1   	movzbl %cl,%eax
 3595 15b9 807C0502 	cmpb $0,2(%ebp,%eax)
 3595      00
 3596 15be 790D     	jns .L914
 3597              	.loc 1 1038 0
 3598 15c0 83E2FB   	andl $-5,%edx
 3599 15c3 8B442460 	movl 96(%esp),%eax
 3600 15c7 89909C00 	movl %edx,156(%eax)
 3600      0000
 3601              	.L914:
 3602              	.loc 1 1026 0
 3603 15cd 46       	incl %esi
 3604 15ce 89F2     	movl %esi,%edx
 3605 15d0 8B4C2460 	movl 96(%esp),%ecx
 3606 15d4 3A918200 	cmpb 130(%ecx),%dl
 3606      0000
 3607 15da E952FFFF 	jmp .L1164
 3607      FF
 3608              	.L1154:
 3609              	.loc 1 1043 0
 3610 15df F6050000 	testb $16,ieee80211_debug_level
 3610      000010
 3611 15e6 0F848305 	je .L851
 3611      0000
 3612              	.LBB206:
 3613              	.LBB207:
 3614              	.loc 5 91 0
 3615 15ec B800E0FF 	movl $-8192,%eax
 3615      FF
 3616              	
 3617 15f1 21E0     	andl %esp,%eax
 3618              	
 3619              	.LBE207:
 3620              	.LBE206:
 3621              	.loc 5 89 0
 3622 15f3 8B4014   	movl 20(%eax),%eax
 3623 15f6 8B4C2460 	movl 96(%esp),%ecx
 3624 15fa 2500FFFF 	andl $268435200,%eax
 3624      0F
 3625 15ff 83F801   	cmpl $1,%eax
 3626 1602 0FB68182 	movzbl 130(%ecx),%eax
 3626      000000
 3627 1609 50       	pushl %eax
 3628              	.LCFI294:
 3629 160a 8D442408 	leal 8(%esp),%eax
 3630 160e 19D2     	sbbl %edx,%edx
 3631 1610 50       	pushl %eax
 3632              	.LCFI295:
 3633 1611 83E20C   	andl $12,%edx
 3634 1614 68A20000 	pushl $__func__.7
 3634      00
 3635              	.LCFI296:
 3636 1619 83C249   	addl $73,%edx
 3637 161c 52       	pushl %edx
 3638              	.LCFI297:
 3639 161d 68F30500 	pushl $.LC46
GAS LISTING  			page 163


 3639      00
 3640              	.LCFI298:
 3641 1622 E9400500 	jmp .L1171
 3641      00
 3642              	.LCFI299:
 3643              	.L936:
 3644              	.LBB208:
 3645              	.loc 1 1051 0
 3646 1627 80F910   	cmpb $16,%cl
 3647              	.LBE208:
 3648              	.loc 1 1049 0
 3649 162a 8D7C2404 	leal 4(%esp),%edi
 3650              	.LBB209:
 3651              	.loc 1 1051 0
 3652 162e 89D0     	movl %edx,%eax
 3653 1630 7205     	jb .L938
 3654 1632 B8100000 	movl $16,%eax
 3654      00
 3655              	.L938:
 3656              	.LBE209:
 3657              	.loc 1 1053 0
 3658 1637 31F6     	xorl %esi,%esi
 3659              	.loc 1 1051 0
 3660 1639 8B542460 	movl 96(%esp),%edx
 3661              	.loc 1 1053 0
 3662 163d 89F1     	movl %esi,%ecx
 3663              	.loc 1 1051 0
 3664 163f 88829300 	movb %al,147(%edx)
 3664      0000
 3665              	.loc 1 1053 0
 3666 1645 38C1     	cmpb %al,%cl
 3667              	.L1166:
 3668 1647 0F83AD00 	jae .L1156
 3668      0000
 3669              	.loc 1 1054 0
 3670 164d 89F0     	movl %esi,%eax
 3671 164f 0FB6D8   	movzbl %al,%ebx
 3672 1652 8B542460 	movl 96(%esp),%edx
 3673 1656 8A441D02 	movb 2(%ebp,%ebx),%al
 3674 165a 88841383 	movb %al,131(%ebx,%edx)
 3674      000000
 3675              	.loc 1 1056 0
 3676 1661 0FB64413 	movzbl 118(%ebx,%edx),%eax
 3676      76
 3677 1666 50       	pushl %eax
 3678              	.LCFI300:
 3679 1667 68ED0500 	pushl $.LC45
 3679      00
 3680              	.LCFI301:
 3681 166c 8D44240C 	leal 12(%esp),%eax
 3682 1670 89FA     	movl %edi,%edx
 3683 1672 29C2     	subl %eax,%edx
 3684 1674 B8400000 	movl $64,%eax
 3684      00
 3685 1679 29D0     	subl %edx,%eax
 3686 167b 50       	pushl %eax
 3687              	.LCFI302:
GAS LISTING  			page 164


 3688 167c 57       	pushl %edi
 3689              	.LCFI303:
 3690 167d E8FCFFFF 	call snprintf
 3690      FF
 3691 1682 01C7     	addl %eax,%edi
 3692              	.LBB210:
 3693              	.LBB211:
 3694              	.loc 2 1274 0
 3695 1684 0FB6441D 	movzbl 2(%ebp,%ebx),%eax
 3695      02
 3696 1689 247F     	andb $127,%al
 3697              	.LBE211:
 3698              	.LBE210:
 3699              	.loc 2 1273 0
 3700 168b 83C410   	addl $16,%esp
 3701              	.LCFI304:
 3702              	.LBB212:
 3703              	.LBB213:
 3704              	.loc 2 1274 0
 3705 168e 83F824   	cmpl $36,%eax
 3706 1691 7429     	je .L951
 3707 1693 7F11     	jg .L953
 3708 1695 83F812   	cmpl $18,%eax
 3709 1698 7422     	je .L951
 3710 169a 7F05     	jg .L954
 3711 169c 83F80C   	cmpl $12,%eax
 3712 169f EB19     	jmp .L1167
 3713              	.L954:
 3714 16a1 83F818   	cmpl $24,%eax
 3715 16a4 EB14     	jmp .L1167
 3716              	.L953:
 3717 16a6 83F848   	cmpl $72,%eax
 3718 16a9 7411     	je .L951
 3719 16ab 7F05     	jg .L955
 3720 16ad 83F830   	cmpl $48,%eax
 3721 16b0 EB08     	jmp .L1167
 3722              	.L955:
 3723 16b2 83F860   	cmpl $96,%eax
 3724 16b5 7405     	je .L951
 3725 16b7 83F86C   	cmpl $108,%eax
 3726              	.L1167:
 3727 16ba 752C     	jne .L941
 3728              	.L951:
 3729              	.LBE213:
 3730              	.LBE212:
 3731              	.loc 1 1062 0
 3732 16bc 8B4C2460 	movl 96(%esp),%ecx
 3733 16c0 8B919C00 	movl 156(%ecx),%edx
 3733      0000
 3734 16c6 83CA02   	orl $2,%edx
 3735 16c9 89919C00 	movl %edx,156(%ecx)
 3735      0000
 3736              	.loc 1 1063 0
 3737 16cf 89F1     	movl %esi,%ecx
 3738 16d1 0FB6C1   	movzbl %cl,%eax
 3739 16d4 807C0502 	cmpb $0,2(%ebp,%eax)
 3739      00
GAS LISTING  			page 165


 3740 16d9 790D     	jns .L941
 3741              	.loc 1 1065 0
 3742 16db 83E2FB   	andl $-5,%edx
 3743 16de 8B442460 	movl 96(%esp),%eax
 3744 16e2 89909C00 	movl %edx,156(%eax)
 3744      0000
 3745              	.L941:
 3746              	.loc 1 1053 0
 3747 16e8 46       	incl %esi
 3748 16e9 89F2     	movl %esi,%edx
 3749 16eb 8B4C2460 	movl 96(%esp),%ecx
 3750 16ef 3A919300 	cmpb 147(%ecx),%dl
 3750      0000
 3751 16f5 E94DFFFF 	jmp .L1166
 3751      FF
 3752              	.L1156:
 3753              	.loc 1 1070 0
 3754 16fa F6050000 	testb $16,ieee80211_debug_level
 3754      000010
 3755 1701 0F846804 	je .L851
 3755      0000
 3756              	.LBB214:
 3757              	.LBB215:
 3758              	.loc 5 91 0
 3759 1707 B800E0FF 	movl $-8192,%eax
 3759      FF
 3760              	
 3761 170c 21E0     	andl %esp,%eax
 3762              	
 3763              	.LBE215:
 3764              	.LBE214:
 3765              	.loc 5 89 0
 3766 170e 8B4014   	movl 20(%eax),%eax
 3767 1711 8B4C2460 	movl 96(%esp),%ecx
 3768 1715 2500FFFF 	andl $268435200,%eax
 3768      0F
 3769 171a 83F801   	cmpl $1,%eax
 3770 171d 0FB68193 	movzbl 147(%ecx),%eax
 3770      000000
 3771 1724 50       	pushl %eax
 3772              	.LCFI305:
 3773 1725 8D442408 	leal 8(%esp),%eax
 3774 1729 19D2     	sbbl %edx,%edx
 3775 172b 50       	pushl %eax
 3776              	.LCFI306:
 3777 172c 83E20C   	andl $12,%edx
 3778 172f 68A20000 	pushl $__func__.7
 3778      00
 3779              	.LCFI307:
 3780 1734 83C249   	addl $73,%edx
 3781 1737 52       	pushl %edx
 3782              	.LCFI308:
 3783 1738 68230600 	pushl $.LC47
 3783      00
 3784              	.LCFI309:
 3785 173d E9250400 	jmp .L1171
 3785      00
GAS LISTING  			page 166


 3786              	.LCFI310:
 3787              	.L963:
 3788              	.loc 1 1075 0
 3789 1742 F6050000 	testb $16,ieee80211_debug_level
 3789      000010
 3790 1749 7432     	je .L964
 3791              	.LBB216:
 3792              	.LBB217:
 3793              	.loc 5 91 0
 3794 174b B800E0FF 	movl $-8192,%eax
 3794      FF
 3795              	
 3796 1750 21E0     	andl %esp,%eax
 3797              	
 3798              	.LBE217:
 3799              	.LBE216:
 3800              	.loc 5 89 0
 3801 1752 8B4014   	movl 20(%eax),%eax
 3802 1755 2500FFFF 	andl $268435200,%eax
 3802      0F
 3803 175a 83F801   	cmpl $1,%eax
 3804 175d 0FB65502 	movzbl 2(%ebp),%edx
 3805 1761 19C0     	sbbl %eax,%eax
 3806 1763 52       	pushl %edx
 3807              	.LCFI311:
 3808 1764 83E00C   	andl $12,%eax
 3809 1767 68A20000 	pushl $__func__.7
 3809      00
 3810              	.LCFI312:
 3811 176c 83C049   	addl $73,%eax
 3812 176f 50       	pushl %eax
 3813              	.LCFI313:
 3814 1770 68560600 	pushl $.LC48
 3814      00
 3815              	.LCFI314:
 3816 1775 E8FCFFFF 	call printk
 3816      FF
 3817 177a 83C410   	addl $16,%esp
 3818              	.LCFI315:
 3819              	.L964:
 3820              	.loc 1 1077 0
 3821 177d 8A4502   	movb 2(%ebp),%al
 3822 1780 8B542460 	movl 96(%esp),%edx
 3823 1784 884206   	movb %al,6(%edx)
 3824              	.loc 1 1078 0
 3825 1787 E9E30300 	jmp .L851
 3825      00
 3826              	.L969:
 3827              	.loc 1 1081 0
 3828 178c F6050000 	testb $16,ieee80211_debug_level
 3828      000010
 3829 1793 0F84D603 	je .L851
 3829      0000
 3830              	.LBB218:
 3831              	.LBB219:
 3832              	.loc 5 91 0
 3833 1799 B800E0FF 	movl $-8192,%eax
GAS LISTING  			page 167


 3833      FF
 3834              	
 3835 179e 21E0     	andl %esp,%eax
 3836              	
 3837              	.LBE219:
 3838              	.LBE218:
 3839              	.loc 5 89 0
 3840 17a0 8B4014   	movl 20(%eax),%eax
 3841 17a3 2500FFFF 	andl $268435200,%eax
 3841      0F
 3842 17a8 83F801   	cmpl $1,%eax
 3843 17ab 19C0     	sbbl %eax,%eax
 3844 17ad 83E00C   	andl $12,%eax
 3845 17b0 68A20000 	pushl $__func__.7
 3845      00
 3846              	.LCFI316:
 3847 17b5 83C049   	addl $73,%eax
 3848 17b8 50       	pushl %eax
 3849              	.LCFI317:
 3850 17b9 68800600 	pushl $.LC49
 3850      00
 3851              	.LCFI318:
 3852 17be E94E0100 	jmp .L1170
 3852      00
 3853              	.LCFI319:
 3854              	.L975:
 3855              	.loc 1 1085 0
 3856 17c3 F6050000 	testb $16,ieee80211_debug_level
 3856      000010
 3857 17ca 0F849F03 	je .L851
 3857      0000
 3858              	.LBB220:
 3859              	.LBB221:
 3860              	.loc 5 91 0
 3861 17d0 B800E0FF 	movl $-8192,%eax
 3861      FF
 3862              	
 3863 17d5 21E0     	andl %esp,%eax
 3864              	
 3865              	.LBE221:
 3866              	.LBE220:
 3867              	.loc 5 89 0
 3868 17d7 8B4014   	movl 20(%eax),%eax
 3869 17da 2500FFFF 	andl $268435200,%eax
 3869      0F
 3870 17df 83F801   	cmpl $1,%eax
 3871 17e2 19C0     	sbbl %eax,%eax
 3872 17e4 83E00C   	andl $12,%eax
 3873 17e7 68A20000 	pushl $__func__.7
 3873      00
 3874              	.LCFI320:
 3875 17ec 83C049   	addl $73,%eax
 3876 17ef 50       	pushl %eax
 3877              	.LCFI321:
 3878 17f0 68AF0600 	pushl $.LC50
 3878      00
 3879              	.LCFI322:
GAS LISTING  			page 168


 3880 17f5 E9170100 	jmp .L1170
 3880      00
 3881              	.LCFI323:
 3882              	.L981:
 3883              	.loc 1 1089 0
 3884 17fa 8A4502   	movb 2(%ebp),%al
 3885 17fd 8B4C2460 	movl 96(%esp),%ecx
 3886 1801 88813C01 	movb %al,316(%ecx)
 3886      0000
 3887              	.loc 1 1090 0
 3888 1807 8A4503   	movb 3(%ebp),%al
 3889 180a 88813D01 	movb %al,317(%ecx)
 3889      0000
 3890              	.loc 1 1091 0
 3891 1810 F6050000 	testb $16,ieee80211_debug_level
 3891      000010
 3892 1817 0F845203 	je .L851
 3892      0000
 3893              	.LBB222:
 3894              	.LBB223:
 3895              	.loc 5 91 0
 3896 181d B800E0FF 	movl $-8192,%eax
 3896      FF
 3897              	
 3898 1822 21E0     	andl %esp,%eax
 3899              	
 3900              	.LBE223:
 3901              	.LBE222:
 3902              	.loc 5 89 0
 3903 1824 8B4014   	movl 20(%eax),%eax
 3904 1827 2500FFFF 	andl $268435200,%eax
 3904      0F
 3905 182c 83F801   	cmpl $1,%eax
 3906 182f 19C0     	sbbl %eax,%eax
 3907 1831 83E00C   	andl $12,%eax
 3908 1834 68A20000 	pushl $__func__.7
 3908      00
 3909              	.LCFI324:
 3910 1839 83C049   	addl $73,%eax
 3911 183c 50       	pushl %eax
 3912              	.LCFI325:
 3913 183d 68DE0600 	pushl $.LC51
 3913      00
 3914              	.LCFI326:
 3915 1842 E9CA0000 	jmp .L1170
 3915      00
 3916              	.LCFI327:
 3917              	.L987:
 3918              	.loc 1 1095 0
 3919 1847 8A5502   	movb 2(%ebp),%dl
 3920 184a 8B442460 	movl 96(%esp),%eax
 3921 184e 8890B200 	movb %dl,178(%eax)
 3921      0000
 3922              	.loc 1 1096 0
 3923 1854 F6050000 	testb $16,ieee80211_debug_level
 3923      000010
 3924 185b 0F840E03 	je .L851
GAS LISTING  			page 169


 3924      0000
 3925              	.LBB224:
 3926              	.LBB225:
 3927              	.loc 5 91 0
 3928 1861 B800E0FF 	movl $-8192,%eax
 3928      FF
 3929              	
 3930 1866 21E0     	andl %esp,%eax
 3931              	
 3932              	.LBE225:
 3933              	.LBE224:
 3934              	.loc 5 89 0
 3935 1868 8B4014   	movl 20(%eax),%eax
 3936 186b 2500FFFF 	andl $268435200,%eax
 3936      0F
 3937 1870 83F801   	cmpl $1,%eax
 3938 1873 19C0     	sbbl %eax,%eax
 3939 1875 0FB6D2   	movzbl %dl,%edx
 3940 1878 52       	pushl %edx
 3941              	.LCFI328:
 3942 1879 83E00C   	andl $12,%eax
 3943 187c 68A20000 	pushl $__func__.7
 3943      00
 3944              	.LCFI329:
 3945 1881 83C049   	addl $73,%eax
 3946 1884 50       	pushl %eax
 3947              	.LCFI330:
 3948 1885 68140700 	pushl $.LC52
 3948      00
 3949              	.LCFI331:
 3950 188a EB46     	jmp .L1169
 3951              	.LCFI332:
 3952              	.L993:
 3953              	.loc 1 1101 0
 3954 188c 660FB655 	movzbw 2(%ebp),%dx
 3954      02
 3955 1891 8B4C2460 	movl 96(%esp),%ecx
 3956 1895 668991B0 	movw %dx,176(%ecx)
 3956      000000
 3957              	.loc 1 1102 0
 3958 189c F6050000 	testb $16,ieee80211_debug_level
 3958      000010
 3959 18a3 0F84C602 	je .L851
 3959      0000
 3960              	.LBB226:
 3961              	.LBB227:
 3962              	.loc 5 91 0
 3963 18a9 B800E0FF 	movl $-8192,%eax
 3963      FF
 3964              	
 3965 18ae 21E0     	andl %esp,%eax
 3966              	
 3967              	.LBE227:
 3968              	.LBE226:
 3969              	.loc 5 89 0
 3970 18b0 8B4014   	movl 20(%eax),%eax
 3971 18b3 2500FFFF 	andl $268435200,%eax
GAS LISTING  			page 170


 3971      0F
 3972 18b8 83F801   	cmpl $1,%eax
 3973 18bb 19C0     	sbbl %eax,%eax
 3974 18bd 0FB7D2   	movzwl %dx,%edx
 3975 18c0 52       	pushl %edx
 3976              	.LCFI333:
 3977 18c1 83E00C   	andl $12,%eax
 3978 18c4 68A20000 	pushl $__func__.7
 3978      00
 3979              	.LCFI334:
 3980 18c9 83C049   	addl $73,%eax
 3981 18cc 50       	pushl %eax
 3982              	.LCFI335:
 3983 18cd 683F0700 	pushl $.LC53
 3983      00
 3984              	.LCFI336:
 3985              	.L1169:
 3986 18d2 E8FCFFFF 	call printk
 3986      FF
 3987 18d7 83C410   	addl $16,%esp
 3988              	.LCFI337:
 3989              	.loc 1 1104 0
 3990 18da E9900200 	jmp .L851
 3990      00
 3991              	.L999:
 3992              	.loc 1 1107 0
 3993 18df F6050000 	testb $16,ieee80211_debug_level
 3993      000010
 3994 18e6 0F848302 	je .L851
 3994      0000
 3995              	.LBB228:
 3996              	.LBB229:
 3997              	.loc 5 91 0
 3998 18ec B800E0FF 	movl $-8192,%eax
 3998      FF
 3999              	
 4000 18f1 21E0     	andl %esp,%eax
 4001              	
 4002              	.LBE229:
 4003              	.LBE228:
 4004              	.loc 5 89 0
 4005 18f3 8B4014   	movl 20(%eax),%eax
 4006 18f6 2500FFFF 	andl $268435200,%eax
 4006      0F
 4007 18fb 83F801   	cmpl $1,%eax
 4008 18fe 19C0     	sbbl %eax,%eax
 4009 1900 83E00C   	andl $12,%eax
 4010 1903 68A20000 	pushl $__func__.7
 4010      00
 4011              	.LCFI338:
 4012 1908 83C049   	addl $73,%eax
 4013 190b 50       	pushl %eax
 4014              	.LCFI339:
 4015 190c 686B0700 	pushl $.LC54
 4015      00
 4016              	.LCFI340:
 4017              	.L1170:
GAS LISTING  			page 171


 4018 1911 E8FCFFFF 	call printk
 4018      FF
 4019 1916 83C40C   	addl $12,%esp
 4020              	.LCFI341:
 4021              	.loc 1 1108 0
 4022 1919 E9510200 	jmp .L851
 4022      00
 4023              	.L1005:
 4024              	.loc 1 1111 0
 4025 191e F6050000 	testb $16,ieee80211_debug_level
 4025      000010
 4026 1925 742E     	je .L1006
 4027              	.LBB230:
 4028              	.LBB231:
 4029              	.loc 5 91 0
 4030 1927 B800E0FF 	movl $-8192,%eax
 4030      FF
 4031              	
 4032 192c 21E0     	andl %esp,%eax
 4033              	
 4034              	.LBE231:
 4035              	.LBE230:
 4036              	.loc 5 89 0
 4037 192e 8B4014   	movl 20(%eax),%eax
 4038 1931 2500FFFF 	andl $268435200,%eax
 4038      0F
 4039 1936 83F801   	cmpl $1,%eax
 4040 1939 19C0     	sbbl %eax,%eax
 4041 193b 52       	pushl %edx
 4042              	.LCFI342:
 4043 193c 83E00C   	andl $12,%eax
 4044 193f 68A20000 	pushl $__func__.7
 4044      00
 4045              	.LCFI343:
 4046 1944 83C049   	addl $73,%eax
 4047 1947 50       	pushl %eax
 4048              	.LCFI344:
 4049 1948 689D0700 	pushl $.LC55
 4049      00
 4050              	.LCFI345:
 4051 194d E8FCFFFF 	call printk
 4051      FF
 4052 1952 83C410   	addl $16,%esp
 4053              	.LCFI346:
 4054              	.L1006:
 4055              	.loc 1 1113 0
 4056 1955 FF742460 	pushl 96(%esp)
 4057              	.LCFI347:
 4058 1959 55       	pushl %ebp
 4059              	.LCFI348:
 4060 195a E883F7FF 	call ieee80211_parse_qos_info_param_IE
 4060      FF
 4061 195f 5F       	popl %edi
 4062              	.LCFI349:
 4063 1960 85C0     	testl %eax,%eax
 4064 1962 5A       	popl %edx
 4065              	.LCFI350:
GAS LISTING  			page 172


 4066 1963 0F840602 	je .L851
 4066      0000
 4067              	.loc 1 1117 0
 4068 1969 8A4501   	movb 1(%ebp),%al
 4069 196c 3C03     	cmpb $3,%al
 4070 196e 0F86FB01 	jbe .L851
 4070      0000
 4071 1974 807D0200 	cmpb $0,2(%ebp)
 4072 1978 0F85F101 	jne .L851
 4072      0000
 4073 197e 807D0350 	cmpb $80,3(%ebp)
 4074 1982 0F85E701 	jne .L851
 4074      0000
 4075 1988 807D04F2 	cmpb $-14,4(%ebp)
 4076 198c 0F85DD01 	jne .L851
 4076      0000
 4077 1992 807D0501 	cmpb $1,5(%ebp)
 4078 1996 0F85D301 	jne .L851
 4078      0000
 4079              	.LBB232:
 4080              	.loc 1 1122 0
 4081 199c 0FB6C0   	movzbl %al,%eax
 4082 199f 83C002   	addl $2,%eax
 4083 19a2 BA400000 	movl $64,%edx
 4083      00
 4084 19a7 39C2     	cmpl %eax,%edx
 4085 19a9 7E02     	jle .L1013
 4086 19ab 89C2     	movl %eax,%edx
 4087              	.L1013:
 4088              	.LBE232:
 4089 19ad 8B442460 	movl 96(%esp),%eax
 4090 19b1 8DB8B300 	leal 179(%eax),%edi
 4090      0000
 4091 19b7 8990F400 	movl %edx,244(%eax)
 4091      0000
 4092 19bd EB59     	jmp .L1168
 4093              	.L1039:
 4094              	.loc 1 1130 0
 4095 19bf F6050000 	testb $16,ieee80211_debug_level
 4095      000010
 4096 19c6 742E     	je .L1040
 4097              	.LBB233:
 4098              	.LBB234:
 4099              	.loc 5 91 0
 4100 19c8 B800E0FF 	movl $-8192,%eax
 4100      FF
 4101              	
 4102 19cd 21E0     	andl %esp,%eax
 4103              	
 4104              	.LBE234:
 4105              	.LBE233:
 4106              	.loc 5 89 0
 4107 19cf 8B4014   	movl 20(%eax),%eax
 4108 19d2 2500FFFF 	andl $268435200,%eax
 4108      0F
 4109 19d7 83F801   	cmpl $1,%eax
 4110 19da 19C0     	sbbl %eax,%eax
GAS LISTING  			page 173


 4111 19dc 52       	pushl %edx
 4112              	.LCFI351:
 4113 19dd 83E00C   	andl $12,%eax
 4114 19e0 68A20000 	pushl $__func__.7
 4114      00
 4115              	.LCFI352:
 4116 19e5 83C049   	addl $73,%eax
 4117 19e8 50       	pushl %eax
 4118              	.LCFI353:
 4119 19e9 68CE0700 	pushl $.LC56
 4119      00
 4120              	.LCFI354:
 4121 19ee E8FCFFFF 	call printk
 4121      FF
 4122 19f3 83C410   	addl $16,%esp
 4123              	.LCFI355:
 4124              	.L1040:
 4125              	.LBB235:
 4126              	.loc 1 1132 0
 4127 19f6 0FB64501 	movzbl 1(%ebp),%eax
 4128 19fa 83C002   	addl $2,%eax
 4129 19fd BA400000 	movl $64,%edx
 4129      00
 4130 1a02 39C2     	cmpl %eax,%edx
 4131 1a04 7E02     	jle .L1045
 4132 1a06 89C2     	movl %eax,%edx
 4133              	.L1045:
 4134              	.LBE235:
 4135 1a08 8B4C2460 	movl 96(%esp),%ecx
 4136 1a0c 89913801 	movl %edx,312(%ecx)
 4136      0000
 4137 1a12 8DB9F800 	leal 248(%ecx),%edi
 4137      0000
 4138              	.L1168:
 4139              	.LBB236:
 4140              	.LBB237:
 4141              	.loc 4 207 0
 4142 1a18 89D1     	movl %edx,%ecx
 4143 1a1a C1E902   	shrl $2,%ecx
 4144 1a1d 89EE     	movl %ebp,%esi
 4145              	
 4146 1a1f F3A5     	rep
 4147 1a21 89D1     	movl %edx,%ecx
 4148 1a23 83E103   	andl $3,%ecx
 4149 1a26 7402     	jz 1f
 4150 1a28 F3A4     	rep
 4151              	1:
 4152              	
 4153              	.LBE237:
 4154              	.LBE236:
 4155              	.loc 1 1136 0
 4156 1a2a E9400100 	jmp .L851
 4156      00
 4157              	.L1071:
 4158              	.loc 1 1139 0
 4159 1a2f 68FB0700 	pushl $.LC57
 4159      00
GAS LISTING  			page 174


 4160              	.LCFI356:
 4161 1a34 E8FCFFFF 	call printk
 4161      FF
 4162              	.loc 1 1141 0
 4163 1a39 5E       	popl %esi
 4164              	.LCFI357:
 4165 1a3a E9300100 	jmp .L851
 4165      00
 4166              	.L1072:
 4167              	.loc 1 1144 0
 4168 1a3f 8B542460 	movl 96(%esp),%edx
 4169 1a43 8A4502   	movb 2(%ebp),%al
 4170              	.loc 1 1145 0
 4171 1a46 838A9C00 	orl $32,156(%edx)
 4171      000020
 4172              	.loc 1 1144 0
 4173 1a4d 88823E01 	movb %al,318(%edx)
 4173      0000
 4174              	.loc 1 1146 0
 4175 1a53 E9170100 	jmp .L851
 4175      00
 4176              	.L1073:
 4177              	.loc 1 1149 0
 4178 1a58 8B4C2460 	movl 96(%esp),%ecx
 4179 1a5c 8A4502   	movb 2(%ebp),%al
 4180              	.loc 1 1150 0
 4181 1a5f 83899C00 	orl $64,156(%ecx)
 4181      000040
 4182              	.loc 1 1149 0
 4183 1a66 88813E01 	movb %al,318(%ecx)
 4183      0000
 4184              	.loc 1 1151 0
 4185 1a6c E9FE0000 	jmp .L851
 4185      00
 4186              	.L1074:
 4187              	.loc 1 1154 0
 4188 1a71 8A4502   	movb 2(%ebp),%al
 4189 1a74 8B542460 	movl 96(%esp),%edx
 4190 1a78 88824B01 	movb %al,331(%edx)
 4190      0000
 4191              	.loc 1 1155 0
 4192 1a7e 8A4503   	movb 3(%ebp),%al
 4193 1a81 88824C01 	movb %al,332(%edx)
 4193      0000
 4194              	.loc 1 1156 0
 4195 1a87 8A4504   	movb 4(%ebp),%al
 4196 1a8a 88824D01 	movb %al,333(%edx)
 4196      0000
 4197              	.loc 1 1157 0
 4198 1a90 8A4505   	movb 5(%ebp),%al
 4199              	.loc 1 1158 0
 4200 1a93 818A9C00 	orl $128,156(%edx)
 4200      00008000 
 4200      0000
 4201              	.loc 1 1157 0
 4202 1a9d 88824E01 	movb %al,334(%edx)
 4202      0000
GAS LISTING  			page 175


 4203              	.loc 1 1159 0
 4204 1aa3 E9C70000 	jmp .L851
 4204      00
 4205              	.L1075:
 4206              	.loc 1 1162 0
 4207 1aa8 8B4C2460 	movl 96(%esp),%ecx
 4208 1aac 83B94401 	cmpl $0,324(%ecx)
 4208      000000
 4209 1ab3 0F85B600 	jne .L851
 4209      0000
 4210              	.L1079:
 4211              	.LBB238:
 4212              	.LBB239:
 4213              	.file 10 "include/linux/slab.h"
   1:include/linux/slab.h **** /*
   2:include/linux/slab.h ****  * linux/mm/slab.h
   3:include/linux/slab.h ****  * Written by Mark Hemment, 1996.
   4:include/linux/slab.h ****  * (markhe@nextd.demon.co.uk)
   5:include/linux/slab.h ****  */
   6:include/linux/slab.h **** 
   7:include/linux/slab.h **** #ifndef _LINUX_SLAB_H
   8:include/linux/slab.h **** #define	_LINUX_SLAB_H
   9:include/linux/slab.h **** 
  10:include/linux/slab.h **** #if	defined(__KERNEL__)
  11:include/linux/slab.h **** 
  12:include/linux/slab.h **** typedef struct kmem_cache_s kmem_cache_t;
  13:include/linux/slab.h **** 
  14:include/linux/slab.h **** #include	<linux/config.h>	/* kmalloc_sizes.h needs CONFIG_ options */
  15:include/linux/slab.h **** #include	<linux/gfp.h>
  16:include/linux/slab.h **** #include	<linux/init.h>
  17:include/linux/slab.h **** #include	<linux/types.h>
  18:include/linux/slab.h **** #include	<asm/page.h>		/* kmalloc_sizes.h needs PAGE_SIZE */
  19:include/linux/slab.h **** #include	<asm/cache.h>		/* kmalloc_sizes.h needs L1_CACHE_BYTES */
  20:include/linux/slab.h **** 
  21:include/linux/slab.h **** /* flags for kmem_cache_alloc() */
  22:include/linux/slab.h **** #define	SLAB_NOFS		GFP_NOFS
  23:include/linux/slab.h **** #define	SLAB_NOIO		GFP_NOIO
  24:include/linux/slab.h **** #define	SLAB_ATOMIC		GFP_ATOMIC
  25:include/linux/slab.h **** #define	SLAB_USER		GFP_USER
  26:include/linux/slab.h **** #define	SLAB_KERNEL		GFP_KERNEL
  27:include/linux/slab.h **** #define	SLAB_DMA		GFP_DMA
  28:include/linux/slab.h **** 
  29:include/linux/slab.h **** #define SLAB_LEVEL_MASK		GFP_LEVEL_MASK
  30:include/linux/slab.h **** 
  31:include/linux/slab.h **** #define	SLAB_NO_GROW		__GFP_NO_GROW	/* don't grow a cache */
  32:include/linux/slab.h **** 
  33:include/linux/slab.h **** /* flags to pass to kmem_cache_create().
  34:include/linux/slab.h ****  * The first 3 are only valid when the allocator as been build
  35:include/linux/slab.h ****  * SLAB_DEBUG_SUPPORT.
  36:include/linux/slab.h ****  */
  37:include/linux/slab.h **** #define	SLAB_DEBUG_FREE		0x00000100UL	/* Peform (expensive) checks on free */
  38:include/linux/slab.h **** #define	SLAB_DEBUG_INITIAL	0x00000200UL	/* Call constructor (as verifier) */
  39:include/linux/slab.h **** #define	SLAB_RED_ZONE		0x00000400UL	/* Red zone objs in a cache */
  40:include/linux/slab.h **** #define	SLAB_POISON		0x00000800UL	/* Poison objects */
  41:include/linux/slab.h **** #define	SLAB_NO_REAP		0x00001000UL	/* never reap from the cache */
  42:include/linux/slab.h **** #define	SLAB_HWCACHE_ALIGN	0x00002000UL	/* align objs on a h/w cache lines */
  43:include/linux/slab.h **** #define SLAB_CACHE_DMA		0x00004000UL	/* use GFP_DMA memory */
GAS LISTING  			page 176


  44:include/linux/slab.h **** #define SLAB_MUST_HWCACHE_ALIGN	0x00008000UL	/* force alignment */
  45:include/linux/slab.h **** #define SLAB_STORE_USER		0x00010000UL	/* store the last owner for bug hunting */
  46:include/linux/slab.h **** #define SLAB_RECLAIM_ACCOUNT	0x00020000UL	/* track pages allocated to indicate
  47:include/linux/slab.h **** 						   what is reclaimable later*/
  48:include/linux/slab.h **** #define SLAB_PANIC		0x00040000UL	/* panic if kmem_cache_create() fails */
  49:include/linux/slab.h **** #define SLAB_DESTROY_BY_RCU	0x00080000UL	/* defer freeing pages to RCU */
  50:include/linux/slab.h **** 
  51:include/linux/slab.h **** /* flags passed to a constructor func */
  52:include/linux/slab.h **** #define	SLAB_CTOR_CONSTRUCTOR	0x001UL		/* if not set, then deconstructor */
  53:include/linux/slab.h **** #define SLAB_CTOR_ATOMIC	0x002UL		/* tell constructor it can't sleep */
  54:include/linux/slab.h **** #define	SLAB_CTOR_VERIFY	0x004UL		/* tell constructor it's a verify call */
  55:include/linux/slab.h **** 
  56:include/linux/slab.h **** /* prototypes */
  57:include/linux/slab.h **** extern void __init kmem_cache_init(void);
  58:include/linux/slab.h **** 
  59:include/linux/slab.h **** extern kmem_cache_t *kmem_cache_create(const char *, size_t, size_t, unsigned long,
  60:include/linux/slab.h **** 				       void (*)(void *, kmem_cache_t *, unsigned long),
  61:include/linux/slab.h **** 				       void (*)(void *, kmem_cache_t *, unsigned long));
  62:include/linux/slab.h **** extern int kmem_cache_destroy(kmem_cache_t *);
  63:include/linux/slab.h **** extern int kmem_cache_shrink(kmem_cache_t *);
  64:include/linux/slab.h **** extern void *kmem_cache_alloc(kmem_cache_t *, unsigned int __nocast);
  65:include/linux/slab.h **** extern void kmem_cache_free(kmem_cache_t *, void *);
  66:include/linux/slab.h **** extern unsigned int kmem_cache_size(kmem_cache_t *);
  67:include/linux/slab.h **** extern kmem_cache_t *kmem_find_general_cachep(size_t size, int gfpflags);
  68:include/linux/slab.h **** 
  69:include/linux/slab.h **** /* Size description struct for general caches. */
  70:include/linux/slab.h **** struct cache_sizes {
  71:include/linux/slab.h **** 	size_t		 cs_size;
  72:include/linux/slab.h **** 	kmem_cache_t	*cs_cachep;
  73:include/linux/slab.h **** 	kmem_cache_t	*cs_dmacachep;
  74:include/linux/slab.h **** };
  75:include/linux/slab.h **** extern struct cache_sizes malloc_sizes[];
  76:include/linux/slab.h **** extern void *__kmalloc(size_t, unsigned int __nocast);
  77:include/linux/slab.h **** 
  78:include/linux/slab.h **** static inline void *kmalloc(size_t size, unsigned int __nocast flags)
  79:include/linux/slab.h **** {
  80:include/linux/slab.h **** 	if (__builtin_constant_p(size)) {
  81:include/linux/slab.h **** 		int i = 0;
  82:include/linux/slab.h **** #define CACHE(x) \
  83:include/linux/slab.h **** 		if (size <= x) \
  84:include/linux/slab.h **** 			goto found; \
  85:include/linux/slab.h **** 		else \
  86:include/linux/slab.h **** 			i++;
  87:include/linux/slab.h **** #include "kmalloc_sizes.h"
  88:include/linux/slab.h **** #undef CACHE
  89:include/linux/slab.h **** 		{
  90:include/linux/slab.h **** 			extern void __you_cannot_kmalloc_that_much(void);
  91:include/linux/slab.h **** 			__you_cannot_kmalloc_that_much();
  92:include/linux/slab.h **** 		}
  93:include/linux/slab.h **** found:
  94:include/linux/slab.h **** 		return kmem_cache_alloc((flags & GFP_DMA) ?
  95:include/linux/slab.h **** 			malloc_sizes[i].cs_dmacachep :
  96:include/linux/slab.h **** 			malloc_sizes[i].cs_cachep, flags);
  97:include/linux/slab.h **** 	}
 4214              	.loc 10 97 0
 4215 1ab9 6A20     	pushl $32
 4216              	.LCFI358:
GAS LISTING  			page 177


 4217 1abb 52       	pushl %edx
 4218              	.LCFI359:
 4219 1abc E8FCFFFF 	call __kmalloc
 4219      FF
 4220 1ac1 59       	popl %ecx
 4221              	.LCFI360:
 4222 1ac2 89C7     	movl %eax,%edi
 4223 1ac4 5B       	popl %ebx
 4224              	.LCFI361:
 4225              	.LBE239:
 4226              	.LBE238:
 4227              	.loc 10 79 0
 4228 1ac5 8B442460 	movl 96(%esp),%eax
 4229              	.loc 1 1166 0
 4230 1ac9 85FF     	testl %edi,%edi
 4231              	.loc 10 79 0
 4232 1acb 89B84401 	movl %edi,324(%eax)
 4232      0000
 4233              	.loc 1 1166 0
 4234 1ad1 750A     	jne .L1110
 4235              	.L1172:
 4236              	.loc 1 1167 0
 4237 1ad3 B8010000 	movl $1,%eax
 4237      00
 4238 1ad8 E9BD0000 	jmp .L842
 4238      00
 4239              	.L1110:
 4240              	.loc 1 1168 0
 4241 1add 0FB64501 	movzbl 1(%ebp),%eax
 4242              	.LBB240:
 4243              	.LBB241:
 4244              	.loc 4 207 0
 4245 1ae1 89C1     	movl %eax,%ecx
 4246 1ae3 8D7502   	leal 2(%ebp),%esi
 4247 1ae6 C1E902   	shrl $2,%ecx
 4248              	
 4249 1ae9 F3A5     	rep
 4250 1aeb 89C1     	movl %eax,%ecx
 4251 1aed 83E103   	andl $3,%ecx
 4252 1af0 7402     	jz 1f
 4253 1af2 F3A4     	rep
 4254              	1:
 4255              	
 4256              	.LBE241:
 4257              	.LBE240:
 4258              	.loc 1 1170 0
 4259 1af4 8B542460 	movl 96(%esp),%edx
 4260 1af8 818A9C00 	orl $256,156(%edx)
 4260      00000001 
 4260      0000
 4261              	.loc 1 1171 0
 4262 1b02 EB6B     	jmp .L851
 4263              	.L1136:
 4264              	.loc 1 1174 0
 4265 1b04 8A4502   	movb 2(%ebp),%al
 4266 1b07 8B4C2460 	movl 96(%esp),%ecx
 4267 1b0b 88813F01 	movb %al,319(%ecx)
GAS LISTING  			page 178


 4267      0000
 4268              	.loc 1 1176 0
 4269 1b11 8A4503   	movb 3(%ebp),%al
 4270              	.loc 1 1177 0
 4271 1b14 81899C00 	orl $512,156(%ecx)
 4271      00000002 
 4271      0000
 4272              	.loc 1 1176 0
 4273 1b1e 88814001 	movb %al,320(%ecx)
 4273      0000
 4274              	.loc 1 1178 0
 4275 1b24 EB49     	jmp .L851
 4276              	.L1137:
 4277              	.loc 1 1181 0
 4278 1b26 F6050000 	testb $16,ieee80211_debug_level
 4278      000010
 4279 1b2d 7440     	je .L851
 4280              	.LBB242:
 4281              	.LBB243:
 4282              	.loc 5 91 0
 4283 1b2f B800E0FF 	movl $-8192,%eax
 4283      FF
 4284              	
 4285 1b34 21E0     	andl %esp,%eax
 4286              	
 4287              	.LBE243:
 4288              	.LBE242:
 4289              	.loc 5 89 0
 4290 1b36 8B4014   	movl 20(%eax),%eax
 4291 1b39 2500FFFF 	andl $268435200,%eax
 4291      0F
 4292 1b3e 83F801   	cmpl $1,%eax
 4293 1b41 0FB64424 	movzbl 1(%esp),%eax
 4293      01
 4294 1b46 50       	pushl %eax
 4295              	.LCFI362:
 4296 1b47 0FB64500 	movzbl (%ebp),%eax
 4297 1b4b 19DB     	sbbl %ebx,%ebx
 4298 1b4d 50       	pushl %eax
 4299              	.LCFI363:
 4300              	.LCFI364:
 4301 1b4e E839F6FF 	call get_info_element_string
 4301      FF
 4302 1b53 83E30C   	andl $12,%ebx
 4303 1b56 890424   	movl %eax,(%esp)
 4304 1b59 83C349   	addl $73,%ebx
 4305 1b5c 68A20000 	pushl $__func__.7
 4305      00
 4306              	.LCFI365:
 4307 1b61 53       	pushl %ebx
 4308              	.LCFI366:
 4309 1b62 68280800 	pushl $.LC58
 4309      00
 4310              	.LCFI367:
 4311              	.L1171:
 4312 1b67 E8FCFFFF 	call printk
 4312      FF
GAS LISTING  			page 179


 4313 1b6c 83C414   	addl $20,%esp
 4314              	.LCFI368:
 4315              	.L851:
 4316              	.loc 1 1188 0
 4317 1b6f 8A4501   	movb 1(%ebp),%al
 4318 1b72 660FB6D0 	movzbw %al,%dx
 4319 1b76 668B4C24 	movw 2(%esp),%cx
 4319      02
 4320 1b7b 6629D1   	subw %dx,%cx
 4321 1b7e 89CA     	movl %ecx,%edx
 4322 1b80 83EA02   	subl $2,%edx
 4323              	.loc 1 1189 0
 4324 1b83 0FB6C0   	movzbl %al,%eax
 4325 1b86 8D6C0502 	leal 2(%ebp,%eax),%ebp
 4326 1b8a 6683FA01 	cmpw $1,%dx
 4327              	.loc 1 1188 0
 4328 1b8e 66895424 	movw %dx,2(%esp)
 4328      02
 4329 1b93 E973F7FF 	jmp .L1162
 4329      FF
 4330              	.L1150:
1190:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		    (struct ieee80211_info_element *)&info_element->
1191:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		    data[info_element->len];
1192:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	}
1193:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1194:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	return 0;
 4331              	.loc 1 1194 0
 4332 1b98 31C0     	xorl %eax,%eax
 4333              	.L842:
1195:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** }
 4334              	.loc 1 1195 0
 4335 1b9a 83C444   	addl $68,%esp
 4336 1b9d 5B       	popl %ebx
 4337 1b9e 5E       	popl %esi
 4338 1b9f 5F       	popl %edi
 4339 1ba0 5D       	popl %ebp
 4340 1ba1 C3       	ret
 4341              	.LFE938:
 4344              	ieee80211_handle_assoc_resp:
 4345              	.LFB939:
1196:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1197:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** static int ieee80211_handle_assoc_resp(struct ieee80211_device *ieee, struct ieee80211_assoc_respon
1198:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				       *frame, struct ieee80211_rx_stats *stats)
1199:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** {
 4346              	.loc 1 1199 0
 4347 1ba2 55       	pushl %ebp
 4348              	.LCFI369:
 4349 1ba3 57       	pushl %edi
 4350              	.LCFI370:
 4351 1ba4 56       	pushl %esi
 4352              	.LCFI371:
 4353 1ba5 53       	pushl %ebx
 4354              	.LCFI372:
 4355 1ba6 81EC6401 	subl $356,%esp
 4355      0000
 4356              	.LCFI373:
 4357              	.loc 1 1199 0
GAS LISTING  			page 180


 4358 1bac 8BAC247C 	movl 380(%esp),%ebp
 4358      010000
 4359 1bb3 8BB42480 	movl 384(%esp),%esi
 4359      010000
1200:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	struct ieee80211_network network_resp = {
 4360              	.loc 1 1200 0
 4361 1bba 8D5C2404 	leal 4(%esp),%ebx
 4362 1bbe 68580100 	pushl $344
 4362      00
 4363              	.LCFI374:
 4364 1bc3 6A00     	pushl $0
 4365              	.LCFI375:
 4366 1bc5 53       	pushl %ebx
 4367              	.LCFI376:
 4368 1bc6 E8FCFFFF 	call memset
 4368      FF
1201:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		.ibss_dfs = NULL,
1202:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	};
1203:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	struct ieee80211_network *network = &network_resp;
1204:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	struct net_device *dev = ieee->dev;
 4369              	.loc 1 1204 0
 4370 1bcb 8B842484 	movl 388(%esp),%eax
 4370      010000
 4371 1bd2 8B00     	movl (%eax),%eax
 4372 1bd4 8944240C 	movl %eax,12(%esp)
1205:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1206:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	network->flags = 0;
 4373              	.loc 1 1206 0
 4374 1bd8 C78424AC 	movl $0,172(%esp)
 4374      00000000 
 4374      000000
1207:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	network->qos_data.active = 0;
 4375              	.loc 1 1207 0
 4376 1be3 C744245C 	movl $0,92(%esp)
 4376      00000000 
1208:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	network->qos_data.supported = 0;
 4377              	.loc 1 1208 0
 4378 1beb C7442460 	movl $0,96(%esp)
 4378      00000000 
1209:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	network->qos_data.param_count = 0;
 4379              	.loc 1 1209 0
 4380 1bf3 C6442464 	movb $0,100(%esp)
 4380      00
1210:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	network->qos_data.old_param_count = 0;
 4381              	.loc 1 1210 0
 4382 1bf8 C6442465 	movb $0,101(%esp)
 4382      00
1211:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1212:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	//network->atim_window = le16_to_cpu(frame->aid) & (0x3FFF);
1213:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	network->atim_window = le16_to_cpu(frame->aid);
 4383              	.loc 1 1213 0
 4384 1bfd 668B451C 	movw 28(%ebp),%ax
 4385 1c01 66898424 	movw %ax,192(%esp)
 4385      C0000000 
1214:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	network->listen_interval = le16_to_cpu(frame->status);
 4386              	.loc 1 1214 0
 4387 1c09 668B451A 	movw 26(%ebp),%ax
GAS LISTING  			page 181


 4388 1c0d 66898424 	movw %ax,190(%esp)
 4388      BE000000 
 4389              	.LBB244:
 4390              	.LBB245:
 4391              	.loc 4 240 0
 4392 1c15 8B4510   	movl 16(%ebp),%eax
 4393              	.LBE245:
 4394              	.LBE244:
 4395              	.loc 4 227 0
 4396 1c18 83C40C   	addl $12,%esp
 4397              	.LCFI377:
 4398              	.LBB246:
 4399              	.LBB247:
 4400              	.loc 4 240 0
 4401 1c1b 89442404 	movl %eax,4(%esp)
 4402              	.loc 4 241 0
 4403 1c1f 668B4514 	movw 20(%ebp),%ax
 4404 1c23 66894424 	movw %ax,8(%esp)
 4404      08
 4405              	.LBE247:
 4406              	.LBE246:
1215:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	memcpy(network->bssid, frame->header.addr3, ETH_ALEN);
1216:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	network->capability = le16_to_cpu(frame->capability);
 4407              	.loc 1 1216 0
 4408 1c28 668B5518 	movw 24(%ebp),%dx
 4409 1c2c 66895424 	movw %dx,120(%esp)
 4409      78
1217:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	network->last_scanned = jiffies;
1218:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	network->rates_len = network->rates_ex_len = 0;
1219:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	network->last_associate = 0;
1220:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	network->ssid_len = 0;
1221:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	network->erp_value =
 4410              	.loc 1 1221 0
 4411 1c31 83E202   	andl $2,%edx
 4412 1c34 83FA01   	cmpl $1,%edx
 4413              	.loc 1 1217 0
 4414 1c37 A1000000 	movl jiffies,%eax
 4414      00
 4415 1c3c 89842498 	movl %eax,152(%esp)
 4415      000000
 4416              	.loc 1 1221 0
 4417 1c43 19C0     	sbbl %eax,%eax
 4418 1c45 F7D0     	notl %eax
 4419 1c47 83E003   	andl $3,%eax
 4420              	.loc 1 1218 0
 4421 1c4a C6842497 	movb $0,151(%esp)
 4421      00000000 
 4422 1c52 C6842486 	movb $0,134(%esp)
 4422      00000000 
 4423              	.loc 1 1219 0
 4424 1c5a C78424A4 	movl $0,164(%esp)
 4424      00000000 
 4424      000000
 4425              	.loc 1 1220 0
 4426 1c65 C644242C 	movb $0,44(%esp)
 4426      00
 4427              	.loc 1 1221 0
GAS LISTING  			page 182


 4428 1c6a 888424B6 	movb %al,182(%esp)
 4428      000000
1222:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	    (network->capability & WLAN_CAPABILITY_IBSS) ? 0x3 : 0x0;
1223:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1224:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	if (stats->freq == IEEE80211_52GHZ_BAND) {
 4429              	.loc 1 1224 0
 4430 1c71 807E0D02 	cmpb $2,13(%esi)
 4431 1c75 7509     	jne .L1198
1225:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		/* for A band (No DS info) */
1226:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		network->channel = stats->received_channel;
 4432              	.loc 1 1226 0
 4433 1c77 8A460A   	movb 10(%esi),%al
 4434 1c7a 8844240A 	movb %al,10(%esp)
 4435 1c7e EB0B     	jmp .L1199
 4436              	.L1198:
1227:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	} else
1228:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		network->flags |= NETWORK_HAS_CCK;
 4437              	.loc 1 1228 0
 4438 1c80 C78424A0 	movl $4,160(%esp)
 4438      00000004 
 4438      000000
 4439              	.L1199:
1229:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1230:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	network->wpa_ie_len = 0;
 4440              	.loc 1 1230 0
 4441 1c8b C783F400 	movl $0,244(%ebx)
 4441      00000000 
 4441      0000
1231:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	network->rsn_ie_len = 0;
 4442              	.loc 1 1231 0
 4443 1c95 C7833801 	movl $0,312(%ebx)
 4443      00000000 
 4443      0000
1232:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1233:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	if (ieee80211_parse_info_param
 4444              	.loc 1 1233 0
 4445 1c9f 53       	pushl %ebx
 4446              	.LCFI378:
 4447 1ca0 668B460E 	movw 14(%esi),%ax
 4448 1ca4 83E81E   	subl $30,%eax
 4449 1ca7 0FB7C0   	movzwl %ax,%eax
 4450 1caa 50       	pushl %eax
 4451              	.LCFI379:
 4452 1cab 8D451E   	leal 30(%ebp),%eax
 4453 1cae 50       	pushl %eax
 4454              	.LCFI380:
 4455 1caf E83FF6FF 	call ieee80211_parse_info_param
 4455      FF
 4456 1cb4 83C40C   	addl $12,%esp
 4457              	.LCFI381:
 4458 1cb7 85C0     	testl %eax,%eax
1234:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	    (frame->info_element, stats->len - sizeof(*frame), network))
1235:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		return 1;
 4459              	.loc 1 1235 0
 4460 1cb9 BA010000 	movl $1,%edx
 4460      00
 4461              	.loc 1 1233 0
GAS LISTING  			page 183


 4462 1cbe 0F858000 	jne .L1173
 4462      0000
1236:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1237:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	network->mode = 0;
 4463              	.loc 1 1237 0
 4464 1cc4 C6839800 	movb $0,152(%ebx)
 4464      000000
1238:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	if (stats->freq == IEEE80211_52GHZ_BAND)
 4465              	.loc 1 1238 0
 4466 1ccb 807E0D02 	cmpb $2,13(%esi)
 4467 1ccf 7509     	jne .L1201
1239:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		network->mode = IEEE_A;
 4468              	.loc 1 1239 0
 4469 1cd1 C6839800 	movb $1,152(%ebx)
 4469      000001
 4470 1cd8 EB1C     	jmp .L1202
 4471              	.L1201:
1240:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	else {
1241:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		if (network->flags & NETWORK_HAS_OFDM)
 4472              	.loc 1 1241 0
 4473 1cda 8B839C00 	movl 156(%ebx),%eax
 4473      0000
 4474 1ce0 A802     	testb $2,%al
 4475 1ce2 7407     	je .L1203
1242:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			network->mode |= IEEE_G;
 4476              	.loc 1 1242 0
 4477 1ce4 C6839800 	movb $4,152(%ebx)
 4477      000004
 4478              	.L1203:
1243:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		if (network->flags & NETWORK_HAS_CCK)
 4479              	.loc 1 1243 0
 4480 1ceb A804     	testb $4,%al
 4481 1ced 7407     	je .L1202
1244:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			network->mode |= IEEE_B;
 4482              	.loc 1 1244 0
 4483 1cef 808B9800 	orb $2,152(%ebx)
 4483      000002
 4484              	.L1202:
 4485              	.LBB248:
 4486              	.loc 2 1187 0
 4487 1cf6 0FB64328 	movzbl 40(%ebx),%eax
 4488              	.LBB249:
 4489              	.loc 2 1189 0
 4490 1cfa 83F801   	cmpl $1,%eax
 4491              	.LBE249:
 4492              	.loc 2 1187 0
 4493 1cfd 8D5307   	leal 7(%ebx),%edx
 4494              	.LBB250:
 4495              	.loc 2 1189 0
 4496 1d00 7506     	jne .L1206
 4497 1d02 807B0720 	cmpb $32,7(%ebx)
 4498 1d06 EB02     	jmp .L1240
 4499              	.L1206:
 4500              	.loc 2 1195 0
 4501 1d08 85C0     	testl %eax,%eax
 4502              	.L1240:
 4503 1d0a 7409     	je .L1238
GAS LISTING  			page 184


 4504              	.loc 2 1194 0
 4505 1d0c 48       	decl %eax
 4506              	.loc 2 1195 0
 4507 1d0d 803C0200 	cmpb $0,(%edx,%eax)
 4508 1d11 7509     	jne .L1205
 4509 1d13 EBF3     	jmp .L1206
 4510              	.L1238:
 4511              	.LBE250:
 4512              	.LBE248:
1245:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	}
1246:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1247:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	if (ieee80211_is_empty_essid(network->ssid, network->ssid_len))
1248:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		network->flags |= NETWORK_EMPTY_ESSID;
 4513              	.loc 1 1248 0
 4514 1d15 838B9C00 	orl $1,156(%ebx)
 4514      000001
 4515              	.L1205:
 4516              	.LBB251:
 4517              	.loc 4 227 0
 4518 1d1c 8D7B58   	leal 88(%ebx),%edi
 4519              	.LBB252:
 4520              	.LBB253:
 4521              	.loc 4 252 0
 4522 1d1f B9070000 	movl $7,%ecx
 4522      00
 4523              	
 4524 1d24 F3A5     	rep
 4525              	
 4526              	.LBE253:
 4527              	.LBE252:
 4528              	.LBE251:
1249:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1250:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	memcpy(&network->stats, stats, sizeof(network->stats));
1251:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1252:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	if (ieee->handle_assoc_response != NULL)
 4529              	.loc 1 1252 0
 4530 1d26 8B942478 	movl 376(%esp),%edx
 4530      010000
 4531 1d2d 8B82A407 	movl 1956(%edx),%eax
 4531      0000
 4532 1d33 85C0     	testl %eax,%eax
 4533 1d35 740B     	je .L1234
1253:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		ieee->handle_assoc_response(dev, frame, network);
 4534              	.loc 1 1253 0
 4535 1d37 53       	pushl %ebx
 4536              	.LCFI382:
 4537 1d38 55       	pushl %ebp
 4538              	.LCFI383:
 4539 1d39 FF742408 	pushl 8(%esp)
 4540              	.LCFI384:
 4541 1d3d FFD0     	call *%eax
 4542 1d3f 83C40C   	addl $12,%esp
 4543              	.LCFI385:
 4544              	.L1234:
1254:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1255:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	return 0;
 4545              	.loc 1 1255 0
GAS LISTING  			page 185


 4546 1d42 31D2     	xorl %edx,%edx
 4547              	.L1173:
1256:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** }
 4548              	.loc 1 1256 0
 4549 1d44 81C46401 	addl $356,%esp
 4549      0000
 4550 1d4a 5B       	popl %ebx
 4551 1d4b 5E       	popl %esi
 4552 1d4c 5F       	popl %edi
 4553 1d4d 89D0     	movl %edx,%eax
 4554 1d4f 5D       	popl %ebp
 4555 1d50 C3       	ret
 4556              	.LFE939:
 4558              	.section .rodata
 4561              	__func__.8:
 4562 00bd 69656565 	.string "ieee80211_network_init"
 4562      38303231 
 4562      315F6E65 
 4562      74776F72 
 4562      6B5F696E 
 4563              	.section .rodata.str1.1
 4564              	.LC59:
 4565 085f 3C373E69 	.string "<7>ieee80211: %c %s Filtered out '%s (%02x:%02x:%02x:%02x:%02x:%02x)' network.\n"
 4565      65656538 
 4565      30323131 
 4565      3A202563 
 4565      20257320 
 4566              	.text
 4568              	ieee80211_network_init:
 4569              	.LFB940:
1257:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1258:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** /***************************************************/
1259:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1260:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** static int ieee80211_network_init(struct ieee80211_device *ieee, struct ieee80211_probe_response
1261:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 					 *beacon,
1262:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 					 struct ieee80211_network *network,
1263:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 					 struct ieee80211_rx_stats *stats)
1264:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** {
 4570              	.loc 1 1264 0
 4571 1d51 57       	pushl %edi
 4572              	.LCFI386:
 4573 1d52 56       	pushl %esi
 4574              	.LCFI387:
 4575 1d53 53       	pushl %ebx
 4576              	.LCFI388:
 4577              	.loc 1 1264 0
 4578 1d54 8B742418 	movl 24(%esp),%esi
 4579 1d58 8B4C2414 	movl 20(%esp),%ecx
 4580 1d5c 8B5C241C 	movl 28(%esp),%ebx
1265:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	network->qos_data.active = 0;
 4581              	.loc 1 1265 0
 4582 1d60 C7464C00 	movl $0,76(%esi)
 4582      000000
1266:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	network->qos_data.supported = 0;
 4583              	.loc 1 1266 0
 4584 1d67 C7465000 	movl $0,80(%esi)
 4584      000000
GAS LISTING  			page 186


1267:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	network->qos_data.param_count = 0;
 4585              	.loc 1 1267 0
 4586 1d6e C6465400 	movb $0,84(%esi)
1268:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	network->qos_data.old_param_count = 0;
 4587              	.loc 1 1268 0
 4588 1d72 C6465500 	movb $0,85(%esi)
 4589              	.LBB254:
 4590              	.LBB255:
 4591              	.loc 4 240 0
 4592 1d76 8B4110   	movl 16(%ecx),%eax
 4593 1d79 8906     	movl %eax,(%esi)
 4594              	.loc 4 241 0
 4595 1d7b 668B4114 	movw 20(%ecx),%ax
 4596 1d7f 66894604 	movw %ax,4(%esi)
 4597              	.LBE255:
 4598              	.LBE254:
1269:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1270:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	/* Pull out fixed field data */
1271:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	memcpy(network->bssid, beacon->header.addr3, ETH_ALEN);
1272:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	network->capability = le16_to_cpu(beacon->capability);
 4599              	.loc 1 1272 0
 4600 1d83 668B5122 	movw 34(%ecx),%dx
 4601 1d87 66895674 	movw %dx,116(%esi)
1273:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	network->last_scanned = jiffies;
 4602              	.loc 1 1273 0
 4603 1d8b A1000000 	movl jiffies,%eax
 4603      00
 4604 1d90 89869400 	movl %eax,148(%esi)
 4604      0000
1274:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	network->time_stamp[0] = le32_to_cpu(beacon->time_stamp[0]);
 4605              	.loc 1 1274 0
 4606 1d96 8B4118   	movl 24(%ecx),%eax
 4607 1d99 8986A400 	movl %eax,164(%esi)
 4607      0000
1275:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	network->time_stamp[1] = le32_to_cpu(beacon->time_stamp[1]);
 4608              	.loc 1 1275 0
 4609 1d9f 8B411C   	movl 28(%ecx),%eax
 4610 1da2 8986A800 	movl %eax,168(%esi)
 4610      0000
1276:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	network->beacon_interval = le16_to_cpu(beacon->beacon_interval);
1277:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	/* Where to pull this? beacon->listen_interval; */
1278:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	network->listen_interval = 0x0A;
1279:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	network->rates_len = network->rates_ex_len = 0;
1280:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	network->last_associate = 0;
1281:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	network->ssid_len = 0;
1282:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	network->flags = 0;
1283:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	network->atim_window = 0;
1284:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	network->erp_value = (network->capability & WLAN_CAPABILITY_IBSS) ?
 4611              	.loc 1 1284 0
 4612 1da8 83E202   	andl $2,%edx
 4613              	.loc 1 1276 0
 4614 1dab 668B4120 	movw 32(%ecx),%ax
 4615              	.loc 1 1284 0
 4616 1daf 83FA01   	cmpl $1,%edx
 4617              	.loc 1 1276 0
 4618 1db2 668986AC 	movw %ax,172(%esi)
 4618      000000
GAS LISTING  			page 187


 4619              	.loc 1 1284 0
 4620 1db9 19C0     	sbbl %eax,%eax
 4621 1dbb F7D0     	notl %eax
 4622 1dbd 83E003   	andl $3,%eax
 4623              	.loc 1 1278 0
 4624 1dc0 66C786AE 	movw $10,174(%esi)
 4624      0000000A 
 4624      00
 4625              	.loc 1 1279 0
 4626 1dc9 C6869300 	movb $0,147(%esi)
 4626      000000
 4627 1dd0 C6868200 	movb $0,130(%esi)
 4627      000000
 4628              	.loc 1 1280 0
 4629 1dd7 C786A000 	movl $0,160(%esi)
 4629      00000000 
 4629      0000
 4630              	.loc 1 1281 0
 4631 1de1 C6462800 	movb $0,40(%esi)
 4632              	.loc 1 1282 0
 4633 1de5 C7869C00 	movl $0,156(%esi)
 4633      00000000 
 4633      0000
 4634              	.loc 1 1283 0
 4635 1def 66C786B0 	movw $0,176(%esi)
 4635      00000000 
 4635      00
 4636              	.loc 1 1284 0
 4637 1df8 8886B200 	movb %al,178(%esi)
 4637      0000
1285:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	    0x3 : 0x0;
1286:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1287:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	if (stats->freq == IEEE80211_52GHZ_BAND) {
 4638              	.loc 1 1287 0
 4639 1dfe 807B0D02 	cmpb $2,13(%ebx)
 4640 1e02 7508     	jne .L1266
1288:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		/* for A band (No DS info) */
1289:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		network->channel = stats->received_channel;
 4641              	.loc 1 1289 0
 4642 1e04 8A430A   	movb 10(%ebx),%al
 4643 1e07 884606   	movb %al,6(%esi)
 4644 1e0a EB0A     	jmp .L1267
 4645              	.L1266:
1290:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	} else
1291:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		network->flags |= NETWORK_HAS_CCK;
 4646              	.loc 1 1291 0
 4647 1e0c C7869C00 	movl $4,156(%esi)
 4647      00000400 
 4647      0000
 4648              	.L1267:
1292:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1293:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	network->wpa_ie_len = 0;
 4649              	.loc 1 1293 0
 4650 1e16 C786F400 	movl $0,244(%esi)
 4650      00000000 
 4650      0000
1294:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	network->rsn_ie_len = 0;
GAS LISTING  			page 188


 4651              	.loc 1 1294 0
 4652 1e20 C7863801 	movl $0,312(%esi)
 4652      00000000 
 4652      0000
1295:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1296:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	if (ieee80211_parse_info_param
 4653              	.loc 1 1296 0
 4654 1e2a 56       	pushl %esi
 4655              	.LCFI389:
 4656 1e2b 668B430E 	movw 14(%ebx),%ax
 4657 1e2f 83E824   	subl $36,%eax
 4658 1e32 0FB7C0   	movzwl %ax,%eax
 4659 1e35 50       	pushl %eax
 4660              	.LCFI390:
 4661 1e36 8D4124   	leal 36(%ecx),%eax
 4662 1e39 50       	pushl %eax
 4663              	.LCFI391:
 4664 1e3a E8B4F4FF 	call ieee80211_parse_info_param
 4664      FF
 4665 1e3f 83C40C   	addl $12,%esp
 4666              	.LCFI392:
 4667 1e42 85C0     	testl %eax,%eax
1297:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	    (beacon->info_element, stats->len - sizeof(*beacon), network))
1298:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		return 1;
 4668              	.loc 1 1298 0
 4669 1e44 BA010000 	movl $1,%edx
 4669      00
 4670              	.loc 1 1296 0
 4671 1e49 0F85DA00 	jne .L1241
 4671      0000
1299:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1300:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	network->mode = 0;
 4672              	.loc 1 1300 0
 4673 1e4f C6869800 	movb $0,152(%esi)
 4673      000000
1301:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	if (stats->freq == IEEE80211_52GHZ_BAND)
 4674              	.loc 1 1301 0
 4675 1e56 807B0D02 	cmpb $2,13(%ebx)
 4676 1e5a 7509     	jne .L1269
1302:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		network->mode = IEEE_A;
 4677              	.loc 1 1302 0
 4678 1e5c C6869800 	movb $1,152(%esi)
 4678      000001
 4679 1e63 EB1C     	jmp .L1270
 4680              	.L1269:
1303:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	else {
1304:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		if (network->flags & NETWORK_HAS_OFDM)
 4681              	.loc 1 1304 0
 4682 1e65 8B869C00 	movl 156(%esi),%eax
 4682      0000
 4683 1e6b A802     	testb $2,%al
 4684 1e6d 7407     	je .L1271
1305:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			network->mode |= IEEE_G;
 4685              	.loc 1 1305 0
 4686 1e6f C6869800 	movb $4,152(%esi)
 4686      000004
 4687              	.L1271:
GAS LISTING  			page 189


1306:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		if (network->flags & NETWORK_HAS_CCK)
 4688              	.loc 1 1306 0
 4689 1e76 A804     	testb $4,%al
 4690 1e78 7407     	je .L1270
1307:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			network->mode |= IEEE_B;
 4691              	.loc 1 1307 0
 4692 1e7a 808E9800 	orb $2,152(%esi)
 4692      000002
 4693              	.L1270:
1308:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	}
1309:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1310:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	if (network->mode == 0) {
 4694              	.loc 1 1310 0
 4695 1e81 80BE9800 	cmpb $0,152(%esi)
 4695      000000
 4696 1e88 756B     	jne .L1273
1311:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		IEEE80211_DEBUG_SCAN("Filtered out '%s (" MAC_FMT ")' "
 4697              	.loc 1 1311 0
 4698 1e8a F6050000 	testb $4,ieee80211_debug_level
 4698      000004
 4699 1e91 745B     	je .L1274
 4700              	.LBB256:
 4701              	.LBB257:
 4702              	.loc 5 91 0
 4703 1e93 B800E0FF 	movl $-8192,%eax
 4703      FF
 4704              	
 4705 1e98 21E0     	andl %esp,%eax
 4706              	
 4707              	.LBE257:
 4708              	.LBE256:
 4709              	.loc 5 89 0
 4710 1e9a 8B4014   	movl 20(%eax),%eax
 4711 1e9d 2500FFFF 	andl $268435200,%eax
 4711      0F
 4712 1ea2 83F801   	cmpl $1,%eax
 4713 1ea5 0FB64605 	movzbl 5(%esi),%eax
 4714 1ea9 50       	pushl %eax
 4715              	.LCFI393:
 4716 1eaa 0FB64604 	movzbl 4(%esi),%eax
 4717 1eae 50       	pushl %eax
 4718              	.LCFI394:
 4719 1eaf 0FB64603 	movzbl 3(%esi),%eax
 4720 1eb3 50       	pushl %eax
 4721              	.LCFI395:
 4722 1eb4 0FB64602 	movzbl 2(%esi),%eax
 4723 1eb8 50       	pushl %eax
 4724              	.LCFI396:
 4725 1eb9 0FB64601 	movzbl 1(%esi),%eax
 4726 1ebd 50       	pushl %eax
 4727              	.LCFI397:
 4728 1ebe 0FB606   	movzbl (%esi),%eax
 4729 1ec1 50       	pushl %eax
 4730              	.LCFI398:
 4731 1ec2 0FB64628 	movzbl 40(%esi),%eax
 4732 1ec6 50       	pushl %eax
 4733              	.LCFI399:
GAS LISTING  			page 190


 4734 1ec7 8D4607   	leal 7(%esi),%eax
 4735 1eca 50       	pushl %eax
 4736              	.LCFI400:
 4737 1ecb 19DB     	sbbl %ebx,%ebx
 4738              	.LCFI401:
 4739 1ecd E8FCFFFF 	call escape_essid
 4739      FF
 4740 1ed2 59       	popl %ecx
 4741              	.LCFI402:
 4742 1ed3 5E       	popl %esi
 4743              	.LCFI403:
 4744 1ed4 50       	pushl %eax
 4745              	.LCFI404:
 4746 1ed5 83E30C   	andl $12,%ebx
 4747 1ed8 68BD0000 	pushl $__func__.8
 4747      00
 4748              	.LCFI405:
 4749 1edd 83C349   	addl $73,%ebx
 4750 1ee0 53       	pushl %ebx
 4751              	.LCFI406:
 4752 1ee1 685F0800 	pushl $.LC59
 4752      00
 4753              	.LCFI407:
 4754 1ee6 E8FCFFFF 	call printk
 4754      FF
 4755 1eeb 83C428   	addl $40,%esp
 4756              	.LCFI408:
 4757              	.L1274:
1312:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				     "network.\n",
1313:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				     escape_essid(network->ssid,
1314:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 						  network->ssid_len),
1315:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				     MAC_ARG(network->bssid));
1316:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		return 1;
 4758              	.loc 1 1316 0
 4759 1eee BA010000 	movl $1,%edx
 4759      00
 4760 1ef3 EB34     	jmp .L1241
 4761              	.L1273:
 4762              	.LBB258:
 4763              	.loc 2 1187 0
 4764 1ef5 0FB64628 	movzbl 40(%esi),%eax
 4765              	.LBB259:
 4766              	.loc 2 1189 0
 4767 1ef9 83F801   	cmpl $1,%eax
 4768              	.LBE259:
 4769              	.loc 2 1187 0
 4770 1efc 8D5607   	leal 7(%esi),%edx
 4771              	.LBB260:
 4772              	.loc 2 1189 0
 4773 1eff 7506     	jne .L1280
 4774 1f01 807E0720 	cmpb $32,7(%esi)
 4775 1f05 EB02     	jmp .L1313
 4776              	.L1280:
 4777              	.loc 2 1195 0
 4778 1f07 85C0     	testl %eax,%eax
 4779              	.L1313:
 4780 1f09 7409     	je .L1311
GAS LISTING  			page 191


 4781              	.loc 2 1194 0
 4782 1f0b 48       	decl %eax
 4783              	.loc 2 1195 0
 4784 1f0c 803C0200 	cmpb $0,(%edx,%eax)
 4785 1f10 7509     	jne .L1279
 4786 1f12 EBF3     	jmp .L1280
 4787              	.L1311:
 4788              	.LBE260:
 4789              	.LBE258:
1317:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	}
1318:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1319:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	if (ieee80211_is_empty_essid(network->ssid, network->ssid_len))
1320:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		network->flags |= NETWORK_EMPTY_ESSID;
 4790              	.loc 1 1320 0
 4791 1f14 838E9C00 	orl $1,156(%esi)
 4791      000001
 4792              	.L1279:
 4793              	.LBB261:
 4794              	.loc 4 227 0
 4795 1f1b 8D7E58   	leal 88(%esi),%edi
 4796              	.LBB262:
 4797              	.LBB263:
 4798              	.loc 4 252 0
 4799 1f1e B9070000 	movl $7,%ecx
 4799      00
 4800 1f23 89DE     	movl %ebx,%esi
 4801              	
 4802 1f25 F3A5     	rep
 4803              	
 4804              	.LBE263:
 4805              	.LBE262:
 4806              	.LBE261:
1321:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1322:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	memcpy(&network->stats, stats, sizeof(network->stats));
1323:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1324:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	return 0;
 4807              	.loc 1 1324 0
 4808 1f27 31D2     	xorl %edx,%edx
 4809              	.L1241:
1325:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** }
 4810              	.loc 1 1325 0
 4811 1f29 5B       	popl %ebx
 4812 1f2a 5E       	popl %esi
 4813 1f2b 89D0     	movl %edx,%eax
 4814 1f2d 5F       	popl %edi
 4815 1f2e C3       	ret
 4816              	.LFE940:
 4818              	.section .rodata
 4821              	__func__.9:
 4822 00d4 75706461 	.string "update_network"
 4822      74655F6E 
 4822      6574776F 
 4822      726B00
 4823              	.section .rodata.str1.1
 4824              	.LC60:
 4825 08af 3C373E69 	.string "<7>ieee80211: %c %s QoS the network %s is QoS supported\n"
 4825      65656538 
GAS LISTING  			page 192


 4825      30323131 
 4825      3A202563 
 4825      20257320 
 4826              	.LC61:
 4827 08e8 3C373E69 	.string "<7>ieee80211: %c %s QoS the network is QoS supported\n"
 4827      65656538 
 4827      30323131 
 4827      3A202563 
 4827      20257320 
 4828              	.text
 4830              	update_network:
 4831              	.LFB942:
1326:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1327:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** static inline int is_same_network(struct ieee80211_network *src,
1328:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				  struct ieee80211_network *dst)
1329:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** {
1330:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	/* A network is only a duplicate if the channel, BSSID, and ESSID
1331:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	 * all match.  We treat all <hidden> with the same BSSID and channel
1332:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	 * as one network */
1333:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	return ((src->ssid_len == dst->ssid_len) &&
1334:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		(src->channel == dst->channel) &&
1335:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		!compare_ether_addr(src->bssid, dst->bssid) &&
1336:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		!memcmp(src->ssid, dst->ssid, src->ssid_len));
1337:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** }
1338:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1339:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** static void update_network(struct ieee80211_network *dst,
1340:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				  struct ieee80211_network *src)
1341:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** {
 4832              	.loc 1 1341 0
 4833 1f2f 55       	pushl %ebp
 4834              	.LCFI409:
 4835 1f30 57       	pushl %edi
 4836              	.LCFI410:
 4837 1f31 56       	pushl %esi
 4838              	.LCFI411:
 4839 1f32 53       	pushl %ebx
 4840              	.LCFI412:
 4841              	.loc 1 1341 0
 4842 1f33 50       	pushl %eax
 4843              	.LCFI413:
 4844 1f34 50       	pushl %eax
 4845              	.LCFI414:
 4846 1f35 8B6C241C 	movl 28(%esp),%ebp
 4847 1f39 8B5C2420 	movl 32(%esp),%ebx
1342:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	int qos_active;
1343:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	u8 old_param;
1344:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1345:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	ieee80211_network_reset(dst);
 4848              	.loc 1 1345 0
 4849 1f3d 55       	pushl %ebp
 4850              	.LCFI415:
 4851              	.LCFI416:
 4852 1f3e E8FCFFFF 	call ieee80211_network_reset
 4852      FF
1346:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	dst->ibss_dfs = src->ibss_dfs;
 4853              	.loc 1 1346 0
 4854 1f43 8B834401 	movl 324(%ebx),%eax
GAS LISTING  			page 193


 4854      0000
 4855 1f49 89854401 	movl %eax,324(%ebp)
 4855      0000
 4856              	.loc 4 227 0
 4857 1f4f 58       	popl %eax
 4858              	.LCFI417:
 4859              	.LBB264:
 4860 1f50 8D7D58   	leal 88(%ebp),%edi
 4861 1f53 8D7358   	leal 88(%ebx),%esi
 4862              	.LBB265:
 4863              	.LBB266:
 4864              	.loc 4 252 0
 4865 1f56 B9070000 	movl $7,%ecx
 4865      00
 4866              	
 4867 1f5b F3A5     	rep
 4868              	
 4869              	.LBE266:
 4870              	.LBE265:
 4871              	.LBE264:
1347:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1348:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	memcpy(&dst->stats, &src->stats, sizeof(struct ieee80211_rx_stats));
1349:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	dst->capability = src->capability;
 4872              	.loc 1 1349 0
 4873 1f5d 668B4374 	movw 116(%ebx),%ax
 4874 1f61 66894574 	movw %ax,116(%ebp)
1350:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	memcpy(dst->rates, src->rates, src->rates_len);
 4875              	.loc 1 1350 0
 4876 1f65 0FB68382 	movzbl 130(%ebx),%eax
 4876      000000
 4877              	.LBB267:
 4878              	.LBB268:
 4879              	.loc 4 207 0
 4880 1f6c 89C1     	movl %eax,%ecx
 4881 1f6e 8D7D76   	leal 118(%ebp),%edi
 4882 1f71 8D7376   	leal 118(%ebx),%esi
 4883 1f74 C1E902   	shrl $2,%ecx
 4884              	
 4885 1f77 F3A5     	rep
 4886 1f79 89C1     	movl %eax,%ecx
 4887 1f7b 83E103   	andl $3,%ecx
 4888 1f7e 7402     	jz 1f
 4889 1f80 F3A4     	rep
 4890              	1:
 4891              	
 4892              	.LBE268:
 4893              	.LBE267:
1351:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	dst->rates_len = src->rates_len;
 4894              	.loc 1 1351 0
 4895 1f82 8A838200 	movb 130(%ebx),%al
 4895      0000
 4896 1f88 88858200 	movb %al,130(%ebp)
 4896      0000
1352:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	memcpy(dst->rates_ex, src->rates_ex, src->rates_ex_len);
 4897              	.loc 1 1352 0
 4898 1f8e 0FB68393 	movzbl 147(%ebx),%eax
 4898      000000
GAS LISTING  			page 194


 4899              	.LBB269:
 4900              	.LBB270:
 4901              	.loc 4 207 0
 4902 1f95 89C1     	movl %eax,%ecx
 4903 1f97 8DBD8300 	leal 131(%ebp),%edi
 4903      0000
 4904 1f9d 8DB38300 	leal 131(%ebx),%esi
 4904      0000
 4905 1fa3 C1E902   	shrl $2,%ecx
 4906              	
 4907 1fa6 F3A5     	rep
 4908 1fa8 89C1     	movl %eax,%ecx
 4909 1faa 83E103   	andl $3,%ecx
 4910 1fad 7402     	jz 1f
 4911 1faf F3A4     	rep
 4912              	1:
 4913              	
 4914              	.LBE270:
 4915              	.LBE269:
1353:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	dst->rates_ex_len = src->rates_ex_len;
 4916              	.loc 1 1353 0
 4917 1fb1 8A839300 	movb 147(%ebx),%al
 4917      0000
 4918 1fb7 88859300 	movb %al,147(%ebp)
 4918      0000
1354:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1355:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	dst->mode = src->mode;
 4919              	.loc 1 1355 0
 4920 1fbd 8A839800 	movb 152(%ebx),%al
 4920      0000
 4921 1fc3 88859800 	movb %al,152(%ebp)
 4921      0000
1356:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	dst->flags = src->flags;
 4922              	.loc 1 1356 0
 4923 1fc9 8B839C00 	movl 156(%ebx),%eax
 4923      0000
 4924 1fcf 89859C00 	movl %eax,156(%ebp)
 4924      0000
1357:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	dst->time_stamp[0] = src->time_stamp[0];
 4925              	.loc 1 1357 0
 4926 1fd5 8B83A400 	movl 164(%ebx),%eax
 4926      0000
 4927 1fdb 8985A400 	movl %eax,164(%ebp)
 4927      0000
1358:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	dst->time_stamp[1] = src->time_stamp[1];
 4928              	.loc 1 1358 0
 4929 1fe1 8B83A800 	movl 168(%ebx),%eax
 4929      0000
 4930 1fe7 8985A800 	movl %eax,168(%ebp)
 4930      0000
1359:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1360:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	dst->beacon_interval = src->beacon_interval;
 4931              	.loc 1 1360 0
 4932 1fed 668B83AC 	movw 172(%ebx),%ax
 4932      000000
 4933 1ff4 668985AC 	movw %ax,172(%ebp)
 4933      000000
GAS LISTING  			page 195


1361:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	dst->listen_interval = src->listen_interval;
 4934              	.loc 1 1361 0
 4935 1ffb 668B83AE 	movw 174(%ebx),%ax
 4935      000000
 4936 2002 668985AE 	movw %ax,174(%ebp)
 4936      000000
1362:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	dst->atim_window = src->atim_window;
 4937              	.loc 1 1362 0
 4938 2009 668B83B0 	movw 176(%ebx),%ax
 4938      000000
 4939 2010 668985B0 	movw %ax,176(%ebp)
 4939      000000
1363:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	dst->erp_value = src->erp_value;
 4940              	.loc 1 1363 0
 4941 2017 8A83B200 	movb 178(%ebx),%al
 4941      0000
 4942 201d 8885B200 	movb %al,178(%ebp)
 4942      0000
1364:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	dst->tim = src->tim;
 4943              	.loc 1 1364 0
 4944 2023 668B833C 	movw 316(%ebx),%ax
 4944      010000
 4945 202a 6689853C 	movw %ax,316(%ebp)
 4945      010000
 4946 2031 8B83F400 	movl 244(%ebx),%eax
 4946      0000
 4947              	.LBB271:
 4948              	.LBB272:
 4949              	.loc 4 207 0
 4950 2037 89C1     	movl %eax,%ecx
 4951 2039 8DBDB300 	leal 179(%ebp),%edi
 4951      0000
 4952 203f 8DB3B300 	leal 179(%ebx),%esi
 4952      0000
 4953 2045 C1E902   	shrl $2,%ecx
 4954              	
 4955 2048 F3A5     	rep
 4956 204a 89C1     	movl %eax,%ecx
 4957 204c 83E103   	andl $3,%ecx
 4958 204f 7402     	jz 1f
 4959 2051 F3A4     	rep
 4960              	1:
 4961              	
 4962              	.LBE272:
 4963              	.LBE271:
1365:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1366:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	memcpy(dst->wpa_ie, src->wpa_ie, src->wpa_ie_len);
1367:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	dst->wpa_ie_len = src->wpa_ie_len;
 4964              	.loc 1 1367 0
 4965 2053 8B83F400 	movl 244(%ebx),%eax
 4965      0000
 4966 2059 8985F400 	movl %eax,244(%ebp)
 4966      0000
 4967 205f 8B833801 	movl 312(%ebx),%eax
 4967      0000
 4968              	.LBB273:
 4969              	.LBB274:
GAS LISTING  			page 196


 4970              	.loc 4 207 0
 4971 2065 89C1     	movl %eax,%ecx
 4972 2067 8DBDF800 	leal 248(%ebp),%edi
 4972      0000
 4973 206d 8DB3F800 	leal 248(%ebx),%esi
 4973      0000
 4974 2073 C1E902   	shrl $2,%ecx
 4975              	
 4976 2076 F3A5     	rep
 4977 2078 89C1     	movl %eax,%ecx
 4978 207a 83E103   	andl $3,%ecx
 4979 207d 7402     	jz 1f
 4980 207f F3A4     	rep
 4981              	1:
 4982              	
 4983              	.LBE274:
 4984              	.LBE273:
1368:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	memcpy(dst->rsn_ie, src->rsn_ie, src->rsn_ie_len);
1369:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	dst->rsn_ie_len = src->rsn_ie_len;
 4985              	.loc 1 1369 0
 4986 2081 8B833801 	movl 312(%ebx),%eax
 4986      0000
 4987 2087 89853801 	movl %eax,312(%ebp)
 4987      0000
1370:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1371:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	dst->last_scanned = jiffies;
 4988              	.loc 1 1371 0
 4989 208d A1000000 	movl jiffies,%eax
 4989      00
 4990 2092 89859400 	movl %eax,148(%ebp)
 4990      0000
1372:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	qos_active = src->qos_data.active;
 4991              	.loc 1 1372 0
 4992 2098 8B434C   	movl 76(%ebx),%eax
 4993 209b 89442404 	movl %eax,4(%esp)
1373:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	old_param = dst->qos_data.old_param_count;
 4994              	.loc 1 1373 0
 4995 209f 8A4555   	movb 85(%ebp),%al
 4996 20a2 88442403 	movb %al,3(%esp)
1374:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	if (dst->flags & NETWORK_HAS_QOS_MASK)
 4997              	.loc 1 1374 0
 4998 20a6 F6859C00 	testb $24,156(%ebp)
 4998      000018
 4999 20ad 740F     	je .L1437
 5000              	.LBB275:
 5001              	.loc 4 227 0
 5002 20af 8D7D2C   	leal 44(%ebp),%edi
 5003 20b2 8D732C   	leal 44(%ebx),%esi
 5004              	.LBB276:
 5005              	.LBB277:
 5006              	.loc 4 252 0
 5007 20b5 B90B0000 	movl $11,%ecx
 5007      00
 5008              	
 5009 20ba F3A5     	rep
 5010              	
 5011              	.LBE277:
GAS LISTING  			page 197


 5012              	.loc 4 269 0
 5013 20bc EB0C     	jmp .L1460
 5014              	.LCFI418:
 5015              	.L1437:
 5016              	.LBE276:
 5017              	.LBE275:
1375:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		memcpy(&dst->qos_data, &src->qos_data,
1376:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		       sizeof(struct ieee80211_qos_data));
1377:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	else {
1378:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		dst->qos_data.supported = src->qos_data.supported;
 5018              	.loc 1 1378 0
 5019 20be 8B4350   	movl 80(%ebx),%eax
 5020 20c1 894550   	movl %eax,80(%ebp)
1379:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		dst->qos_data.param_count = src->qos_data.param_count;
 5021              	.loc 1 1379 0
 5022 20c4 8A4354   	movb 84(%ebx),%al
 5023 20c7 884554   	movb %al,84(%ebp)
 5024              	.L1460:
1380:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	}
1381:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1382:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	if (dst->qos_data.supported == 1) {
 5025              	.loc 1 1382 0
 5026 20ca 837D5001 	cmpl $1,80(%ebp)
 5027 20ce 7573     	jne .L1461
1383:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		if (dst->ssid_len)
 5028              	.loc 1 1383 0
 5029 20d0 807D2800 	cmpb $0,40(%ebp)
 5030 20d4 A1000000 	movl ieee80211_debug_level,%eax
 5030      00
 5031 20d9 7437     	je .L1462
1384:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			IEEE80211_DEBUG_QOS
 5032              	.loc 1 1384 0
 5033 20db 85C0     	testl %eax,%eax
 5034 20dd 7964     	jns .L1461
 5035              	.LBB278:
 5036              	.LBB279:
 5037              	.loc 5 91 0
 5038 20df B800E0FF 	movl $-8192,%eax
 5038      FF
 5039              	
 5040 20e4 21E0     	andl %esp,%eax
 5041              	
 5042              	.LBE279:
 5043              	.LBE278:
 5044              	.loc 5 89 0
 5045 20e6 8B4014   	movl 20(%eax),%eax
 5046 20e9 2500FFFF 	andl $268435200,%eax
 5046      0F
 5047 20ee 83F801   	cmpl $1,%eax
 5048 20f1 19C0     	sbbl %eax,%eax
 5049 20f3 8D5507   	leal 7(%ebp),%edx
 5050 20f6 52       	pushl %edx
 5051              	.LCFI419:
 5052 20f7 83E00C   	andl $12,%eax
 5053 20fa 68D40000 	pushl $__func__.9
 5053      00
 5054              	.LCFI420:
GAS LISTING  			page 198


 5055 20ff 83C049   	addl $73,%eax
 5056 2102 50       	pushl %eax
 5057              	.LCFI421:
 5058 2103 68AF0800 	pushl $.LC60
 5058      00
 5059              	.LCFI422:
 5060 2108 E8FCFFFF 	call printk
 5060      FF
 5061 210d 83C410   	addl $16,%esp
 5062              	.LCFI423:
 5063 2110 EB31     	jmp .L1461
 5064              	.L1462:
1385:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			    ("QoS the network %s is QoS supported\n",
1386:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			     dst->ssid);
1387:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		else
1388:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			IEEE80211_DEBUG_QOS
 5065              	.loc 1 1388 0
 5066 2112 85C0     	testl %eax,%eax
 5067 2114 792D     	jns .L1461
 5068              	.LBB280:
 5069              	.LBB281:
 5070              	.loc 5 91 0
 5071 2116 B800E0FF 	movl $-8192,%eax
 5071      FF
 5072              	
 5073 211b 21E0     	andl %esp,%eax
 5074              	
 5075              	.LBE281:
 5076              	.LBE280:
 5077              	.loc 5 89 0
 5078 211d 8B4014   	movl 20(%eax),%eax
 5079 2120 2500FFFF 	andl $268435200,%eax
 5079      0F
 5080 2125 83F801   	cmpl $1,%eax
 5081 2128 19C0     	sbbl %eax,%eax
 5082 212a 83E00C   	andl $12,%eax
 5083 212d 68D40000 	pushl $__func__.9
 5083      00
 5084              	.LCFI424:
 5085 2132 83C049   	addl $73,%eax
 5086 2135 50       	pushl %eax
 5087              	.LCFI425:
 5088 2136 68E80800 	pushl $.LC61
 5088      00
 5089              	.LCFI426:
 5090 213b E8FCFFFF 	call printk
 5090      FF
 5091 2140 83C40C   	addl $12,%esp
 5092              	.LCFI427:
 5093              	.L1461:
1389:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			    ("QoS the network is QoS supported\n");
1390:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	}
1391:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	dst->qos_data.active = qos_active;
 5094              	.loc 1 1391 0
 5095 2143 8B442404 	movl 4(%esp),%eax
 5096 2147 89454C   	movl %eax,76(%ebp)
1392:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	dst->qos_data.old_param_count = old_param;
GAS LISTING  			page 199


 5097              	.loc 1 1392 0
 5098 214a 8A442403 	movb 3(%esp),%al
 5099 214e 884555   	movb %al,85(%ebp)
 5100 2151 5F       	popl %edi
 5101              	.LCFI428:
 5102 2152 5D       	popl %ebp
 5103              	.LCFI429:
 5104 2153 5B       	popl %ebx
 5105 2154 5E       	popl %esi
 5106 2155 5F       	popl %edi
 5107 2156 5D       	popl %ebp
 5108 2157 C3       	ret
 5109              	.LFE942:
 5111              	.section .rodata
 5112 00e3 00000000 	.align 32
 5112      00000000 
 5112      00000000 
 5112      00000000 
 5112      00000000 
 5115              	__func__.10:
 5116 0100 69656565 	.string "ieee80211_process_probe_response"
 5116      38303231 
 5116      315F7072 
 5116      6F636573 
 5116      735F7072 
 5117              	.section .rodata.str1.1
 5118              	.LC62:
 5119 091e 3C373E69 	.string "<7>ieee80211: %c %s '%s' (%02x:%02x:%02x:%02x:%02x:%02x): %c%c%c%c %c%c%c%c-%c%c%c%c %c%c%c%c\n"
 5119      65656538 
 5119      30323131 
 5119      3A202563 
 5119      20257320 
 5120              	.LC63:
 5121 097d 42454143 	.string "BEACON"
 5121      4F4E00
 5122              	.LC64:
 5123 0984 50524F42 	.string "PROBE RESPONSE"
 5123      45205245 
 5123      53504F4E 
 5123      534500
 5124              	.LC65:
 5125 0993 3C373E69 	.string "<7>ieee80211: %c %s Dropped '%s' (%02x:%02x:%02x:%02x:%02x:%02x) via %s.\n"
 5125      65656538 
 5125      30323131 
 5125      3A202563 
 5125      20257320 
 5126              	.LC66:
 5127 09dd 3C373E69 	.string "<7>ieee80211: %c %s Expired '%s' (%02x:%02x:%02x:%02x:%02x:%02x) from network list.\n"
 5127      65656538 
 5127      30323131 
 5127      3A202563 
 5127      20257320 
 5128              	.LC67:
 5129 0a32 3C373E69 	.string "<7>ieee80211: %c %s Adding '%s' (%02x:%02x:%02x:%02x:%02x:%02x) via %s.\n"
 5129      65656538 
 5129      30323131 
 5129      3A202563 
GAS LISTING  			page 200


 5129      20257320 
 5130              	.LC68:
 5131 0a7b 3C373E69 	.string "<7>ieee80211: %c %s Updating '%s' (%02x:%02x:%02x:%02x:%02x:%02x) via %s.\n"
 5131      65656538 
 5131      30323131 
 5131      3A202563 
 5131      20257320 
 5132              	.text
 5134              	ieee80211_process_probe_response:
 5135              	.LFB944:
1393:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1394:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	/* dst->last_associate is not overwritten */
1395:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** }
1396:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1397:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** static inline int is_beacon(int fc)
1398:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** {
1399:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	return (WLAN_FC_GET_STYPE(le16_to_cpu(fc)) == IEEE80211_STYPE_BEACON);
1400:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** }
1401:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1402:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** static void ieee80211_process_probe_response(struct ieee80211_device
1403:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 						    *ieee, struct
1404:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 						    ieee80211_probe_response
1405:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 						    *beacon, struct ieee80211_rx_stats
1406:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 						    *stats)
1407:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** {
 5136              	.loc 1 1407 0
 5137 2158 55       	pushl %ebp
 5138              	.LCFI430:
 5139 2159 57       	pushl %edi
 5140              	.LCFI431:
 5141 215a 56       	pushl %esi
 5142              	.LCFI432:
 5143 215b 53       	pushl %ebx
 5144              	.LCFI433:
 5145 215c 81EC6801 	subl $360,%esp
 5145      0000
 5146              	.LCFI434:
1408:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	struct net_device *dev = ieee->dev;
 5147              	.loc 1 1408 0
 5148 2162 8B84247C 	movl 380(%esp),%eax
 5148      010000
 5149 2169 8B00     	movl (%eax),%eax
 5150 216b 89442404 	movl %eax,4(%esp)
1409:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	struct ieee80211_network network = {
 5151              	.loc 1 1409 0
 5152 216f 8D6C2408 	leal 8(%esp),%ebp
 5153 2173 68580100 	pushl $344
 5153      00
 5154              	.LCFI435:
 5155 2178 6A00     	pushl $0
 5156              	.LCFI436:
 5157 217a 55       	pushl %ebp
 5158              	.LCFI437:
 5159 217b E8FCFFFF 	call memset
 5159      FF
1410:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		.ibss_dfs = NULL,
1411:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	};
GAS LISTING  			page 201


1412:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	struct ieee80211_network *target;
1413:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	struct ieee80211_network *oldest = NULL;
1414:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** #ifdef CONFIG_IEEE80211_DEBUG
1415:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	struct ieee80211_info_element *info_element = beacon->info_element;
 5160              	.loc 1 1415 0
 5161 2180 8BB4248C 	movl 396(%esp),%esi
 5161      010000
 5162              	.loc 1 1413 0
 5163 2187 31FF     	xorl %edi,%edi
 5164              	.loc 1 1415 0
 5165 2189 83C624   	addl $36,%esi
1416:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** #endif
1417:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	unsigned long flags;
1418:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1419:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	IEEE80211_DEBUG_SCAN("'%s' (" MAC_FMT
 5166              	.loc 1 1419 0
 5167 218c 83C40C   	addl $12,%esp
 5168              	.LCFI438:
 5169 218f F6050000 	testb $4,ieee80211_debug_level
 5169      000004
 5170 2196 0F845A01 	je .L1475
 5170      0000
 5171              	.loc 5 89 0
 5172 219c 8B942480 	movl 384(%esp),%edx
 5172      010000
 5173              	.LBB282:
 5174              	.LBB283:
 5175              	.loc 5 91 0
 5176 21a3 B800E0FF 	movl $-8192,%eax
 5176      FF
 5177              	
 5178 21a8 21E0     	andl %esp,%eax
 5179              	
 5180              	.LBE283:
 5181              	.LBE282:
 5182              	.loc 5 89 0
 5183 21aa 8B4014   	movl 20(%eax),%eax
 5184 21ad 0FBF4A22 	movswl 34(%edx),%ecx
 5185 21b1 2500FFFF 	andl $268435200,%eax
 5185      0F
 5186 21b6 0FB7D1   	movzwl %cx,%edx
 5187 21b9 83F801   	cmpl $1,%eax
 5188 21bc 19DB     	sbbl %ebx,%ebx
 5189 21be 89D0     	movl %edx,%eax
 5190 21c0 83E30C   	andl $12,%ebx
 5191 21c3 83E001   	andl $1,%eax
 5192 21c6 83C349   	addl $73,%ebx
 5193 21c9 83F801   	cmpl $1,%eax
 5194 21cc 19C0     	sbbl %eax,%eax
 5195 21ce 83C031   	addl $49,%eax
 5196 21d1 50       	pushl %eax
 5197              	.LCFI439:
 5198 21d2 89D0     	movl %edx,%eax
 5199 21d4 83E002   	andl $2,%eax
 5200 21d7 83F801   	cmpl $1,%eax
 5201 21da 19C0     	sbbl %eax,%eax
 5202 21dc 83C031   	addl $49,%eax
GAS LISTING  			page 202


 5203 21df 50       	pushl %eax
 5204              	.LCFI440:
 5205 21e0 89D0     	movl %edx,%eax
 5206 21e2 83E004   	andl $4,%eax
 5207 21e5 83F801   	cmpl $1,%eax
 5208 21e8 19C0     	sbbl %eax,%eax
 5209 21ea 83C031   	addl $49,%eax
 5210 21ed 50       	pushl %eax
 5211              	.LCFI441:
 5212 21ee 89D0     	movl %edx,%eax
 5213 21f0 83E008   	andl $8,%eax
 5214 21f3 83F801   	cmpl $1,%eax
 5215 21f6 19C0     	sbbl %eax,%eax
 5216 21f8 83C031   	addl $49,%eax
 5217 21fb 50       	pushl %eax
 5218              	.LCFI442:
 5219 21fc 89D0     	movl %edx,%eax
 5220 21fe 83E010   	andl $16,%eax
 5221 2201 83F801   	cmpl $1,%eax
 5222 2204 19C0     	sbbl %eax,%eax
 5223 2206 83C031   	addl $49,%eax
 5224 2209 50       	pushl %eax
 5225              	.LCFI443:
 5226 220a 89D0     	movl %edx,%eax
 5227 220c 83E020   	andl $32,%eax
 5228 220f 83F801   	cmpl $1,%eax
 5229 2212 19C0     	sbbl %eax,%eax
 5230 2214 83C031   	addl $49,%eax
 5231 2217 50       	pushl %eax
 5232              	.LCFI444:
 5233 2218 89D0     	movl %edx,%eax
 5234 221a 83E040   	andl $64,%eax
 5235 221d 83F801   	cmpl $1,%eax
 5236 2220 19C0     	sbbl %eax,%eax
 5237 2222 83C031   	addl $49,%eax
 5238 2225 50       	pushl %eax
 5239              	.LCFI445:
 5240 2226 88C8     	movb %cl,%al
 5241 2228 83E080   	andl $-128,%eax
 5242 222b 3C01     	cmpb $1,%al
 5243 222d 19C0     	sbbl %eax,%eax
 5244 222f 83C031   	addl $49,%eax
 5245 2232 50       	pushl %eax
 5246              	.LCFI446:
 5247 2233 89D0     	movl %edx,%eax
 5248 2235 25000100 	andl $256,%eax
 5248      00
 5249 223a 83F801   	cmpl $1,%eax
 5250 223d 19C0     	sbbl %eax,%eax
 5251 223f 83C031   	addl $49,%eax
 5252 2242 50       	pushl %eax
 5253              	.LCFI447:
 5254 2243 89D0     	movl %edx,%eax
 5255 2245 25000200 	andl $512,%eax
 5255      00
 5256 224a 83F801   	cmpl $1,%eax
 5257 224d 19C0     	sbbl %eax,%eax
GAS LISTING  			page 203


 5258 224f 83C031   	addl $49,%eax
 5259 2252 50       	pushl %eax
 5260              	.LCFI448:
 5261 2253 89D0     	movl %edx,%eax
 5262 2255 25000400 	andl $1024,%eax
 5262      00
 5263 225a 83F801   	cmpl $1,%eax
 5264 225d 19C0     	sbbl %eax,%eax
 5265 225f 83C031   	addl $49,%eax
 5266 2262 50       	pushl %eax
 5267              	.LCFI449:
 5268 2263 89D0     	movl %edx,%eax
 5269 2265 25000800 	andl $2048,%eax
 5269      00
 5270 226a 83F801   	cmpl $1,%eax
 5271 226d 19C0     	sbbl %eax,%eax
 5272 226f 83C031   	addl $49,%eax
 5273 2272 50       	pushl %eax
 5274              	.LCFI450:
 5275 2273 89D0     	movl %edx,%eax
 5276 2275 25001000 	andl $4096,%eax
 5276      00
 5277 227a 83F801   	cmpl $1,%eax
 5278 227d 19C0     	sbbl %eax,%eax
 5279 227f 83C031   	addl $49,%eax
 5280 2282 50       	pushl %eax
 5281              	.LCFI451:
 5282 2283 89D0     	movl %edx,%eax
 5283 2285 25002000 	andl $8192,%eax
 5283      00
 5284 228a 83F801   	cmpl $1,%eax
 5285 228d 19C0     	sbbl %eax,%eax
 5286 228f 81E20040 	andl $16384,%edx
 5286      0000
 5287 2295 83C031   	addl $49,%eax
 5288 2298 83FA01   	cmpl $1,%edx
 5289 229b 50       	pushl %eax
 5290              	.LCFI452:
 5291 229c 19C0     	sbbl %eax,%eax
 5292 229e C1F91F   	sarl $31,%ecx
 5293 22a1 83C031   	addl $49,%eax
 5294 22a4 F7D1     	notl %ecx
 5295 22a6 50       	pushl %eax
 5296              	.LCFI453:
 5297 22a7 83C131   	addl $49,%ecx
 5298 22aa 51       	pushl %ecx
 5299              	.LCFI454:
 5300 22ab 8B9424C0 	movl 448(%esp),%edx
 5300      010000
 5301 22b2 0FB64215 	movzbl 21(%edx),%eax
 5302 22b6 50       	pushl %eax
 5303              	.LCFI455:
 5304 22b7 0FB64214 	movzbl 20(%edx),%eax
 5305 22bb 50       	pushl %eax
 5306              	.LCFI456:
 5307 22bc 0FB64213 	movzbl 19(%edx),%eax
 5308 22c0 50       	pushl %eax
GAS LISTING  			page 204


 5309              	.LCFI457:
 5310 22c1 0FB64212 	movzbl 18(%edx),%eax
 5311 22c5 50       	pushl %eax
 5312              	.LCFI458:
 5313 22c6 0FB64211 	movzbl 17(%edx),%eax
 5314 22ca 50       	pushl %eax
 5315              	.LCFI459:
 5316 22cb 0FB64210 	movzbl 16(%edx),%eax
 5317 22cf 50       	pushl %eax
 5318              	.LCFI460:
 5319 22d0 0FB64601 	movzbl 1(%esi),%eax
 5320 22d4 50       	pushl %eax
 5321              	.LCFI461:
 5322 22d5 89D0     	movl %edx,%eax
 5323 22d7 83C026   	addl $38,%eax
 5324 22da 50       	pushl %eax
 5325              	.LCFI462:
 5326              	.LCFI463:
 5327 22db E8FCFFFF 	call escape_essid
 5327      FF
 5328 22e0 59       	popl %ecx
 5329              	.LCFI464:
 5330 22e1 5A       	popl %edx
 5331              	.LCFI465:
 5332 22e2 50       	pushl %eax
 5333              	.LCFI466:
 5334 22e3 68000100 	pushl $__func__.10
 5334      00
 5335              	.LCFI467:
 5336 22e8 53       	pushl %ebx
 5337              	.LCFI468:
 5338 22e9 681E0900 	pushl $.LC62
 5338      00
 5339              	.LCFI469:
 5340 22ee E8FCFFFF 	call printk
 5340      FF
 5341 22f3 83C468   	addl $104,%esp
 5342              	.LCFI470:
 5343              	.L1475:
1420:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			     "): %c%c%c%c %c%c%c%c-%c%c%c%c %c%c%c%c\n",
1421:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			     escape_essid(info_element->data,
1422:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 					  info_element->len),
1423:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			     MAC_ARG(beacon->header.addr3),
1424:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			     (beacon->capability & (1 << 0xf)) ? '1' : '0',
1425:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			     (beacon->capability & (1 << 0xe)) ? '1' : '0',
1426:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			     (beacon->capability & (1 << 0xd)) ? '1' : '0',
1427:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			     (beacon->capability & (1 << 0xc)) ? '1' : '0',
1428:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			     (beacon->capability & (1 << 0xb)) ? '1' : '0',
1429:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			     (beacon->capability & (1 << 0xa)) ? '1' : '0',
1430:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			     (beacon->capability & (1 << 0x9)) ? '1' : '0',
1431:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			     (beacon->capability & (1 << 0x8)) ? '1' : '0',
1432:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			     (beacon->capability & (1 << 0x7)) ? '1' : '0',
1433:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			     (beacon->capability & (1 << 0x6)) ? '1' : '0',
1434:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			     (beacon->capability & (1 << 0x5)) ? '1' : '0',
1435:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			     (beacon->capability & (1 << 0x4)) ? '1' : '0',
1436:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			     (beacon->capability & (1 << 0x3)) ? '1' : '0',
1437:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			     (beacon->capability & (1 << 0x2)) ? '1' : '0',
GAS LISTING  			page 205


1438:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			     (beacon->capability & (1 << 0x1)) ? '1' : '0',
1439:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			     (beacon->capability & (1 << 0x0)) ? '1' : '0');
1440:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1441:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	if (ieee80211_network_init(ieee, beacon, &network, stats)) {
 5344              	.loc 1 1441 0
 5345 22f6 FFB42484 	pushl 388(%esp)
 5345      010000
 5346              	.LCFI471:
 5347 22fd 55       	pushl %ebp
 5348              	.LCFI472:
 5349 22fe FFB42488 	pushl 392(%esp)
 5349      010000
 5350              	.LCFI473:
 5351 2305 FFB42488 	pushl 392(%esp)
 5351      010000
 5352              	.LCFI474:
 5353 230c E840FAFF 	call ieee80211_network_init
 5353      FF
 5354 2311 83C410   	addl $16,%esp
 5355              	.LCFI475:
 5356 2314 85C0     	testl %eax,%eax
 5357 2316 0F849400 	je .L1512
 5357      0000
1442:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		IEEE80211_DEBUG_SCAN("Dropped '%s' (" MAC_FMT ") via %s.\n",
 5358              	.loc 1 1442 0
 5359 231c F6050000 	testb $4,ieee80211_debug_level
 5359      000004
 5360 2323 0F84C903 	je .L1474
 5360      0000
 5361              	.LBB284:
 5362              	.LBB285:
 5363              	.loc 1 1399 0
 5364 2329 8B942480 	movl 384(%esp),%edx
 5364      010000
 5365 2330 0FB702   	movzwl (%edx),%eax
 5366 2333 25F00000 	andl $240,%eax
 5366      00
 5367              	.LBE285:
 5368              	.LBE284:
 5369              	.loc 1 1398 0
 5370 2338 83C080   	addl $-128,%eax
 5371 233b BA7D0900 	movl $.LC63,%edx
 5371      00
 5372 2340 7405     	je .L1516
 5373 2342 BA840900 	movl $.LC64,%edx
 5373      00
 5374              	.L1516:
 5375              	.LBB286:
 5376              	.LBB287:
 5377              	.loc 5 91 0
 5378 2347 B800E0FF 	movl $-8192,%eax
 5378      FF
 5379              	
 5380 234c 21E0     	andl %esp,%eax
 5381              	
 5382              	.LBE287:
 5383              	.LBE286:
GAS LISTING  			page 206


 5384              	.loc 5 89 0
 5385 234e 8B4014   	movl 20(%eax),%eax
 5386 2351 52       	pushl %edx
 5387              	.LCFI476:
 5388 2352 8B942484 	movl 388(%esp),%edx
 5388      010000
 5389 2359 2500FFFF 	andl $268435200,%eax
 5389      0F
 5390 235e 83F801   	cmpl $1,%eax
 5391 2361 0FB64215 	movzbl 21(%edx),%eax
 5392 2365 50       	pushl %eax
 5393              	.LCFI477:
 5394 2366 0FB64214 	movzbl 20(%edx),%eax
 5395 236a 50       	pushl %eax
 5396              	.LCFI478:
 5397 236b 0FB64213 	movzbl 19(%edx),%eax
 5398 236f 50       	pushl %eax
 5399              	.LCFI479:
 5400 2370 0FB64212 	movzbl 18(%edx),%eax
 5401 2374 50       	pushl %eax
 5402              	.LCFI480:
 5403 2375 0FB64211 	movzbl 17(%edx),%eax
 5404 2379 50       	pushl %eax
 5405              	.LCFI481:
 5406 237a 0FB64210 	movzbl 16(%edx),%eax
 5407 237e 50       	pushl %eax
 5408              	.LCFI482:
 5409 237f 0FB64601 	movzbl 1(%esi),%eax
 5410 2383 50       	pushl %eax
 5411              	.LCFI483:
 5412 2384 8D4602   	leal 2(%esi),%eax
 5413 2387 50       	pushl %eax
 5414              	.LCFI484:
 5415 2388 19DB     	sbbl %ebx,%ebx
 5416              	.LCFI485:
 5417 238a E8FCFFFF 	call escape_essid
 5417      FF
 5418 238f 5D       	popl %ebp
 5419              	.LCFI486:
 5420 2390 5A       	popl %edx
 5421              	.LCFI487:
 5422 2391 50       	pushl %eax
 5423              	.LCFI488:
 5424 2392 83E30C   	andl $12,%ebx
 5425 2395 68000100 	pushl $__func__.10
 5425      00
 5426              	.LCFI489:
 5427 239a 83C349   	addl $73,%ebx
 5428 239d 53       	pushl %ebx
 5429              	.LCFI490:
 5430 239e 68930900 	pushl $.LC65
 5430      00
 5431              	.LCFI491:
 5432 23a3 E8FCFFFF 	call printk
 5432      FF
 5433 23a8 83C42C   	addl $44,%esp
 5434              	.LCFI492:
GAS LISTING  			page 207


1443:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				     escape_essid(info_element->data,
1444:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 						  info_element->len),
1445:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				     MAC_ARG(beacon->header.addr3),
1446:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				     is_beacon(le16_to_cpu
1447:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 					       (beacon->header.
1448:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 						frame_ctl)) ?
1449:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				     "BEACON" : "PROBE RESPONSE");
1450:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		return;
 5435              	.loc 1 1450 0
 5436 23ab E9420300 	jmp .L1474
 5436      00
 5437              	.L1512:
1451:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	}
1452:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1453:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	/* The network parsed correctly -- so now we scan our known networks
1454:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	 * to see if we can find it in our list.
1455:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	 *
1456:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	 * NOTE:  This search is definitely not optimized.  Once its doing
1457:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	 *        the "right thing" we'll optimize it for efficiency if
1458:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	 *        necessary */
1459:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1460:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	/* Search for this entry in the list and update it if it is
1461:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	 * already there. */
1462:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1463:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	spin_lock_irqsave(&ieee->lock, flags);
 5438              	.loc 1 1463 0
 5439              	
 5440 23b0 9C8F0424 	pushfl
 5440      FA
 5441              	
 5442              	.LBB288:
1464:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1465:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	list_for_each_entry(target, &ieee->network_list, list) {
 5443              	.loc 1 1465 0
 5444 23b5 8B94247C 	movl 380(%esp),%edx
 5444      010000
 5445 23bc 8B82DC05 	movl 1500(%edx),%eax
 5445      0000
 5446              	.L1606:
 5447              	.LBE288:
 5448 23c2 8DA8B0FE 	leal -336(%eax),%ebp
 5448      FFFF
 5449              	.LBB289:
 5450              	.file 11 "include/asm/processor.h"
   1:include/asm/processor.h **** /*
   2:include/asm/processor.h ****  * include/asm-i386/processor.h
   3:include/asm/processor.h ****  *
   4:include/asm/processor.h ****  * Copyright (C) 1994 Linus Torvalds
   5:include/asm/processor.h ****  */
   6:include/asm/processor.h **** 
   7:include/asm/processor.h **** #ifndef __ASM_I386_PROCESSOR_H
   8:include/asm/processor.h **** #define __ASM_I386_PROCESSOR_H
   9:include/asm/processor.h **** 
  10:include/asm/processor.h **** #include <asm/vm86.h>
  11:include/asm/processor.h **** #include <asm/math_emu.h>
  12:include/asm/processor.h **** #include <asm/segment.h>
  13:include/asm/processor.h **** #include <asm/page.h>
GAS LISTING  			page 208


  14:include/asm/processor.h **** #include <asm/types.h>
  15:include/asm/processor.h **** #include <asm/sigcontext.h>
  16:include/asm/processor.h **** #include <asm/cpufeature.h>
  17:include/asm/processor.h **** #include <asm/msr.h>
  18:include/asm/processor.h **** #include <asm/system.h>
  19:include/asm/processor.h **** #include <linux/cache.h>
  20:include/asm/processor.h **** #include <linux/config.h>
  21:include/asm/processor.h **** #include <linux/threads.h>
  22:include/asm/processor.h **** #include <asm/percpu.h>
  23:include/asm/processor.h **** 
  24:include/asm/processor.h **** /* flag for disabling the tsc */
  25:include/asm/processor.h **** extern int tsc_disable;
  26:include/asm/processor.h **** 
  27:include/asm/processor.h **** struct desc_struct {
  28:include/asm/processor.h **** 	unsigned long a,b;
  29:include/asm/processor.h **** };
  30:include/asm/processor.h **** 
  31:include/asm/processor.h **** #define desc_empty(desc) \
  32:include/asm/processor.h **** 		(!((desc)->a + (desc)->b))
  33:include/asm/processor.h **** 
  34:include/asm/processor.h **** #define desc_equal(desc1, desc2) \
  35:include/asm/processor.h **** 		(((desc1)->a == (desc2)->a) && ((desc1)->b == (desc2)->b))
  36:include/asm/processor.h **** /*
  37:include/asm/processor.h ****  * Default implementation of macro that returns current
  38:include/asm/processor.h ****  * instruction pointer ("program counter").
  39:include/asm/processor.h ****  */
  40:include/asm/processor.h **** #define current_text_addr() ({ void *pc; __asm__("movl $1f,%0\n1:":"=g" (pc)); pc; })
  41:include/asm/processor.h **** 
  42:include/asm/processor.h **** /*
  43:include/asm/processor.h ****  *  CPU type and hardware bug flags. Kept separately for each CPU.
  44:include/asm/processor.h ****  *  Members of this structure are referenced in head.S, so think twice
  45:include/asm/processor.h ****  *  before touching them. [mj]
  46:include/asm/processor.h ****  */
  47:include/asm/processor.h **** 
  48:include/asm/processor.h **** struct cpuinfo_x86 {
  49:include/asm/processor.h **** 	__u8	x86;		/* CPU family */
  50:include/asm/processor.h **** 	__u8	x86_vendor;	/* CPU vendor */
  51:include/asm/processor.h **** 	__u8	x86_model;
  52:include/asm/processor.h **** 	__u8	x86_mask;
  53:include/asm/processor.h **** 	char	wp_works_ok;	/* It doesn't on 386's */
  54:include/asm/processor.h **** 	char	hlt_works_ok;	/* Problems on some 486Dx4's and old 386's */
  55:include/asm/processor.h **** 	char	hard_math;
  56:include/asm/processor.h **** 	char	rfu;
  57:include/asm/processor.h ****        	int	cpuid_level;	/* Maximum supported CPUID level, -1=no CPUID */
  58:include/asm/processor.h **** 	unsigned long	x86_capability[NCAPINTS];
  59:include/asm/processor.h **** 	char	x86_vendor_id[16];
  60:include/asm/processor.h **** 	char	x86_model_id[64];
  61:include/asm/processor.h **** 	int 	x86_cache_size;  /* in KB - valid for CPUS which support this
  62:include/asm/processor.h **** 				    call  */
  63:include/asm/processor.h **** 	int 	x86_cache_alignment;	/* In bytes */
  64:include/asm/processor.h **** 	int	fdiv_bug;
  65:include/asm/processor.h **** 	int	f00f_bug;
  66:include/asm/processor.h **** 	int	coma_bug;
  67:include/asm/processor.h **** 	unsigned long loops_per_jiffy;
  68:include/asm/processor.h **** 	unsigned char x86_num_cores;
  69:include/asm/processor.h **** } __attribute__((__aligned__(SMP_CACHE_BYTES)));
  70:include/asm/processor.h **** 
GAS LISTING  			page 209


  71:include/asm/processor.h **** #define X86_VENDOR_INTEL 0
  72:include/asm/processor.h **** #define X86_VENDOR_CYRIX 1
  73:include/asm/processor.h **** #define X86_VENDOR_AMD 2
  74:include/asm/processor.h **** #define X86_VENDOR_UMC 3
  75:include/asm/processor.h **** #define X86_VENDOR_NEXGEN 4
  76:include/asm/processor.h **** #define X86_VENDOR_CENTAUR 5
  77:include/asm/processor.h **** #define X86_VENDOR_RISE 6
  78:include/asm/processor.h **** #define X86_VENDOR_TRANSMETA 7
  79:include/asm/processor.h **** #define X86_VENDOR_NSC 8
  80:include/asm/processor.h **** #define X86_VENDOR_NUM 9
  81:include/asm/processor.h **** #define X86_VENDOR_UNKNOWN 0xff
  82:include/asm/processor.h **** 
  83:include/asm/processor.h **** /*
  84:include/asm/processor.h ****  * capabilities of CPUs
  85:include/asm/processor.h ****  */
  86:include/asm/processor.h **** 
  87:include/asm/processor.h **** extern struct cpuinfo_x86 boot_cpu_data;
  88:include/asm/processor.h **** extern struct cpuinfo_x86 new_cpu_data;
  89:include/asm/processor.h **** extern struct tss_struct doublefault_tss;
  90:include/asm/processor.h **** DECLARE_PER_CPU(struct tss_struct, init_tss);
  91:include/asm/processor.h **** 
  92:include/asm/processor.h **** #ifdef CONFIG_SMP
  93:include/asm/processor.h **** extern struct cpuinfo_x86 cpu_data[];
  94:include/asm/processor.h **** #define current_cpu_data cpu_data[smp_processor_id()]
  95:include/asm/processor.h **** #else
  96:include/asm/processor.h **** #define cpu_data (&boot_cpu_data)
  97:include/asm/processor.h **** #define current_cpu_data boot_cpu_data
  98:include/asm/processor.h **** #endif
  99:include/asm/processor.h **** 
 100:include/asm/processor.h **** extern	int phys_proc_id[NR_CPUS];
 101:include/asm/processor.h **** extern	int cpu_core_id[NR_CPUS];
 102:include/asm/processor.h **** extern char ignore_fpu_irq;
 103:include/asm/processor.h **** 
 104:include/asm/processor.h **** extern void identify_cpu(struct cpuinfo_x86 *);
 105:include/asm/processor.h **** extern void print_cpu_info(struct cpuinfo_x86 *);
 106:include/asm/processor.h **** extern unsigned int init_intel_cacheinfo(struct cpuinfo_x86 *c);
 107:include/asm/processor.h **** 
 108:include/asm/processor.h **** #ifdef CONFIG_X86_HT
 109:include/asm/processor.h **** extern void detect_ht(struct cpuinfo_x86 *c);
 110:include/asm/processor.h **** #else
 111:include/asm/processor.h **** static inline void detect_ht(struct cpuinfo_x86 *c) {}
 112:include/asm/processor.h **** #endif
 113:include/asm/processor.h **** 
 114:include/asm/processor.h **** /*
 115:include/asm/processor.h ****  * EFLAGS bits
 116:include/asm/processor.h ****  */
 117:include/asm/processor.h **** #define X86_EFLAGS_CF	0x00000001 /* Carry Flag */
 118:include/asm/processor.h **** #define X86_EFLAGS_PF	0x00000004 /* Parity Flag */
 119:include/asm/processor.h **** #define X86_EFLAGS_AF	0x00000010 /* Auxillary carry Flag */
 120:include/asm/processor.h **** #define X86_EFLAGS_ZF	0x00000040 /* Zero Flag */
 121:include/asm/processor.h **** #define X86_EFLAGS_SF	0x00000080 /* Sign Flag */
 122:include/asm/processor.h **** #define X86_EFLAGS_TF	0x00000100 /* Trap Flag */
 123:include/asm/processor.h **** #define X86_EFLAGS_IF	0x00000200 /* Interrupt Flag */
 124:include/asm/processor.h **** #define X86_EFLAGS_DF	0x00000400 /* Direction Flag */
 125:include/asm/processor.h **** #define X86_EFLAGS_OF	0x00000800 /* Overflow Flag */
 126:include/asm/processor.h **** #define X86_EFLAGS_IOPL	0x00003000 /* IOPL mask */
 127:include/asm/processor.h **** #define X86_EFLAGS_NT	0x00004000 /* Nested Task */
GAS LISTING  			page 210


 128:include/asm/processor.h **** #define X86_EFLAGS_RF	0x00010000 /* Resume Flag */
 129:include/asm/processor.h **** #define X86_EFLAGS_VM	0x00020000 /* Virtual Mode */
 130:include/asm/processor.h **** #define X86_EFLAGS_AC	0x00040000 /* Alignment Check */
 131:include/asm/processor.h **** #define X86_EFLAGS_VIF	0x00080000 /* Virtual Interrupt Flag */
 132:include/asm/processor.h **** #define X86_EFLAGS_VIP	0x00100000 /* Virtual Interrupt Pending */
 133:include/asm/processor.h **** #define X86_EFLAGS_ID	0x00200000 /* CPUID detection flag */
 134:include/asm/processor.h **** 
 135:include/asm/processor.h **** /*
 136:include/asm/processor.h ****  * Generic CPUID function
 137:include/asm/processor.h ****  * clear %ecx since some cpus (Cyrix MII) do not set or clear %ecx
 138:include/asm/processor.h ****  * resulting in stale register contents being returned.
 139:include/asm/processor.h ****  */
 140:include/asm/processor.h **** static inline void cpuid(unsigned int op, unsigned int *eax, unsigned int *ebx, unsigned int *ecx, 
 141:include/asm/processor.h **** {
 142:include/asm/processor.h **** 	__asm__("cpuid"
 143:include/asm/processor.h **** 		: "=a" (*eax),
 144:include/asm/processor.h **** 		  "=b" (*ebx),
 145:include/asm/processor.h **** 		  "=c" (*ecx),
 146:include/asm/processor.h **** 		  "=d" (*edx)
 147:include/asm/processor.h **** 		: "0" (op), "c"(0));
 148:include/asm/processor.h **** }
 149:include/asm/processor.h **** 
 150:include/asm/processor.h **** /* Some CPUID calls want 'count' to be placed in ecx */
 151:include/asm/processor.h **** static inline void cpuid_count(int op, int count, int *eax, int *ebx, int *ecx,
 152:include/asm/processor.h **** 	       	int *edx)
 153:include/asm/processor.h **** {
 154:include/asm/processor.h **** 	__asm__("cpuid"
 155:include/asm/processor.h **** 		: "=a" (*eax),
 156:include/asm/processor.h **** 		  "=b" (*ebx),
 157:include/asm/processor.h **** 		  "=c" (*ecx),
 158:include/asm/processor.h **** 		  "=d" (*edx)
 159:include/asm/processor.h **** 		: "0" (op), "c" (count));
 160:include/asm/processor.h **** }
 161:include/asm/processor.h **** 
 162:include/asm/processor.h **** /*
 163:include/asm/processor.h ****  * CPUID functions returning a single datum
 164:include/asm/processor.h ****  */
 165:include/asm/processor.h **** static inline unsigned int cpuid_eax(unsigned int op)
 166:include/asm/processor.h **** {
 167:include/asm/processor.h **** 	unsigned int eax;
 168:include/asm/processor.h **** 
 169:include/asm/processor.h **** 	__asm__("cpuid"
 170:include/asm/processor.h **** 		: "=a" (eax)
 171:include/asm/processor.h **** 		: "0" (op)
 172:include/asm/processor.h **** 		: "bx", "cx", "dx");
 173:include/asm/processor.h **** 	return eax;
 174:include/asm/processor.h **** }
 175:include/asm/processor.h **** static inline unsigned int cpuid_ebx(unsigned int op)
 176:include/asm/processor.h **** {
 177:include/asm/processor.h **** 	unsigned int eax, ebx;
 178:include/asm/processor.h **** 
 179:include/asm/processor.h **** 	__asm__("cpuid"
 180:include/asm/processor.h **** 		: "=a" (eax), "=b" (ebx)
 181:include/asm/processor.h **** 		: "0" (op)
 182:include/asm/processor.h **** 		: "cx", "dx" );
 183:include/asm/processor.h **** 	return ebx;
 184:include/asm/processor.h **** }
GAS LISTING  			page 211


 185:include/asm/processor.h **** static inline unsigned int cpuid_ecx(unsigned int op)
 186:include/asm/processor.h **** {
 187:include/asm/processor.h **** 	unsigned int eax, ecx;
 188:include/asm/processor.h **** 
 189:include/asm/processor.h **** 	__asm__("cpuid"
 190:include/asm/processor.h **** 		: "=a" (eax), "=c" (ecx)
 191:include/asm/processor.h **** 		: "0" (op)
 192:include/asm/processor.h **** 		: "bx", "dx" );
 193:include/asm/processor.h **** 	return ecx;
 194:include/asm/processor.h **** }
 195:include/asm/processor.h **** static inline unsigned int cpuid_edx(unsigned int op)
 196:include/asm/processor.h **** {
 197:include/asm/processor.h **** 	unsigned int eax, edx;
 198:include/asm/processor.h **** 
 199:include/asm/processor.h **** 	__asm__("cpuid"
 200:include/asm/processor.h **** 		: "=a" (eax), "=d" (edx)
 201:include/asm/processor.h **** 		: "0" (op)
 202:include/asm/processor.h **** 		: "bx", "cx");
 203:include/asm/processor.h **** 	return edx;
 204:include/asm/processor.h **** }
 205:include/asm/processor.h **** 
 206:include/asm/processor.h **** #define load_cr3(pgdir) \
 207:include/asm/processor.h **** 	asm volatile("movl %0,%%cr3": :"r" (__pa(pgdir)))
 208:include/asm/processor.h **** 
 209:include/asm/processor.h **** 
 210:include/asm/processor.h **** /*
 211:include/asm/processor.h ****  * Intel CPU features in CR4
 212:include/asm/processor.h ****  */
 213:include/asm/processor.h **** #define X86_CR4_VME		0x0001	/* enable vm86 extensions */
 214:include/asm/processor.h **** #define X86_CR4_PVI		0x0002	/* virtual interrupts flag enable */
 215:include/asm/processor.h **** #define X86_CR4_TSD		0x0004	/* disable time stamp at ipl 3 */
 216:include/asm/processor.h **** #define X86_CR4_DE		0x0008	/* enable debugging extensions */
 217:include/asm/processor.h **** #define X86_CR4_PSE		0x0010	/* enable page size extensions */
 218:include/asm/processor.h **** #define X86_CR4_PAE		0x0020	/* enable physical address extensions */
 219:include/asm/processor.h **** #define X86_CR4_MCE		0x0040	/* Machine check enable */
 220:include/asm/processor.h **** #define X86_CR4_PGE		0x0080	/* enable global pages */
 221:include/asm/processor.h **** #define X86_CR4_PCE		0x0100	/* enable performance counters at ipl 3 */
 222:include/asm/processor.h **** #define X86_CR4_OSFXSR		0x0200	/* enable fast FPU save and restore */
 223:include/asm/processor.h **** #define X86_CR4_OSXMMEXCPT	0x0400	/* enable unmasked SSE exceptions */
 224:include/asm/processor.h **** 
 225:include/asm/processor.h **** /*
 226:include/asm/processor.h ****  * Save the cr4 feature set we're using (ie
 227:include/asm/processor.h ****  * Pentium 4MB enable and PPro Global page
 228:include/asm/processor.h ****  * enable), so that any CPU's that boot up
 229:include/asm/processor.h ****  * after us can get the correct flags.
 230:include/asm/processor.h ****  */
 231:include/asm/processor.h **** extern unsigned long mmu_cr4_features;
 232:include/asm/processor.h **** 
 233:include/asm/processor.h **** static inline void set_in_cr4 (unsigned long mask)
 234:include/asm/processor.h **** {
 235:include/asm/processor.h **** 	mmu_cr4_features |= mask;
 236:include/asm/processor.h **** 	__asm__("movl %%cr4,%%eax\n\t"
 237:include/asm/processor.h **** 		"orl %0,%%eax\n\t"
 238:include/asm/processor.h **** 		"movl %%eax,%%cr4\n"
 239:include/asm/processor.h **** 		: : "irg" (mask)
 240:include/asm/processor.h **** 		:"ax");
 241:include/asm/processor.h **** }
GAS LISTING  			page 212


 242:include/asm/processor.h **** 
 243:include/asm/processor.h **** static inline void clear_in_cr4 (unsigned long mask)
 244:include/asm/processor.h **** {
 245:include/asm/processor.h **** 	mmu_cr4_features &= ~mask;
 246:include/asm/processor.h **** 	__asm__("movl %%cr4,%%eax\n\t"
 247:include/asm/processor.h **** 		"andl %0,%%eax\n\t"
 248:include/asm/processor.h **** 		"movl %%eax,%%cr4\n"
 249:include/asm/processor.h **** 		: : "irg" (~mask)
 250:include/asm/processor.h **** 		:"ax");
 251:include/asm/processor.h **** }
 252:include/asm/processor.h **** 
 253:include/asm/processor.h **** /*
 254:include/asm/processor.h ****  *      NSC/Cyrix CPU configuration register indexes
 255:include/asm/processor.h ****  */
 256:include/asm/processor.h **** 
 257:include/asm/processor.h **** #define CX86_PCR0 0x20
 258:include/asm/processor.h **** #define CX86_GCR  0xb8
 259:include/asm/processor.h **** #define CX86_CCR0 0xc0
 260:include/asm/processor.h **** #define CX86_CCR1 0xc1
 261:include/asm/processor.h **** #define CX86_CCR2 0xc2
 262:include/asm/processor.h **** #define CX86_CCR3 0xc3
 263:include/asm/processor.h **** #define CX86_CCR4 0xe8
 264:include/asm/processor.h **** #define CX86_CCR5 0xe9
 265:include/asm/processor.h **** #define CX86_CCR6 0xea
 266:include/asm/processor.h **** #define CX86_CCR7 0xeb
 267:include/asm/processor.h **** #define CX86_PCR1 0xf0
 268:include/asm/processor.h **** #define CX86_DIR0 0xfe
 269:include/asm/processor.h **** #define CX86_DIR1 0xff
 270:include/asm/processor.h **** #define CX86_ARR_BASE 0xc4
 271:include/asm/processor.h **** #define CX86_RCR_BASE 0xdc
 272:include/asm/processor.h **** 
 273:include/asm/processor.h **** /*
 274:include/asm/processor.h ****  *      NSC/Cyrix CPU indexed register access macros
 275:include/asm/processor.h ****  */
 276:include/asm/processor.h **** 
 277:include/asm/processor.h **** #define getCx86(reg) ({ outb((reg), 0x22); inb(0x23); })
 278:include/asm/processor.h **** 
 279:include/asm/processor.h **** #define setCx86(reg, data) do { \
 280:include/asm/processor.h **** 	outb((reg), 0x22); \
 281:include/asm/processor.h **** 	outb((data), 0x23); \
 282:include/asm/processor.h **** } while (0)
 283:include/asm/processor.h **** 
 284:include/asm/processor.h **** static inline void __monitor(const void *eax, unsigned long ecx,
 285:include/asm/processor.h **** 		unsigned long edx)
 286:include/asm/processor.h **** {
 287:include/asm/processor.h **** 	/* "monitor %eax,%ecx,%edx;" */
 288:include/asm/processor.h **** 	asm volatile(
 289:include/asm/processor.h **** 		".byte 0x0f,0x01,0xc8;"
 290:include/asm/processor.h **** 		: :"a" (eax), "c" (ecx), "d"(edx));
 291:include/asm/processor.h **** }
 292:include/asm/processor.h **** 
 293:include/asm/processor.h **** static inline void __mwait(unsigned long eax, unsigned long ecx)
 294:include/asm/processor.h **** {
 295:include/asm/processor.h **** 	/* "mwait %eax,%ecx;" */
 296:include/asm/processor.h **** 	asm volatile(
 297:include/asm/processor.h **** 		".byte 0x0f,0x01,0xc9;"
 298:include/asm/processor.h **** 		: :"a" (eax), "c" (ecx));
GAS LISTING  			page 213


 299:include/asm/processor.h **** }
 300:include/asm/processor.h **** 
 301:include/asm/processor.h **** /* from system description table in BIOS.  Mostly for MCA use, but
 302:include/asm/processor.h **** others may find it useful. */
 303:include/asm/processor.h **** extern unsigned int machine_id;
 304:include/asm/processor.h **** extern unsigned int machine_submodel_id;
 305:include/asm/processor.h **** extern unsigned int BIOS_revision;
 306:include/asm/processor.h **** extern unsigned int mca_pentium_flag;
 307:include/asm/processor.h **** 
 308:include/asm/processor.h **** /* Boot loader type from the setup header */
 309:include/asm/processor.h **** extern int bootloader_type;
 310:include/asm/processor.h **** 
 311:include/asm/processor.h **** /*
 312:include/asm/processor.h ****  * User space process size: 3GB (default).
 313:include/asm/processor.h ****  */
 314:include/asm/processor.h **** #define TASK_SIZE	(PAGE_OFFSET)
 315:include/asm/processor.h **** 
 316:include/asm/processor.h **** /* This decides where the kernel will search for a free chunk of vm
 317:include/asm/processor.h ****  * space during mmap's.
 318:include/asm/processor.h ****  */
 319:include/asm/processor.h **** #define TASK_UNMAPPED_BASE	(PAGE_ALIGN(TASK_SIZE / 3))
 320:include/asm/processor.h **** 
 321:include/asm/processor.h **** #define HAVE_ARCH_PICK_MMAP_LAYOUT
 322:include/asm/processor.h **** 
 323:include/asm/processor.h **** /*
 324:include/asm/processor.h ****  * Size of io_bitmap.
 325:include/asm/processor.h ****  */
 326:include/asm/processor.h **** #define IO_BITMAP_BITS  65536
 327:include/asm/processor.h **** #define IO_BITMAP_BYTES (IO_BITMAP_BITS/8)
 328:include/asm/processor.h **** #define IO_BITMAP_LONGS (IO_BITMAP_BYTES/sizeof(long))
 329:include/asm/processor.h **** #define IO_BITMAP_OFFSET offsetof(struct tss_struct,io_bitmap)
 330:include/asm/processor.h **** #define INVALID_IO_BITMAP_OFFSET 0x8000
 331:include/asm/processor.h **** #define INVALID_IO_BITMAP_OFFSET_LAZY 0x9000
 332:include/asm/processor.h **** 
 333:include/asm/processor.h **** struct i387_fsave_struct {
 334:include/asm/processor.h **** 	long	cwd;
 335:include/asm/processor.h **** 	long	swd;
 336:include/asm/processor.h **** 	long	twd;
 337:include/asm/processor.h **** 	long	fip;
 338:include/asm/processor.h **** 	long	fcs;
 339:include/asm/processor.h **** 	long	foo;
 340:include/asm/processor.h **** 	long	fos;
 341:include/asm/processor.h **** 	long	st_space[20];	/* 8*10 bytes for each FP-reg = 80 bytes */
 342:include/asm/processor.h **** 	long	status;		/* software status information */
 343:include/asm/processor.h **** };
 344:include/asm/processor.h **** 
 345:include/asm/processor.h **** struct i387_fxsave_struct {
 346:include/asm/processor.h **** 	unsigned short	cwd;
 347:include/asm/processor.h **** 	unsigned short	swd;
 348:include/asm/processor.h **** 	unsigned short	twd;
 349:include/asm/processor.h **** 	unsigned short	fop;
 350:include/asm/processor.h **** 	long	fip;
 351:include/asm/processor.h **** 	long	fcs;
 352:include/asm/processor.h **** 	long	foo;
 353:include/asm/processor.h **** 	long	fos;
 354:include/asm/processor.h **** 	long	mxcsr;
 355:include/asm/processor.h **** 	long	mxcsr_mask;
GAS LISTING  			page 214


 356:include/asm/processor.h **** 	long	st_space[32];	/* 8*16 bytes for each FP-reg = 128 bytes */
 357:include/asm/processor.h **** 	long	xmm_space[32];	/* 8*16 bytes for each XMM-reg = 128 bytes */
 358:include/asm/processor.h **** 	long	padding[56];
 359:include/asm/processor.h **** } __attribute__ ((aligned (16)));
 360:include/asm/processor.h **** 
 361:include/asm/processor.h **** struct i387_soft_struct {
 362:include/asm/processor.h **** 	long	cwd;
 363:include/asm/processor.h **** 	long	swd;
 364:include/asm/processor.h **** 	long	twd;
 365:include/asm/processor.h **** 	long	fip;
 366:include/asm/processor.h **** 	long	fcs;
 367:include/asm/processor.h **** 	long	foo;
 368:include/asm/processor.h **** 	long	fos;
 369:include/asm/processor.h **** 	long	st_space[20];	/* 8*10 bytes for each FP-reg = 80 bytes */
 370:include/asm/processor.h **** 	unsigned char	ftop, changed, lookahead, no_update, rm, alimit;
 371:include/asm/processor.h **** 	struct info	*info;
 372:include/asm/processor.h **** 	unsigned long	entry_eip;
 373:include/asm/processor.h **** };
 374:include/asm/processor.h **** 
 375:include/asm/processor.h **** union i387_union {
 376:include/asm/processor.h **** 	struct i387_fsave_struct	fsave;
 377:include/asm/processor.h **** 	struct i387_fxsave_struct	fxsave;
 378:include/asm/processor.h **** 	struct i387_soft_struct soft;
 379:include/asm/processor.h **** };
 380:include/asm/processor.h **** 
 381:include/asm/processor.h **** typedef struct {
 382:include/asm/processor.h **** 	unsigned long seg;
 383:include/asm/processor.h **** } mm_segment_t;
 384:include/asm/processor.h **** 
 385:include/asm/processor.h **** struct thread_struct;
 386:include/asm/processor.h **** 
 387:include/asm/processor.h **** struct tss_struct {
 388:include/asm/processor.h **** 	unsigned short	back_link,__blh;
 389:include/asm/processor.h **** 	unsigned long	esp0;
 390:include/asm/processor.h **** 	unsigned short	ss0,__ss0h;
 391:include/asm/processor.h **** 	unsigned long	esp1;
 392:include/asm/processor.h **** 	unsigned short	ss1,__ss1h;	/* ss1 is used to cache MSR_IA32_SYSENTER_CS */
 393:include/asm/processor.h **** 	unsigned long	esp2;
 394:include/asm/processor.h **** 	unsigned short	ss2,__ss2h;
 395:include/asm/processor.h **** 	unsigned long	__cr3;
 396:include/asm/processor.h **** 	unsigned long	eip;
 397:include/asm/processor.h **** 	unsigned long	eflags;
 398:include/asm/processor.h **** 	unsigned long	eax,ecx,edx,ebx;
 399:include/asm/processor.h **** 	unsigned long	esp;
 400:include/asm/processor.h **** 	unsigned long	ebp;
 401:include/asm/processor.h **** 	unsigned long	esi;
 402:include/asm/processor.h **** 	unsigned long	edi;
 403:include/asm/processor.h **** 	unsigned short	es, __esh;
 404:include/asm/processor.h **** 	unsigned short	cs, __csh;
 405:include/asm/processor.h **** 	unsigned short	ss, __ssh;
 406:include/asm/processor.h **** 	unsigned short	ds, __dsh;
 407:include/asm/processor.h **** 	unsigned short	fs, __fsh;
 408:include/asm/processor.h **** 	unsigned short	gs, __gsh;
 409:include/asm/processor.h **** 	unsigned short	ldt, __ldth;
 410:include/asm/processor.h **** 	unsigned short	trace, io_bitmap_base;
 411:include/asm/processor.h **** 	/*
 412:include/asm/processor.h **** 	 * The extra 1 is there because the CPU will access an
GAS LISTING  			page 215


 413:include/asm/processor.h **** 	 * additional byte beyond the end of the IO permission
 414:include/asm/processor.h **** 	 * bitmap. The extra byte must be all 1 bits, and must
 415:include/asm/processor.h **** 	 * be within the limit.
 416:include/asm/processor.h **** 	 */
 417:include/asm/processor.h **** 	unsigned long	io_bitmap[IO_BITMAP_LONGS + 1];
 418:include/asm/processor.h **** 	/*
 419:include/asm/processor.h **** 	 * Cache the current maximum and the last task that used the bitmap:
 420:include/asm/processor.h **** 	 */
 421:include/asm/processor.h **** 	unsigned long io_bitmap_max;
 422:include/asm/processor.h **** 	struct thread_struct *io_bitmap_owner;
 423:include/asm/processor.h **** 	/*
 424:include/asm/processor.h **** 	 * pads the TSS to be cacheline-aligned (size is 0x100)
 425:include/asm/processor.h **** 	 */
 426:include/asm/processor.h **** 	unsigned long __cacheline_filler[35];
 427:include/asm/processor.h **** 	/*
 428:include/asm/processor.h **** 	 * .. and then another 0x100 bytes for emergency kernel stack
 429:include/asm/processor.h **** 	 */
 430:include/asm/processor.h **** 	unsigned long stack[64];
 431:include/asm/processor.h **** } __attribute__((packed));
 432:include/asm/processor.h **** 
 433:include/asm/processor.h **** #define ARCH_MIN_TASKALIGN	16
 434:include/asm/processor.h **** 
 435:include/asm/processor.h **** struct thread_struct {
 436:include/asm/processor.h **** /* cached TLS descriptors. */
 437:include/asm/processor.h **** 	struct desc_struct tls_array[GDT_ENTRY_TLS_ENTRIES];
 438:include/asm/processor.h **** 	unsigned long	esp0;
 439:include/asm/processor.h **** 	unsigned long	sysenter_cs;
 440:include/asm/processor.h **** 	unsigned long	eip;
 441:include/asm/processor.h **** 	unsigned long	esp;
 442:include/asm/processor.h **** 	unsigned long	fs;
 443:include/asm/processor.h **** 	unsigned long	gs;
 444:include/asm/processor.h **** /* Hardware debugging registers */
 445:include/asm/processor.h **** 	unsigned long	debugreg[8];  /* %%db0-7 debug registers */
 446:include/asm/processor.h **** /* fault info */
 447:include/asm/processor.h **** 	unsigned long	cr2, trap_no, error_code;
 448:include/asm/processor.h **** /* floating point info */
 449:include/asm/processor.h **** 	union i387_union	i387;
 450:include/asm/processor.h **** /* virtual 86 mode info */
 451:include/asm/processor.h **** 	struct vm86_struct __user * vm86_info;
 452:include/asm/processor.h **** 	unsigned long		screen_bitmap;
 453:include/asm/processor.h **** 	unsigned long		v86flags, v86mask, saved_esp0;
 454:include/asm/processor.h **** 	unsigned int		saved_fs, saved_gs;
 455:include/asm/processor.h **** /* IO permissions */
 456:include/asm/processor.h **** 	unsigned long	*io_bitmap_ptr;
 457:include/asm/processor.h **** /* max allowed port in the bitmap, in bytes: */
 458:include/asm/processor.h **** 	unsigned long	io_bitmap_max;
 459:include/asm/processor.h **** };
 460:include/asm/processor.h **** 
 461:include/asm/processor.h **** #define INIT_THREAD  {							\
 462:include/asm/processor.h **** 	.vm86_info = NULL,						\
 463:include/asm/processor.h **** 	.sysenter_cs = __KERNEL_CS,					\
 464:include/asm/processor.h **** 	.io_bitmap_ptr = NULL,						\
 465:include/asm/processor.h **** }
 466:include/asm/processor.h **** 
 467:include/asm/processor.h **** /*
 468:include/asm/processor.h ****  * Note that the .io_bitmap member must be extra-big. This is because
 469:include/asm/processor.h ****  * the CPU will access an additional byte beyond the end of the IO
GAS LISTING  			page 216


 470:include/asm/processor.h ****  * permission bitmap. The extra byte must be all 1 bits, and must
 471:include/asm/processor.h ****  * be within the limit.
 472:include/asm/processor.h ****  */
 473:include/asm/processor.h **** #define INIT_TSS  {							\
 474:include/asm/processor.h **** 	.esp0		= sizeof(init_stack) + (long)&init_stack,	\
 475:include/asm/processor.h **** 	.ss0		= __KERNEL_DS,					\
 476:include/asm/processor.h **** 	.ss1		= __KERNEL_CS,					\
 477:include/asm/processor.h **** 	.ldt		= GDT_ENTRY_LDT,				\
 478:include/asm/processor.h **** 	.io_bitmap_base	= INVALID_IO_BITMAP_OFFSET,			\
 479:include/asm/processor.h **** 	.io_bitmap	= { [ 0 ... IO_BITMAP_LONGS] = ~0 },		\
 480:include/asm/processor.h **** }
 481:include/asm/processor.h **** 
 482:include/asm/processor.h **** static inline void load_esp0(struct tss_struct *tss, struct thread_struct *thread)
 483:include/asm/processor.h **** {
 484:include/asm/processor.h **** 	tss->esp0 = thread->esp0;
 485:include/asm/processor.h **** 	/* This can only happen when SEP is enabled, no need to test "SEP"arately */
 486:include/asm/processor.h **** 	if (unlikely(tss->ss1 != thread->sysenter_cs)) {
 487:include/asm/processor.h **** 		tss->ss1 = thread->sysenter_cs;
 488:include/asm/processor.h **** 		wrmsr(MSR_IA32_SYSENTER_CS, thread->sysenter_cs, 0);
 489:include/asm/processor.h **** 	}
 490:include/asm/processor.h **** }
 491:include/asm/processor.h **** 
 492:include/asm/processor.h **** #define start_thread(regs, new_eip, new_esp) do {		\
 493:include/asm/processor.h **** 	__asm__("movl %0,%%fs ; movl %0,%%gs": :"r" (0));	\
 494:include/asm/processor.h **** 	set_fs(USER_DS);					\
 495:include/asm/processor.h **** 	regs->xds = __USER_DS;					\
 496:include/asm/processor.h **** 	regs->xes = __USER_DS;					\
 497:include/asm/processor.h **** 	regs->xss = __USER_DS;					\
 498:include/asm/processor.h **** 	regs->xcs = __USER_CS;					\
 499:include/asm/processor.h **** 	regs->eip = new_eip;					\
 500:include/asm/processor.h **** 	regs->esp = new_esp;					\
 501:include/asm/processor.h **** } while (0)
 502:include/asm/processor.h **** 
 503:include/asm/processor.h **** /*
 504:include/asm/processor.h ****  * This special macro can be used to load a debugging register
 505:include/asm/processor.h ****  */
 506:include/asm/processor.h **** #define loaddebug(thread,register) \
 507:include/asm/processor.h ****                __asm__("movl %0,%%db" #register  \
 508:include/asm/processor.h ****                        : /* no output */ \
 509:include/asm/processor.h ****                        :"r" ((thread)->debugreg[register]))
 510:include/asm/processor.h **** 
 511:include/asm/processor.h **** /* Forward declaration, a strange C thing */
 512:include/asm/processor.h **** struct task_struct;
 513:include/asm/processor.h **** struct mm_struct;
 514:include/asm/processor.h **** 
 515:include/asm/processor.h **** /* Free all resources held by a thread. */
 516:include/asm/processor.h **** extern void release_thread(struct task_struct *);
 517:include/asm/processor.h **** 
 518:include/asm/processor.h **** /* Prepare to copy thread state - unlazy all lazy status */
 519:include/asm/processor.h **** extern void prepare_to_copy(struct task_struct *tsk);
 520:include/asm/processor.h **** 
 521:include/asm/processor.h **** /*
 522:include/asm/processor.h ****  * create a kernel thread without removing it from tasklists
 523:include/asm/processor.h ****  */
 524:include/asm/processor.h **** extern int kernel_thread(int (*fn)(void *), void * arg, unsigned long flags);
 525:include/asm/processor.h **** 
 526:include/asm/processor.h **** extern unsigned long thread_saved_pc(struct task_struct *tsk);
GAS LISTING  			page 217


 527:include/asm/processor.h **** void show_trace(struct task_struct *task, unsigned long *stack);
 528:include/asm/processor.h **** 
 529:include/asm/processor.h **** unsigned long get_wchan(struct task_struct *p);
 530:include/asm/processor.h **** 
 531:include/asm/processor.h **** #define THREAD_SIZE_LONGS      (THREAD_SIZE/sizeof(unsigned long))
 532:include/asm/processor.h **** #define KSTK_TOP(info)                                                 \
 533:include/asm/processor.h **** ({                                                                     \
 534:include/asm/processor.h ****        unsigned long *__ptr = (unsigned long *)(info);                 \
 535:include/asm/processor.h ****        (unsigned long)(&__ptr[THREAD_SIZE_LONGS]);                     \
 536:include/asm/processor.h **** })
 537:include/asm/processor.h **** 
 538:include/asm/processor.h **** #define task_pt_regs(task)                                             \
 539:include/asm/processor.h **** ({                                                                     \
 540:include/asm/processor.h ****        struct pt_regs *__regs__;                                       \
 541:include/asm/processor.h ****        __regs__ = (struct pt_regs *)KSTK_TOP((task)->thread_info);     \
 542:include/asm/processor.h ****        __regs__ - 1;                                                   \
 543:include/asm/processor.h **** })
 544:include/asm/processor.h **** 
 545:include/asm/processor.h **** #define KSTK_EIP(task) (task_pt_regs(task)->eip)
 546:include/asm/processor.h **** #define KSTK_ESP(task) (task_pt_regs(task)->esp)
 547:include/asm/processor.h **** 
 548:include/asm/processor.h **** 
 549:include/asm/processor.h **** struct microcode_header {
 550:include/asm/processor.h **** 	unsigned int hdrver;
 551:include/asm/processor.h **** 	unsigned int rev;
 552:include/asm/processor.h **** 	unsigned int date;
 553:include/asm/processor.h **** 	unsigned int sig;
 554:include/asm/processor.h **** 	unsigned int cksum;
 555:include/asm/processor.h **** 	unsigned int ldrver;
 556:include/asm/processor.h **** 	unsigned int pf;
 557:include/asm/processor.h **** 	unsigned int datasize;
 558:include/asm/processor.h **** 	unsigned int totalsize;
 559:include/asm/processor.h **** 	unsigned int reserved[3];
 560:include/asm/processor.h **** };
 561:include/asm/processor.h **** 
 562:include/asm/processor.h **** struct microcode {
 563:include/asm/processor.h **** 	struct microcode_header hdr;
 564:include/asm/processor.h **** 	unsigned int bits[0];
 565:include/asm/processor.h **** };
 566:include/asm/processor.h **** 
 567:include/asm/processor.h **** typedef struct microcode microcode_t;
 568:include/asm/processor.h **** typedef struct microcode_header microcode_header_t;
 569:include/asm/processor.h **** 
 570:include/asm/processor.h **** /* microcode format is extended from prescott processors */
 571:include/asm/processor.h **** struct extended_signature {
 572:include/asm/processor.h **** 	unsigned int sig;
 573:include/asm/processor.h **** 	unsigned int pf;
 574:include/asm/processor.h **** 	unsigned int cksum;
 575:include/asm/processor.h **** };
 576:include/asm/processor.h **** 
 577:include/asm/processor.h **** struct extended_sigtable {
 578:include/asm/processor.h **** 	unsigned int count;
 579:include/asm/processor.h **** 	unsigned int cksum;
 580:include/asm/processor.h **** 	unsigned int reserved[3];
 581:include/asm/processor.h **** 	struct extended_signature sigs[0];
 582:include/asm/processor.h **** };
 583:include/asm/processor.h **** /* '6' because it used to be for P6 only (but now covers Pentium 4 as well) */
GAS LISTING  			page 218


 584:include/asm/processor.h **** #define MICROCODE_IOCFREE	_IO('6',0)
 585:include/asm/processor.h **** 
 586:include/asm/processor.h **** /* REP NOP (PAUSE) is a good thing to insert into busy-wait loops. */
 587:include/asm/processor.h **** static inline void rep_nop(void)
 588:include/asm/processor.h **** {
 589:include/asm/processor.h **** 	__asm__ __volatile__("rep;nop": : :"memory");
 590:include/asm/processor.h **** }
 591:include/asm/processor.h **** 
 592:include/asm/processor.h **** #define cpu_relax()	rep_nop()
 593:include/asm/processor.h **** 
 594:include/asm/processor.h **** /* generic versions from gas */
 595:include/asm/processor.h **** #define GENERIC_NOP1	".byte 0x90\n"
 596:include/asm/processor.h **** #define GENERIC_NOP2    	".byte 0x89,0xf6\n"
 597:include/asm/processor.h **** #define GENERIC_NOP3        ".byte 0x8d,0x76,0x00\n"
 598:include/asm/processor.h **** #define GENERIC_NOP4        ".byte 0x8d,0x74,0x26,0x00\n"
 599:include/asm/processor.h **** #define GENERIC_NOP5        GENERIC_NOP1 GENERIC_NOP4
 600:include/asm/processor.h **** #define GENERIC_NOP6	".byte 0x8d,0xb6,0x00,0x00,0x00,0x00\n"
 601:include/asm/processor.h **** #define GENERIC_NOP7	".byte 0x8d,0xb4,0x26,0x00,0x00,0x00,0x00\n"
 602:include/asm/processor.h **** #define GENERIC_NOP8	GENERIC_NOP1 GENERIC_NOP7
 603:include/asm/processor.h **** 
 604:include/asm/processor.h **** /* Opteron nops */
 605:include/asm/processor.h **** #define K8_NOP1 GENERIC_NOP1
 606:include/asm/processor.h **** #define K8_NOP2	".byte 0x66,0x90\n" 
 607:include/asm/processor.h **** #define K8_NOP3	".byte 0x66,0x66,0x90\n" 
 608:include/asm/processor.h **** #define K8_NOP4	".byte 0x66,0x66,0x66,0x90\n" 
 609:include/asm/processor.h **** #define K8_NOP5	K8_NOP3 K8_NOP2 
 610:include/asm/processor.h **** #define K8_NOP6	K8_NOP3 K8_NOP3
 611:include/asm/processor.h **** #define K8_NOP7	K8_NOP4 K8_NOP3
 612:include/asm/processor.h **** #define K8_NOP8	K8_NOP4 K8_NOP4
 613:include/asm/processor.h **** 
 614:include/asm/processor.h **** /* K7 nops */
 615:include/asm/processor.h **** /* uses eax dependencies (arbitary choice) */
 616:include/asm/processor.h **** #define K7_NOP1  GENERIC_NOP1
 617:include/asm/processor.h **** #define K7_NOP2	".byte 0x8b,0xc0\n" 
 618:include/asm/processor.h **** #define K7_NOP3	".byte 0x8d,0x04,0x20\n"
 619:include/asm/processor.h **** #define K7_NOP4	".byte 0x8d,0x44,0x20,0x00\n"
 620:include/asm/processor.h **** #define K7_NOP5	K7_NOP4 ASM_NOP1
 621:include/asm/processor.h **** #define K7_NOP6	".byte 0x8d,0x80,0,0,0,0\n"
 622:include/asm/processor.h **** #define K7_NOP7        ".byte 0x8D,0x04,0x05,0,0,0,0\n"
 623:include/asm/processor.h **** #define K7_NOP8        K7_NOP7 ASM_NOP1
 624:include/asm/processor.h **** 
 625:include/asm/processor.h **** #ifdef CONFIG_MK8
 626:include/asm/processor.h **** #define ASM_NOP1 K8_NOP1
 627:include/asm/processor.h **** #define ASM_NOP2 K8_NOP2
 628:include/asm/processor.h **** #define ASM_NOP3 K8_NOP3
 629:include/asm/processor.h **** #define ASM_NOP4 K8_NOP4
 630:include/asm/processor.h **** #define ASM_NOP5 K8_NOP5
 631:include/asm/processor.h **** #define ASM_NOP6 K8_NOP6
 632:include/asm/processor.h **** #define ASM_NOP7 K8_NOP7
 633:include/asm/processor.h **** #define ASM_NOP8 K8_NOP8
 634:include/asm/processor.h **** #elif defined(CONFIG_MK7)
 635:include/asm/processor.h **** #define ASM_NOP1 K7_NOP1
 636:include/asm/processor.h **** #define ASM_NOP2 K7_NOP2
 637:include/asm/processor.h **** #define ASM_NOP3 K7_NOP3
 638:include/asm/processor.h **** #define ASM_NOP4 K7_NOP4
 639:include/asm/processor.h **** #define ASM_NOP5 K7_NOP5
 640:include/asm/processor.h **** #define ASM_NOP6 K7_NOP6
GAS LISTING  			page 219


 641:include/asm/processor.h **** #define ASM_NOP7 K7_NOP7
 642:include/asm/processor.h **** #define ASM_NOP8 K7_NOP8
 643:include/asm/processor.h **** #else
 644:include/asm/processor.h **** #define ASM_NOP1 GENERIC_NOP1
 645:include/asm/processor.h **** #define ASM_NOP2 GENERIC_NOP2
 646:include/asm/processor.h **** #define ASM_NOP3 GENERIC_NOP3
 647:include/asm/processor.h **** #define ASM_NOP4 GENERIC_NOP4
 648:include/asm/processor.h **** #define ASM_NOP5 GENERIC_NOP5
 649:include/asm/processor.h **** #define ASM_NOP6 GENERIC_NOP6
 650:include/asm/processor.h **** #define ASM_NOP7 GENERIC_NOP7
 651:include/asm/processor.h **** #define ASM_NOP8 GENERIC_NOP8
 652:include/asm/processor.h **** #endif
 653:include/asm/processor.h **** 
 654:include/asm/processor.h **** #define ASM_NOP_MAX 8
 655:include/asm/processor.h **** 
 656:include/asm/processor.h **** /* Prefetch instructions for Pentium III and AMD Athlon */
 657:include/asm/processor.h **** /* It's not worth to care about 3dnow! prefetches for the K6
 658:include/asm/processor.h ****    because they are microcoded there and very slow.
 659:include/asm/processor.h ****    However we don't do prefetches for pre XP Athlons currently
 660:include/asm/processor.h ****    That should be fixed. */
 661:include/asm/processor.h **** #define ARCH_HAS_PREFETCH
 662:include/asm/processor.h **** extern inline void prefetch(const void *x)
 663:include/asm/processor.h **** {
 5451              	.loc 11 663 0
 5452 23c8 8B955001 	movl 336(%ebp),%edx
 5452      0000
 5453              	.LBB290:
 664:include/asm/processor.h **** 	alternative_input(ASM_NOP4,
 5454              	.loc 11 664 0
 5455              	
 5456              	661:
 5457 23ce 8D742600 	.byte 0x8d,0x74,0x26,0x00
 5458              	
 5459              	662:
 5460              	.section .altinstructions,"a"
 5461              	.align 4
 5462 0000 CE230000 	.long 661b
 5463 0004 00000000 	.long 663f
 5464 0008 19       	.byte 25
 5465 0009 04       	.byte 662b-661b
 5466 000a 03       	.byte 664f-663f
 5467              	.previous
 5468              	.section .altinstr_replacement,"ax"
 5469              	663:
 5470 0000 0F1802   	prefetchnta (%edx)
 5471              	664:
 5472              	.previous
 5473              	
 5474              	.LBE290:
 5475              	.LBE289:
 5476 23d2 8B94247C 	movl 380(%esp),%edx
 5476      010000
 5477 23d9 81C2DC05 	addl $1500,%edx
 5477      0000
 5478 23df 39D0     	cmpl %edx,%eax
 5479 23e1 746A     	je .L1525
 5480              	.LBB291:
GAS LISTING  			page 220


 5481              	.LBB292:
 5482              	.loc 1 1333 0
 5483 23e3 8A4D28   	movb 40(%ebp),%cl
 5484 23e6 3A4C2430 	cmpb 48(%esp),%cl
 5485 23ea 7542     	jne .L1601
 5486 23ec 8A4506   	movb 6(%ebp),%al
 5487 23ef 3A44240E 	cmpb 14(%esp),%al
 5488 23f3 7539     	jne .L1601
 5489              	.LBB293:
 5490              	.LBB294:
 5491              	.loc 2 1169 0
 5492 23f5 668B4500 	movw (%ebp),%ax
 5493 23f9 668B5502 	movw 2(%ebp),%dx
 5494 23fd 66335424 	xorw 10(%esp),%dx
 5494      0A
 5495 2402 33442408 	xorl 8(%esp),%eax
 5496 2406 09D0     	orl %edx,%eax
 5497 2408 668B5504 	movw 4(%ebp),%dx
 5498 240c 3354240C 	xorl 12(%esp),%edx
 5499              	.LBE294:
 5500              	.LBE293:
 5501              	.loc 2 1165 0
 5502 2410 6609D0   	orw %dx,%ax
 5503 2413 7519     	jne .L1601
 5504 2415 0FB6C1   	movzbl %cl,%eax
 5505 2418 8D54240F 	leal 15(%esp),%edx
 5506 241c 50       	pushl %eax
 5507              	.LCFI493:
 5508 241d 8D4D07   	leal 7(%ebp),%ecx
 5509 2420 52       	pushl %edx
 5510              	.LCFI494:
 5511 2421 51       	pushl %ecx
 5512              	.LCFI495:
 5513 2422 E8FCFFFF 	call memcmp
 5513      FF
 5514 2427 83C40C   	addl $12,%esp
 5515              	.LCFI496:
 5516 242a 85C0     	testl %eax,%eax
 5517 242c 741F     	je .L1525
 5518              	.L1601:
 5519              	.LBE292:
 5520              	.LBE291:
1466:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		if (is_same_network(target, &network))
1467:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			break;
1468:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1469:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		if ((oldest == NULL) ||
 5521              	.loc 1 1469 0
 5522 242e 85FF     	testl %edi,%edi
 5523 2430 740E     	je .L1535
 5524 2432 8B879400 	movl 148(%edi),%eax
 5524      0000
 5525 2438 39859400 	cmpl %eax,148(%ebp)
 5525      0000
 5526 243e 7302     	jae .L1526
 5527              	.L1535:
1470:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		    (target->last_scanned < oldest->last_scanned))
1471:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			oldest = target;
GAS LISTING  			page 221


 5528              	.loc 1 1471 0
 5529 2440 89EF     	movl %ebp,%edi
 5530              	.L1526:
 5531              	.LBB295:
 5532              	.loc 1 1465 0
 5533 2442 8B855001 	movl 336(%ebp),%eax
 5533      0000
 5534 2448 E975FFFF 	jmp .L1606
 5534      FF
 5535              	.L1525:
 5536              	.LBE295:
1472:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	}
1473:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1474:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	/* If we didn't find a match, then get a new network slot to initialize
1475:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	 * with this beacon's information */
1476:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	if (&target->list == &ieee->network_list) {
 5537              	.loc 1 1476 0
 5538 244d 8B84247C 	movl 380(%esp),%eax
 5538      010000
 5539 2454 8D955001 	leal 336(%ebp),%edx
 5539      0000
 5540 245a 05DC0500 	addl $1500,%eax
 5540      00
 5541 245f 39C2     	cmpl %eax,%edx
 5542 2461 0F85A201 	jne .L1537
 5542      0000
 5543              	.LBB296:
 5544              	.file 12 "include/linux/list.h"
   1:include/linux/list.h **** #ifndef _LINUX_LIST_H
   2:include/linux/list.h **** #define _LINUX_LIST_H
   3:include/linux/list.h **** 
   4:include/linux/list.h **** #ifdef __KERNEL__
   5:include/linux/list.h **** 
   6:include/linux/list.h **** #include <linux/stddef.h>
   7:include/linux/list.h **** #include <linux/prefetch.h>
   8:include/linux/list.h **** #include <asm/system.h>
   9:include/linux/list.h **** 
  10:include/linux/list.h **** /*
  11:include/linux/list.h ****  * These are non-NULL pointers that will result in page faults
  12:include/linux/list.h ****  * under normal circumstances, used to verify that nobody uses
  13:include/linux/list.h ****  * non-initialized list entries.
  14:include/linux/list.h ****  */
  15:include/linux/list.h **** #define LIST_POISON1  ((void *) 0x00100100)
  16:include/linux/list.h **** #define LIST_POISON2  ((void *) 0x00200200)
  17:include/linux/list.h **** 
  18:include/linux/list.h **** /*
  19:include/linux/list.h ****  * Simple doubly linked list implementation.
  20:include/linux/list.h ****  *
  21:include/linux/list.h ****  * Some of the internal functions ("__xxx") are useful when
  22:include/linux/list.h ****  * manipulating whole lists rather than single entries, as
  23:include/linux/list.h ****  * sometimes we already know the next/prev entries and we can
  24:include/linux/list.h ****  * generate better code by using them directly rather than
  25:include/linux/list.h ****  * using the generic single-entry routines.
  26:include/linux/list.h ****  */
  27:include/linux/list.h **** 
  28:include/linux/list.h **** struct list_head {
  29:include/linux/list.h **** 	struct list_head *next, *prev;
GAS LISTING  			page 222


  30:include/linux/list.h **** };
  31:include/linux/list.h **** 
  32:include/linux/list.h **** #define LIST_HEAD_INIT(name) { &(name), &(name) }
  33:include/linux/list.h **** 
  34:include/linux/list.h **** #define LIST_HEAD(name) \
  35:include/linux/list.h **** 	struct list_head name = LIST_HEAD_INIT(name)
  36:include/linux/list.h **** 
  37:include/linux/list.h **** #define INIT_LIST_HEAD(ptr) do { \
  38:include/linux/list.h **** 	(ptr)->next = (ptr); (ptr)->prev = (ptr); \
  39:include/linux/list.h **** } while (0)
  40:include/linux/list.h **** 
  41:include/linux/list.h **** /*
  42:include/linux/list.h ****  * Insert a new entry between two known consecutive entries.
  43:include/linux/list.h ****  *
  44:include/linux/list.h ****  * This is only for internal list manipulation where we know
  45:include/linux/list.h ****  * the prev/next entries already!
  46:include/linux/list.h ****  */
  47:include/linux/list.h **** static inline void __list_add(struct list_head *new,
  48:include/linux/list.h **** 			      struct list_head *prev,
  49:include/linux/list.h **** 			      struct list_head *next)
  50:include/linux/list.h **** {
  51:include/linux/list.h **** 	next->prev = new;
  52:include/linux/list.h **** 	new->next = next;
  53:include/linux/list.h **** 	new->prev = prev;
  54:include/linux/list.h **** 	prev->next = new;
  55:include/linux/list.h **** }
  56:include/linux/list.h **** 
  57:include/linux/list.h **** /**
  58:include/linux/list.h ****  * list_add - add a new entry
  59:include/linux/list.h ****  * @new: new entry to be added
  60:include/linux/list.h ****  * @head: list head to add it after
  61:include/linux/list.h ****  *
  62:include/linux/list.h ****  * Insert a new entry after the specified head.
  63:include/linux/list.h ****  * This is good for implementing stacks.
  64:include/linux/list.h ****  */
  65:include/linux/list.h **** static inline void list_add(struct list_head *new, struct list_head *head)
  66:include/linux/list.h **** {
  67:include/linux/list.h **** 	__list_add(new, head, head->next);
  68:include/linux/list.h **** }
  69:include/linux/list.h **** 
  70:include/linux/list.h **** /**
  71:include/linux/list.h ****  * list_add_tail - add a new entry
  72:include/linux/list.h ****  * @new: new entry to be added
  73:include/linux/list.h ****  * @head: list head to add it before
  74:include/linux/list.h ****  *
  75:include/linux/list.h ****  * Insert a new entry before the specified head.
  76:include/linux/list.h ****  * This is useful for implementing queues.
  77:include/linux/list.h ****  */
  78:include/linux/list.h **** static inline void list_add_tail(struct list_head *new, struct list_head *head)
  79:include/linux/list.h **** {
  80:include/linux/list.h **** 	__list_add(new, head->prev, head);
  81:include/linux/list.h **** }
  82:include/linux/list.h **** 
  83:include/linux/list.h **** /*
  84:include/linux/list.h ****  * Insert a new entry between two known consecutive entries.
  85:include/linux/list.h ****  *
  86:include/linux/list.h ****  * This is only for internal list manipulation where we know
GAS LISTING  			page 223


  87:include/linux/list.h ****  * the prev/next entries already!
  88:include/linux/list.h ****  */
  89:include/linux/list.h **** static inline void __list_add_rcu(struct list_head * new,
  90:include/linux/list.h **** 		struct list_head * prev, struct list_head * next)
  91:include/linux/list.h **** {
  92:include/linux/list.h **** 	new->next = next;
  93:include/linux/list.h **** 	new->prev = prev;
  94:include/linux/list.h **** 	smp_wmb();
  95:include/linux/list.h **** 	next->prev = new;
  96:include/linux/list.h **** 	prev->next = new;
  97:include/linux/list.h **** }
  98:include/linux/list.h **** 
  99:include/linux/list.h **** /**
 100:include/linux/list.h ****  * list_add_rcu - add a new entry to rcu-protected list
 101:include/linux/list.h ****  * @new: new entry to be added
 102:include/linux/list.h ****  * @head: list head to add it after
 103:include/linux/list.h ****  *
 104:include/linux/list.h ****  * Insert a new entry after the specified head.
 105:include/linux/list.h ****  * This is good for implementing stacks.
 106:include/linux/list.h ****  *
 107:include/linux/list.h ****  * The caller must take whatever precautions are necessary
 108:include/linux/list.h ****  * (such as holding appropriate locks) to avoid racing
 109:include/linux/list.h ****  * with another list-mutation primitive, such as list_add_rcu()
 110:include/linux/list.h ****  * or list_del_rcu(), running on this same list.
 111:include/linux/list.h ****  * However, it is perfectly legal to run concurrently with
 112:include/linux/list.h ****  * the _rcu list-traversal primitives, such as
 113:include/linux/list.h ****  * list_for_each_entry_rcu().
 114:include/linux/list.h ****  */
 115:include/linux/list.h **** static inline void list_add_rcu(struct list_head *new, struct list_head *head)
 116:include/linux/list.h **** {
 117:include/linux/list.h **** 	__list_add_rcu(new, head, head->next);
 118:include/linux/list.h **** }
 119:include/linux/list.h **** 
 120:include/linux/list.h **** /**
 121:include/linux/list.h ****  * list_add_tail_rcu - add a new entry to rcu-protected list
 122:include/linux/list.h ****  * @new: new entry to be added
 123:include/linux/list.h ****  * @head: list head to add it before
 124:include/linux/list.h ****  *
 125:include/linux/list.h ****  * Insert a new entry before the specified head.
 126:include/linux/list.h ****  * This is useful for implementing queues.
 127:include/linux/list.h ****  *
 128:include/linux/list.h ****  * The caller must take whatever precautions are necessary
 129:include/linux/list.h ****  * (such as holding appropriate locks) to avoid racing
 130:include/linux/list.h ****  * with another list-mutation primitive, such as list_add_tail_rcu()
 131:include/linux/list.h ****  * or list_del_rcu(), running on this same list.
 132:include/linux/list.h ****  * However, it is perfectly legal to run concurrently with
 133:include/linux/list.h ****  * the _rcu list-traversal primitives, such as
 134:include/linux/list.h ****  * list_for_each_entry_rcu().
 135:include/linux/list.h ****  */
 136:include/linux/list.h **** static inline void list_add_tail_rcu(struct list_head *new,
 137:include/linux/list.h **** 					struct list_head *head)
 138:include/linux/list.h **** {
 139:include/linux/list.h **** 	__list_add_rcu(new, head->prev, head);
 140:include/linux/list.h **** }
 141:include/linux/list.h **** 
 142:include/linux/list.h **** /*
 143:include/linux/list.h ****  * Delete a list entry by making the prev/next entries
GAS LISTING  			page 224


 144:include/linux/list.h ****  * point to each other.
 145:include/linux/list.h ****  *
 146:include/linux/list.h ****  * This is only for internal list manipulation where we know
 147:include/linux/list.h ****  * the prev/next entries already!
 148:include/linux/list.h ****  */
 149:include/linux/list.h **** static inline void __list_del(struct list_head * prev, struct list_head * next)
 150:include/linux/list.h **** {
 151:include/linux/list.h **** 	next->prev = prev;
 152:include/linux/list.h **** 	prev->next = next;
 153:include/linux/list.h **** }
 154:include/linux/list.h **** 
 155:include/linux/list.h **** /**
 156:include/linux/list.h ****  * list_del - deletes entry from list.
 157:include/linux/list.h ****  * @entry: the element to delete from the list.
 158:include/linux/list.h ****  * Note: list_empty on entry does not return true after this, the entry is
 159:include/linux/list.h ****  * in an undefined state.
 160:include/linux/list.h ****  */
 161:include/linux/list.h **** static inline void list_del(struct list_head *entry)
 162:include/linux/list.h **** {
 163:include/linux/list.h **** 	__list_del(entry->prev, entry->next);
 164:include/linux/list.h **** 	entry->next = LIST_POISON1;
 165:include/linux/list.h **** 	entry->prev = LIST_POISON2;
 166:include/linux/list.h **** }
 167:include/linux/list.h **** 
 168:include/linux/list.h **** /**
 169:include/linux/list.h ****  * list_del_rcu - deletes entry from list without re-initialization
 170:include/linux/list.h ****  * @entry: the element to delete from the list.
 171:include/linux/list.h ****  *
 172:include/linux/list.h ****  * Note: list_empty on entry does not return true after this,
 173:include/linux/list.h ****  * the entry is in an undefined state. It is useful for RCU based
 174:include/linux/list.h ****  * lockfree traversal.
 175:include/linux/list.h ****  *
 176:include/linux/list.h ****  * In particular, it means that we can not poison the forward
 177:include/linux/list.h ****  * pointers that may still be used for walking the list.
 178:include/linux/list.h ****  *
 179:include/linux/list.h ****  * The caller must take whatever precautions are necessary
 180:include/linux/list.h ****  * (such as holding appropriate locks) to avoid racing
 181:include/linux/list.h ****  * with another list-mutation primitive, such as list_del_rcu()
 182:include/linux/list.h ****  * or list_add_rcu(), running on this same list.
 183:include/linux/list.h ****  * However, it is perfectly legal to run concurrently with
 184:include/linux/list.h ****  * the _rcu list-traversal primitives, such as
 185:include/linux/list.h ****  * list_for_each_entry_rcu().
 186:include/linux/list.h ****  *
 187:include/linux/list.h ****  * Note that the caller is not permitted to immediately free
 188:include/linux/list.h ****  * the newly deleted entry.  Instead, either synchronize_kernel()
 189:include/linux/list.h ****  * or call_rcu() must be used to defer freeing until an RCU
 190:include/linux/list.h ****  * grace period has elapsed.
 191:include/linux/list.h ****  */
 192:include/linux/list.h **** static inline void list_del_rcu(struct list_head *entry)
 193:include/linux/list.h **** {
 194:include/linux/list.h **** 	__list_del(entry->prev, entry->next);
 195:include/linux/list.h **** 	entry->prev = LIST_POISON2;
 196:include/linux/list.h **** }
 197:include/linux/list.h **** 
 198:include/linux/list.h **** /*
 199:include/linux/list.h ****  * list_replace_rcu - replace old entry by new one
 200:include/linux/list.h ****  * @old : the element to be replaced
GAS LISTING  			page 225


 201:include/linux/list.h ****  * @new : the new element to insert
 202:include/linux/list.h ****  *
 203:include/linux/list.h ****  * The old entry will be replaced with the new entry atomically.
 204:include/linux/list.h ****  */
 205:include/linux/list.h **** static inline void list_replace_rcu(struct list_head *old, struct list_head *new){
 206:include/linux/list.h **** 	new->next = old->next;
 207:include/linux/list.h **** 	new->prev = old->prev;
 208:include/linux/list.h **** 	smp_wmb();
 209:include/linux/list.h **** 	new->next->prev = new;
 210:include/linux/list.h **** 	new->prev->next = new;
 211:include/linux/list.h **** }
 212:include/linux/list.h **** 
 213:include/linux/list.h **** /**
 214:include/linux/list.h ****  * list_del_init - deletes entry from list and reinitialize it.
 215:include/linux/list.h ****  * @entry: the element to delete from the list.
 216:include/linux/list.h ****  */
 217:include/linux/list.h **** static inline void list_del_init(struct list_head *entry)
 218:include/linux/list.h **** {
 219:include/linux/list.h **** 	__list_del(entry->prev, entry->next);
 220:include/linux/list.h **** 	INIT_LIST_HEAD(entry);
 221:include/linux/list.h **** }
 222:include/linux/list.h **** 
 223:include/linux/list.h **** /**
 224:include/linux/list.h ****  * list_move - delete from one list and add as another's head
 225:include/linux/list.h ****  * @list: the entry to move
 226:include/linux/list.h ****  * @head: the head that will precede our entry
 227:include/linux/list.h ****  */
 228:include/linux/list.h **** static inline void list_move(struct list_head *list, struct list_head *head)
 229:include/linux/list.h **** {
 230:include/linux/list.h ****         __list_del(list->prev, list->next);
 231:include/linux/list.h ****         list_add(list, head);
 232:include/linux/list.h **** }
 233:include/linux/list.h **** 
 234:include/linux/list.h **** /**
 235:include/linux/list.h ****  * list_move_tail - delete from one list and add as another's tail
 236:include/linux/list.h ****  * @list: the entry to move
 237:include/linux/list.h ****  * @head: the head that will follow our entry
 238:include/linux/list.h ****  */
 239:include/linux/list.h **** static inline void list_move_tail(struct list_head *list,
 240:include/linux/list.h **** 				  struct list_head *head)
 241:include/linux/list.h **** {
 242:include/linux/list.h ****         __list_del(list->prev, list->next);
 243:include/linux/list.h ****         list_add_tail(list, head);
 244:include/linux/list.h **** }
 245:include/linux/list.h **** 
 246:include/linux/list.h **** /**
 247:include/linux/list.h ****  * list_empty - tests whether a list is empty
 248:include/linux/list.h ****  * @head: the list to test.
 249:include/linux/list.h ****  */
 250:include/linux/list.h **** static inline int list_empty(const struct list_head *head)
 251:include/linux/list.h **** {
 5545              	.loc 12 251 0
 5546 2467 8B84247C 	movl 380(%esp),%eax
 5546      010000
 5547              	.LBB297:
 252:include/linux/list.h **** 	return head->next == head;
 5548              	.loc 12 252 0
GAS LISTING  			page 226


 5549 246e 8B94247C 	movl 380(%esp),%edx
 5549      010000
 5550              	.LBE297:
 5551              	.loc 12 251 0
 5552 2475 05D40500 	addl $1492,%eax
 5552      00
 5553              	.LBB298:
 5554              	.loc 12 252 0
 5555 247a 8B8AD405 	movl 1492(%edx),%ecx
 5555      0000
 5556              	.LBE298:
 5557              	.LBE296:
 5558              	.loc 12 251 0
 5559 2480 39C1     	cmpl %eax,%ecx
 5560 2482 0F859400 	jne .L1538
 5560      0000
 5561              	.LBB299:
 5562              	.loc 12 162 0
 5563 2488 8D8F5001 	leal 336(%edi),%ecx
 5563      0000
 5564              	.LBB300:
 5565              	.LBB301:
 5566              	.loc 12 150 0
 5567 248e 8B5104   	movl 4(%ecx),%edx
 5568 2491 8B875001 	movl 336(%edi),%eax
 5568      0000
 5569              	.LBB302:
 5570              	.loc 12 151 0
 5571 2497 895004   	movl %edx,4(%eax)
 5572              	.loc 12 152 0
 5573 249a 8902     	movl %eax,(%edx)
 5574              	.LBE302:
 5575              	.LBE301:
 5576              	.loc 12 165 0
 5577 249c C7410400 	movl $2097664,4(%ecx)
 5577      022000
 5578              	.loc 12 164 0
 5579 24a3 C7875001 	movl $1048832,336(%edi)
 5579      00000001 
 5579      1000
 5580              	.LBE300:
 5581              	.LBE299:
1477:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		if (list_empty(&ieee->network_free_list)) {
1478:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			/* If there are no more slots, expire the oldest */
1479:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			list_del(&oldest->list);
1480:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			target = oldest;
1481:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			IEEE80211_DEBUG_SCAN("Expired '%s' (" MAC_FMT ") from "
 5582              	.loc 1 1481 0
 5583 24ad F6050000 	testb $4,ieee80211_debug_level
 5583      000004
 5584              	.loc 1 1480 0
 5585 24b4 89FD     	movl %edi,%ebp
 5586              	.loc 1 1481 0
 5587 24b6 745B     	je .L1542
 5588              	.LBB303:
 5589              	.LBB304:
 5590              	.loc 5 91 0
GAS LISTING  			page 227


 5591 24b8 B800E0FF 	movl $-8192,%eax
 5591      FF
 5592              	
 5593 24bd 21E0     	andl %esp,%eax
 5594              	
 5595              	.LBE304:
 5596              	.LBE303:
 5597              	.loc 5 89 0
 5598 24bf 8B4014   	movl 20(%eax),%eax
 5599 24c2 2500FFFF 	andl $268435200,%eax
 5599      0F
 5600 24c7 83F801   	cmpl $1,%eax
 5601 24ca 0FB64705 	movzbl 5(%edi),%eax
 5602 24ce 50       	pushl %eax
 5603              	.LCFI497:
 5604 24cf 0FB64704 	movzbl 4(%edi),%eax
 5605 24d3 50       	pushl %eax
 5606              	.LCFI498:
 5607 24d4 0FB64703 	movzbl 3(%edi),%eax
 5608 24d8 50       	pushl %eax
 5609              	.LCFI499:
 5610 24d9 0FB64702 	movzbl 2(%edi),%eax
 5611 24dd 50       	pushl %eax
 5612              	.LCFI500:
 5613 24de 0FB64701 	movzbl 1(%edi),%eax
 5614 24e2 50       	pushl %eax
 5615              	.LCFI501:
 5616 24e3 0FB607   	movzbl (%edi),%eax
 5617 24e6 50       	pushl %eax
 5618              	.LCFI502:
 5619 24e7 0FB64728 	movzbl 40(%edi),%eax
 5620 24eb 50       	pushl %eax
 5621              	.LCFI503:
 5622 24ec 8D4707   	leal 7(%edi),%eax
 5623 24ef 50       	pushl %eax
 5624              	.LCFI504:
 5625 24f0 19DB     	sbbl %ebx,%ebx
 5626              	.LCFI505:
 5627 24f2 E8FCFFFF 	call escape_essid
 5627      FF
 5628 24f7 5E       	popl %esi
 5629              	.LCFI506:
 5630 24f8 5F       	popl %edi
 5631              	.LCFI507:
 5632 24f9 50       	pushl %eax
 5633              	.LCFI508:
 5634 24fa 83E30C   	andl $12,%ebx
 5635 24fd 68000100 	pushl $__func__.10
 5635      00
 5636              	.LCFI509:
 5637 2502 83C349   	addl $73,%ebx
 5638 2505 53       	pushl %ebx
 5639              	.LCFI510:
 5640 2506 68DD0900 	pushl $.LC66
 5640      00
 5641              	.LCFI511:
 5642 250b E8FCFFFF 	call printk
GAS LISTING  			page 228


 5642      FF
 5643 2510 83C428   	addl $40,%esp
 5644              	.LCFI512:
 5645              	.L1542:
1482:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 					     "network list.\n",
1483:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 					     escape_essid(target->ssid,
1484:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 							  target->ssid_len),
1485:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 					     MAC_ARG(target->bssid));
1486:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			ieee80211_network_reset(target);
 5646              	.loc 1 1486 0
 5647 2513 55       	pushl %ebp
 5648              	.LCFI513:
 5649 2514 E8FCFFFF 	call ieee80211_network_reset
 5649      FF
 5650 2519 59       	popl %ecx
 5651              	.LCFI514:
 5652 251a EB1D     	jmp .L1547
 5653              	.L1538:
 5654              	.LBB305:
 5655              	.LBB306:
 5656              	.LBB307:
 5657              	.loc 12 150 0
 5658 251c 8B5104   	movl 4(%ecx),%edx
 5659 251f 8B01     	movl (%ecx),%eax
 5660              	.LBB308:
 5661              	.loc 12 151 0
 5662 2521 895004   	movl %edx,4(%eax)
 5663              	.loc 12 152 0
 5664 2524 8902     	movl %eax,(%edx)
 5665              	.LBE308:
 5666              	.LBE307:
 5667              	.LBE306:
 5668              	.LBE305:
1487:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		} else {
1488:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			/* Otherwise just pull from the free list */
1489:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			target = list_entry(ieee->network_free_list.next,
 5669              	.loc 1 1489 0
 5670 2526 8DA9B0FE 	leal -336(%ecx),%ebp
 5670      FFFF
 5671              	.LBB309:
 5672              	.LBB310:
 5673              	.loc 12 164 0
 5674 252c C7010001 	movl $1048832,(%ecx)
 5674      1000
 5675              	.loc 12 165 0
 5676 2532 C7410400 	movl $2097664,4(%ecx)
 5676      022000
 5677              	.L1547:
 5678              	.LBE310:
 5679              	.LBE309:
1490:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 					    struct ieee80211_network, list);
1491:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			list_del(ieee->network_free_list.next);
1492:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		}
1493:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1494:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** #ifdef CONFIG_IEEE80211_DEBUG
1495:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		IEEE80211_DEBUG_SCAN("Adding '%s' (" MAC_FMT ") via %s.\n",
 5680              	.loc 1 1495 0
GAS LISTING  			page 229


 5681 2539 F6050000 	testb $4,ieee80211_debug_level
 5681      000004
 5682 2540 0F848300 	je .L1550
 5682      0000
 5683              	.LBB311:
 5684              	.LBB312:
 5685              	.loc 1 1399 0
 5686 2546 8B942480 	movl 384(%esp),%edx
 5686      010000
 5687 254d 0FB702   	movzwl (%edx),%eax
 5688 2550 25F00000 	andl $240,%eax
 5688      00
 5689              	.LBE312:
 5690              	.LBE311:
 5691              	.loc 1 1398 0
 5692 2555 83C080   	addl $-128,%eax
 5693 2558 BA7D0900 	movl $.LC63,%edx
 5693      00
 5694 255d 7405     	je .L1553
 5695 255f BA840900 	movl $.LC64,%edx
 5695      00
 5696              	.L1553:
 5697              	.LBB313:
 5698              	.LBB314:
 5699              	.loc 5 91 0
 5700 2564 B800E0FF 	movl $-8192,%eax
 5700      FF
 5701              	
 5702 2569 21E0     	andl %esp,%eax
 5703              	
 5704              	.LBE314:
 5705              	.LBE313:
 5706              	.loc 5 89 0
 5707 256b 8B4014   	movl 20(%eax),%eax
 5708 256e 2500FFFF 	andl $268435200,%eax
 5708      0F
 5709 2573 52       	pushl %edx
 5710              	.LCFI515:
 5711 2574 83F801   	cmpl $1,%eax
 5712 2577 0FB64424 	movzbl 17(%esp),%eax
 5712      11
 5713 257c 50       	pushl %eax
 5714              	.LCFI516:
 5715 257d 0FB64424 	movzbl 20(%esp),%eax
 5715      14
 5716 2582 50       	pushl %eax
 5717              	.LCFI517:
 5718 2583 0FB64424 	movzbl 23(%esp),%eax
 5718      17
 5719 2588 50       	pushl %eax
 5720              	.LCFI518:
 5721 2589 0FB64424 	movzbl 26(%esp),%eax
 5721      1A
 5722 258e 50       	pushl %eax
 5723              	.LCFI519:
 5724 258f 0FB64424 	movzbl 29(%esp),%eax
 5724      1D
GAS LISTING  			page 230


 5725 2594 50       	pushl %eax
 5726              	.LCFI520:
 5727 2595 0FB64424 	movzbl 32(%esp),%eax
 5727      20
 5728 259a 50       	pushl %eax
 5729              	.LCFI521:
 5730 259b 0FB64424 	movzbl 76(%esp),%eax
 5730      4C
 5731 25a0 50       	pushl %eax
 5732              	.LCFI522:
 5733 25a1 8D44242F 	leal 47(%esp),%eax
 5734 25a5 50       	pushl %eax
 5735              	.LCFI523:
 5736 25a6 19DB     	sbbl %ebx,%ebx
 5737              	.LCFI524:
 5738 25a8 E8FCFFFF 	call escape_essid
 5738      FF
 5739 25ad 5F       	popl %edi
 5740              	.LCFI525:
 5741 25ae 5A       	popl %edx
 5742              	.LCFI526:
 5743 25af 50       	pushl %eax
 5744              	.LCFI527:
 5745 25b0 83E30C   	andl $12,%ebx
 5746 25b3 68000100 	pushl $__func__.10
 5746      00
 5747              	.LCFI528:
 5748 25b8 83C349   	addl $73,%ebx
 5749 25bb 53       	pushl %ebx
 5750              	.LCFI529:
 5751 25bc 68320A00 	pushl $.LC67
 5751      00
 5752              	.LCFI530:
 5753 25c1 E8FCFFFF 	call printk
 5753      FF
 5754 25c6 83C42C   	addl $44,%esp
 5755              	.LCFI531:
 5756              	.L1550:
 5757              	.LBB315:
 5758              	.loc 4 227 0
 5759 25c9 8D742408 	leal 8(%esp),%esi
 5760              	.LBB316:
 5761              	.LBB317:
 5762              	.loc 4 252 0
 5763 25cd B9560000 	movl $86,%ecx
 5763      00
 5764 25d2 89EF     	movl %ebp,%edi
 5765              	
 5766 25d4 F3A5     	rep
 5767              	
 5768              	.LBE317:
 5769              	.LBE316:
 5770              	.LBE315:
 5771              	.LBB318:
 5772              	.loc 12 79 0
 5773 25d6 8B84247C 	movl 380(%esp),%eax
 5773      010000
GAS LISTING  			page 231


 5774              	.LBE318:
1496:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				     escape_essid(network.ssid,
1497:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 						  network.ssid_len),
1498:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				     MAC_ARG(network.bssid),
1499:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				     is_beacon(le16_to_cpu
1500:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 					       (beacon->header.
1501:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 						frame_ctl)) ?
1502:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				     "BEACON" : "PROBE RESPONSE");
1503:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** #endif
1504:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		memcpy(target, &network, sizeof(*target));
1505:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		network.ibss_dfs = NULL;
 5775              	.loc 1 1505 0
 5776 25dd C784244C 	movl $0,332(%esp)
 5776      01000000 
 5776      000000
 5777              	.LBB319:
 5778              	.loc 12 79 0
 5779 25e8 05DC0500 	addl $1500,%eax
 5779      00
 5780 25ed 8D955001 	leal 336(%ebp),%edx
 5780      0000
 5781              	.LBB320:
 5782              	.LBB321:
 5783              	.loc 12 50 0
 5784 25f3 8B4804   	movl 4(%eax),%ecx
 5785              	.LBB322:
 5786              	.loc 12 52 0
 5787 25f6 89855001 	movl %eax,336(%ebp)
 5787      0000
 5788              	.loc 12 51 0
 5789 25fc 895004   	movl %edx,4(%eax)
 5790              	.loc 12 54 0
 5791 25ff 8911     	movl %edx,(%ecx)
 5792              	.loc 12 53 0
 5793 2601 894A04   	movl %ecx,4(%edx)
 5794              	.LBE322:
 5795              	.LBE321:
 5796              	.LBE320:
 5797              	.LBE319:
 5798              	.loc 12 54 0
 5799 2604 E99C0000 	jmp .L1592
 5799      00
 5800              	.L1537:
1506:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		list_add_tail(&target->list, &ieee->network_list);
1507:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	} else {
1508:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		IEEE80211_DEBUG_SCAN("Updating '%s' (" MAC_FMT ") via %s.\n",
 5801              	.loc 1 1508 0
 5802 2609 F6050000 	testb $4,ieee80211_debug_level
 5802      000004
 5803 2610 747B     	je .L1583
 5804              	.LBB323:
 5805              	.LBB324:
 5806              	.loc 1 1399 0
 5807 2612 8B942480 	movl 384(%esp),%edx
 5807      010000
 5808 2619 0FB702   	movzwl (%edx),%eax
 5809 261c 25F00000 	andl $240,%eax
GAS LISTING  			page 232


 5809      00
 5810              	.LBE324:
 5811              	.LBE323:
 5812              	.loc 1 1398 0
 5813 2621 83C080   	addl $-128,%eax
 5814 2624 BA7D0900 	movl $.LC63,%edx
 5814      00
 5815 2629 7405     	je .L1586
 5816 262b BA840900 	movl $.LC64,%edx
 5816      00
 5817              	.L1586:
 5818              	.LBB325:
 5819              	.LBB326:
 5820              	.loc 5 91 0
 5821 2630 B800E0FF 	movl $-8192,%eax
 5821      FF
 5822              	
 5823 2635 21E0     	andl %esp,%eax
 5824              	
 5825              	.LBE326:
 5826              	.LBE325:
 5827              	.loc 5 89 0
 5828 2637 8B4014   	movl 20(%eax),%eax
 5829 263a 2500FFFF 	andl $268435200,%eax
 5829      0F
 5830 263f 52       	pushl %edx
 5831              	.LCFI532:
 5832 2640 83F801   	cmpl $1,%eax
 5833 2643 0FB64505 	movzbl 5(%ebp),%eax
 5834 2647 50       	pushl %eax
 5835              	.LCFI533:
 5836 2648 0FB64504 	movzbl 4(%ebp),%eax
 5837 264c 50       	pushl %eax
 5838              	.LCFI534:
 5839 264d 0FB64503 	movzbl 3(%ebp),%eax
 5840 2651 50       	pushl %eax
 5841              	.LCFI535:
 5842 2652 0FB64502 	movzbl 2(%ebp),%eax
 5843 2656 50       	pushl %eax
 5844              	.LCFI536:
 5845 2657 0FB64501 	movzbl 1(%ebp),%eax
 5846 265b 50       	pushl %eax
 5847              	.LCFI537:
 5848 265c 0FB64500 	movzbl (%ebp),%eax
 5849 2660 50       	pushl %eax
 5850              	.LCFI538:
 5851 2661 0FB64528 	movzbl 40(%ebp),%eax
 5852 2665 50       	pushl %eax
 5853              	.LCFI539:
 5854 2666 8D4507   	leal 7(%ebp),%eax
 5855 2669 50       	pushl %eax
 5856              	.LCFI540:
 5857 266a 19DB     	sbbl %ebx,%ebx
 5858              	.LCFI541:
 5859 266c E8FCFFFF 	call escape_essid
 5859      FF
 5860 2671 59       	popl %ecx
GAS LISTING  			page 233


 5861              	.LCFI542:
 5862 2672 5E       	popl %esi
 5863              	.LCFI543:
 5864 2673 50       	pushl %eax
 5865              	.LCFI544:
 5866 2674 83E30C   	andl $12,%ebx
 5867 2677 68000100 	pushl $__func__.10
 5867      00
 5868              	.LCFI545:
 5869 267c 83C349   	addl $73,%ebx
 5870 267f 53       	pushl %ebx
 5871              	.LCFI546:
 5872 2680 687B0A00 	pushl $.LC68
 5872      00
 5873              	.LCFI547:
 5874 2685 E8FCFFFF 	call printk
 5874      FF
 5875 268a 83C42C   	addl $44,%esp
 5876              	.LCFI548:
 5877              	.L1583:
1509:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				     escape_essid(target->ssid,
1510:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 						  target->ssid_len),
1511:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				     MAC_ARG(target->bssid),
1512:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				     is_beacon(le16_to_cpu
1513:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 					       (beacon->header.
1514:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 						frame_ctl)) ?
1515:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				     "BEACON" : "PROBE RESPONSE");
1516:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		update_network(target, &network);
 5878              	.loc 1 1516 0
 5879 268d 8D442408 	leal 8(%esp),%eax
 5880 2691 50       	pushl %eax
 5881              	.LCFI549:
 5882 2692 55       	pushl %ebp
 5883              	.LCFI550:
 5884 2693 E897F8FF 	call update_network
 5884      FF
1517:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		network.ibss_dfs = NULL;
 5885              	.loc 1 1517 0
 5886 2698 C7842454 	movl $0,340(%esp)
 5886      01000000 
 5886      000000
 5887 26a3 58       	popl %eax
 5888              	.LCFI551:
 5889 26a4 5A       	popl %edx
 5890              	.LCFI552:
 5891              	.L1592:
1518:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	}
1519:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1520:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	spin_unlock_irqrestore(&ieee->lock, flags);
 5892              	.loc 1 1520 0
 5893              	
 5894 26a5 FF34249D 	pushl (%esp)
 5895              	
 5896              	.LBB327:
 5897              	.LBB328:
 5898              	.loc 1 1399 0
 5899 26a9 8B942480 	movl 384(%esp),%edx
GAS LISTING  			page 234


 5899      010000
 5900 26b0 0FB702   	movzwl (%edx),%eax
 5901 26b3 25F00000 	andl $240,%eax
 5901      00
 5902              	.LBE328:
 5903              	.LBE327:
 5904              	.loc 1 1398 0
 5905 26b8 83C080   	addl $-128,%eax
 5906 26bb 750F     	jne .L1595
1521:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1522:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	if (is_beacon(le16_to_cpu(beacon->header.frame_ctl))) {
1523:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		if (ieee->handle_beacon != NULL)
 5907              	.loc 1 1523 0
 5908 26bd 8B84247C 	movl 380(%esp),%eax
 5908      010000
 5909 26c4 8B909807 	movl 1944(%eax),%edx
 5909      0000
 5910 26ca EB0D     	jmp .L1608
 5911              	.L1595:
1524:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			ieee->handle_beacon(dev, beacon, &network);
1525:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	} else {
1526:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		if (ieee->handle_probe_response != NULL)
 5912              	.loc 1 1526 0
 5913 26cc 8B84247C 	movl 380(%esp),%eax
 5913      010000
 5914 26d3 8B909C07 	movl 1948(%eax),%edx
 5914      0000
 5915              	.L1608:
 5916 26d9 85D2     	testl %edx,%edx
 5917 26db 7415     	je .L1474
1527:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			ieee->handle_probe_response(dev, beacon, &network);
 5918              	.loc 1 1527 0
 5919 26dd 8D442408 	leal 8(%esp),%eax
 5920 26e1 50       	pushl %eax
 5921              	.LCFI553:
 5922 26e2 FFB42484 	pushl 388(%esp)
 5922      010000
 5923              	.LCFI554:
 5924 26e9 FF74240C 	pushl 12(%esp)
 5925              	.LCFI555:
 5926 26ed FFD2     	call *%edx
 5927 26ef 83C40C   	addl $12,%esp
 5928              	.LCFI556:
 5929              	.L1474:
1528:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	}
1529:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** }
 5930              	.loc 1 1529 0
 5931 26f2 81C46801 	addl $360,%esp
 5931      0000
 5932 26f8 5B       	popl %ebx
 5933 26f9 5E       	popl %esi
 5934 26fa 5F       	popl %edi
 5935 26fb 5D       	popl %ebp
 5936 26fc C3       	ret
 5937              	.LFE944:
 5939              	.section .rodata
 5942              	__func__.11:
GAS LISTING  			page 235


 5943 0121 69656565 	.string "ieee80211_rx_mgt"
 5943      38303231 
 5943      315F7278 
 5943      5F6D6774 
 5943      00
 5944              	.section .rodata.str1.1
 5945              	.LC69:
 5946 0ac6 3C373E69 	.string "<7>ieee80211: %c %s received ASSOCIATION RESPONSE (%d)\n"
 5946      65656538 
 5946      30323131 
 5946      3A202563 
 5946      20257320 
 5947              	.LC70:
 5948 0afe 3C373E69 	.string "<7>ieee80211: %c %s received REASSOCIATION RESPONSE (%d)\n"
 5948      65656538 
 5948      30323131 
 5948      3A202563 
 5948      20257320 
 5949              	.LC71:
 5950 0b38 3C373E69 	.string "<7>ieee80211: %c %s received auth (%d)\n"
 5950      65656538 
 5950      30323131 
 5950      3A202563 
 5950      20257320 
 5951              	.LC72:
 5952 0b60 3C373E69 	.string "<7>ieee80211: %c %s received PROBE RESPONSE (%d)\n"
 5952      65656538 
 5952      30323131 
 5952      3A202563 
 5952      20257320 
 5953              	.LC73:
 5954 0b92 3C373E69 	.string "<7>ieee80211: %c %s Probe response\n"
 5954      65656538 
 5954      30323131 
 5954      3A202563 
 5954      20257320 
 5955              	.LC74:
 5956 0bb6 3C373E69 	.string "<7>ieee80211: %c %s received BEACON (%d)\n"
 5956      65656538 
 5956      30323131 
 5956      3A202563 
 5956      20257320 
 5957              	.LC75:
 5958 0be0 3C373E69 	.string "<7>ieee80211: %c %s Beacon\n"
 5958      65656538 
 5958      30323131 
 5958      3A202563 
 5958      20257320 
 5959              	.LC76:
 5960 0bfc 3C373E69 	.string "<7>ieee80211: %c %s ACTION\n"
 5960      65656538 
 5960      30323131 
 5960      3A202563 
 5960      20257320 
 5961              	.LC77:
 5962 0c18 3C373E69 	.string "<7>ieee80211: %c %s received reassoc (%d)\n"
 5962      65656538 
GAS LISTING  			page 236


 5962      30323131 
 5962      3A202563 
 5962      20257320 
 5963              	.LC78:
 5964 0c43 3C343E69 	.string "<4>ieee80211: %s: IEEE80211_REASSOC_REQ received\n"
 5964      65656538 
 5964      30323131 
 5964      3A202573 
 5964      3A204945 
 5965              	.LC79:
 5966 0c75 3C373E69 	.string "<7>ieee80211: %c %s received assoc (%d)\n"
 5966      65656538 
 5966      30323131 
 5966      3A202563 
 5966      20257320 
 5967              	.LC80:
 5968 0c9e 3C343E69 	.string "<4>ieee80211: %s: IEEE80211_ASSOC_REQ received\n"
 5968      65656538 
 5968      30323131 
 5968      3A202573 
 5968      3A204945 
 5969              	.LC81:
 5970 0cce 3C373E69 	.string "<7>ieee80211: %c %s DEAUTH\n"
 5970      65656538 
 5970      30323131 
 5970      3A202563 
 5970      20257320 
 5971              	.LC82:
 5972 0cea 3C373E69 	.string "<7>ieee80211: %c %s received UNKNOWN (%d)\n"
 5972      65656538 
 5972      30323131 
 5972      3A202563 
 5972      20257320 
 5973              	.LC83:
 5974 0d15 3C343E69 	.string "<4>ieee80211: %s: Unknown management packet: %d\n"
 5974      65656538 
 5974      30323131 
 5974      3A202573 
 5974      3A20556E 
 5975              	.text
 5976              	.globl ieee80211_rx_mgt
 5978              	ieee80211_rx_mgt:
 5979              	.LFB945:
1530:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1531:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** void ieee80211_rx_mgt(struct ieee80211_device *ieee,
1532:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		      struct ieee80211_hdr_4addr *header,
1533:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		      struct ieee80211_rx_stats *stats)
1534:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** {
 5980              	.loc 1 1534 0
 5981 26fd 57       	pushl %edi
 5982              	.LCFI557:
 5983 26fe 56       	pushl %esi
 5984              	.LCFI558:
 5985 26ff 53       	pushl %ebx
 5986              	.LCFI559:
 5987              	.loc 1 1534 0
 5988 2700 8B742414 	movl 20(%esp),%esi
GAS LISTING  			page 237


1535:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	switch (WLAN_FC_GET_STYPE(le16_to_cpu(header->frame_ctl))) {
 5989              	.loc 1 1535 0
 5990 2704 668B16   	movw (%esi),%dx
 5991 2707 89D0     	movl %edx,%eax
 5992 2709 25F00000 	andl $240,%eax
 5992      00
 5993 270e 83F850   	cmpl $80,%eax
 5994              	.loc 1 1534 0
 5995 2711 8B5C2410 	movl 16(%esp),%ebx
 5996 2715 8B7C2418 	movl 24(%esp),%edi
 5997              	.loc 1 1535 0
 5998 2719 0F844901 	je .L1630
 5998      0000
 5999 271f 7F34     	jg .L1695
 6000 2721 83F820   	cmpl $32,%eax
 6001 2724 0F84D702 	je .L1668
 6001      0000
 6002 272a 7F12     	jg .L1696
 6003 272c 85C0     	testl %eax,%eax
 6004 272e 0F841E03 	je .L1675
 6004      0000
 6005 2734 83F810   	cmpl $16,%eax
 6006 2737 745F     	je .L1611
 6007 2739 E9C20300 	jmp .L1689
 6007      00
 6008              	.L1696:
 6009 273e 83F830   	cmpl $48,%eax
 6010 2741 0F849D00 	je .L1617
 6010      0000
 6011 2747 83F840   	cmpl $64,%eax
 6012 274a 0F84D500 	je .L1623
 6012      0000
 6013 2750 E9AB0300 	jmp .L1689
 6013      00
 6014              	.L1695:
 6015 2755 3DB00000 	cmpl $176,%eax
 6015      00
 6016 275a 0F84F901 	je .L1652
 6016      0000
 6017 2760 7F1B     	jg .L1697
 6018 2762 3D800000 	cmpl $128,%eax
 6018      00
 6019 2767 0F846701 	je .L1641
 6019      0000
 6020 276d 3DA00000 	cmpl $160,%eax
 6020      00
 6021 2772 0F842702 	je .L1659
 6021      0000
 6022 2778 E9830300 	jmp .L1689
 6022      00
 6023              	.L1697:
 6024 277d 3DC00000 	cmpl $192,%eax
 6024      00
 6025 2782 0F842903 	je .L1682
 6025      0000
 6026 2788 3DD00000 	cmpl $208,%eax
 6026      00
GAS LISTING  			page 238


 6027 278d 0F841702 	je .L1661
 6027      0000
 6028 2793 E9680300 	jmp .L1689
 6028      00
 6029              	.L1611:
1536:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	case IEEE80211_STYPE_ASSOC_RESP:
1537:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		IEEE80211_DEBUG_MGMT("received ASSOCIATION RESPONSE (%d)\n",
 6030              	.loc 1 1537 0
 6031 2798 F6050000 	testb $16,ieee80211_debug_level
 6031      000010
 6032 279f 742F     	je .L1612
 6033              	.LBB329:
 6034              	.LBB330:
 6035              	.loc 5 91 0
 6036 27a1 B800E0FF 	movl $-8192,%eax
 6036      FF
 6037              	
 6038 27a6 21E0     	andl %esp,%eax
 6039              	
 6040              	.LBE330:
 6041              	.LBE329:
 6042              	.loc 5 89 0
 6043 27a8 8B4014   	movl 20(%eax),%eax
 6044 27ab 2500FFFF 	andl $268435200,%eax
 6044      0F
 6045 27b0 83F801   	cmpl $1,%eax
 6046 27b3 19C0     	sbbl %eax,%eax
 6047 27b5 6A10     	pushl $16
 6048              	.LCFI560:
 6049 27b7 83E00C   	andl $12,%eax
 6050 27ba 68210100 	pushl $__func__.11
 6050      00
 6051              	.LCFI561:
 6052 27bf 83C049   	addl $73,%eax
 6053 27c2 50       	pushl %eax
 6054              	.LCFI562:
 6055 27c3 68C60A00 	pushl $.LC69
 6055      00
 6056              	.LCFI563:
 6057 27c8 E8FCFFFF 	call printk
 6057      FF
 6058 27cd 83C410   	addl $16,%esp
 6059              	.LCFI564:
 6060              	.L1612:
1538:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				     WLAN_FC_GET_STYPE(le16_to_cpu
1539:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 						       (header->frame_ctl)));
1540:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		ieee80211_handle_assoc_resp(ieee,
 6061              	.loc 1 1540 0
 6062 27d0 897C2418 	movl %edi,24(%esp)
 6063 27d4 89742414 	movl %esi,20(%esp)
 6064 27d8 895C2410 	movl %ebx,16(%esp)
1541:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 					    (struct ieee80211_assoc_response *)
1542:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 					    header, stats);
1543:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		break;
1544:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1545:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	case IEEE80211_STYPE_REASSOC_RESP:
1546:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		IEEE80211_DEBUG_MGMT("received REASSOCIATION RESPONSE (%d)\n",
GAS LISTING  			page 239


1547:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				     WLAN_FC_GET_STYPE(le16_to_cpu
1548:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 						       (header->frame_ctl)));
1549:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		break;
1550:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1551:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	case IEEE80211_STYPE_PROBE_REQ:
1552:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		IEEE80211_DEBUG_MGMT("received auth (%d)\n",
1553:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				     WLAN_FC_GET_STYPE(le16_to_cpu
1554:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 						       (header->frame_ctl)));
1555:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1556:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		if (ieee->handle_probe_request != NULL)
1557:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			ieee->handle_probe_request(ieee->dev,
1558:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 						   (struct
1559:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 						    ieee80211_probe_request *)
1560:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 						   header, stats);
1561:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		break;
1562:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1563:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	case IEEE80211_STYPE_PROBE_RESP:
1564:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		IEEE80211_DEBUG_MGMT("received PROBE RESPONSE (%d)\n",
1565:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				     WLAN_FC_GET_STYPE(le16_to_cpu
1566:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 						       (header->frame_ctl)));
1567:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		IEEE80211_DEBUG_SCAN("Probe response\n");
1568:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		ieee80211_process_probe_response(ieee,
1569:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 						 (struct
1570:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 						  ieee80211_probe_response *)
1571:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 						 header, stats);
1572:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		break;
1573:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1574:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	case IEEE80211_STYPE_BEACON:
1575:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		IEEE80211_DEBUG_MGMT("received BEACON (%d)\n",
1576:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				     WLAN_FC_GET_STYPE(le16_to_cpu
1577:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 						       (header->frame_ctl)));
1578:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		IEEE80211_DEBUG_SCAN("Beacon\n");
1579:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		ieee80211_process_probe_response(ieee,
1580:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 						 (struct
1581:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 						  ieee80211_probe_response *)
1582:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 						 header, stats);
1583:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		break;
1584:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	case IEEE80211_STYPE_AUTH:
1585:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1586:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		IEEE80211_DEBUG_MGMT("received auth (%d)\n",
1587:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				     WLAN_FC_GET_STYPE(le16_to_cpu
1588:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 						       (header->frame_ctl)));
1589:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1590:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		if (ieee->handle_auth != NULL)
1591:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			ieee->handle_auth(ieee->dev,
1592:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 					  (struct ieee80211_auth *)header);
1593:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		break;
1594:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1595:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	case IEEE80211_STYPE_DISASSOC:
1596:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		if (ieee->handle_disassoc != NULL)
1597:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			ieee->handle_disassoc(ieee->dev,
1598:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 					      (struct ieee80211_disassoc *)
1599:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 					      header);
1600:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		break;
1601:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1602:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	case IEEE80211_STYPE_ACTION:
1603:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		IEEE80211_DEBUG_MGMT("ACTION\n");
GAS LISTING  			page 240


1604:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		if (ieee->handle_action)
1605:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			ieee->handle_action(ieee->dev,
1606:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 					    (struct ieee80211_action *)
1607:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 					    header, stats);
1608:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		break;
1609:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1610:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	case IEEE80211_STYPE_REASSOC_REQ:
1611:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		IEEE80211_DEBUG_MGMT("received reassoc (%d)\n",
1612:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				     WLAN_FC_GET_STYPE(le16_to_cpu
1613:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 						       (header->frame_ctl)));
1614:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1615:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		IEEE80211_WARNING("%s: IEEE80211_REASSOC_REQ received\n",
1616:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				  ieee->dev->name);
1617:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		if (ieee->handle_reassoc_request != NULL)
1618:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			ieee->handle_reassoc_request(ieee->dev,
1619:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 						    (struct ieee80211_reassoc_request *)
1620:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 						     header);
1621:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		break;
1622:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1623:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	case IEEE80211_STYPE_ASSOC_REQ:
1624:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		IEEE80211_DEBUG_MGMT("received assoc (%d)\n",
1625:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				     WLAN_FC_GET_STYPE(le16_to_cpu
1626:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 						       (header->frame_ctl)));
1627:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1628:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		IEEE80211_WARNING("%s: IEEE80211_ASSOC_REQ received\n",
1629:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				  ieee->dev->name);
1630:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		if (ieee->handle_assoc_request != NULL)
1631:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			ieee->handle_assoc_request(ieee->dev);
1632:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		break;
1633:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 
1634:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	case IEEE80211_STYPE_DEAUTH:
1635:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		IEEE80211_DEBUG_MGMT("DEAUTH\n");
1636:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		if (ieee->handle_deauth != NULL)
1637:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 			ieee->handle_deauth(ieee->dev,
1638:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 					    (struct ieee80211_deauth *)
1639:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 					    header);
1640:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		break;
1641:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	default:
1642:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		IEEE80211_DEBUG_MGMT("received UNKNOWN (%d)\n",
1643:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				     WLAN_FC_GET_STYPE(le16_to_cpu
1644:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 						       (header->frame_ctl)));
1645:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		IEEE80211_WARNING("%s: Unknown management packet: %d\n",
1646:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				  ieee->dev->name,
1647:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 				  WLAN_FC_GET_STYPE(le16_to_cpu
1648:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 						    (header->frame_ctl)));
1649:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 		break;
1650:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** 	}
1651:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_rx.c **** }
 6065              	.loc 1 1651 0
 6066 27dc 5B       	popl %ebx
 6067 27dd 5E       	popl %esi
 6068 27de 5F       	popl %edi
 6069              	.loc 1 1540 0
 6070              	.LCFI565:
 6071 27df E9BEF3FF 	jmp ieee80211_handle_assoc_resp
 6071      FF
 6072              	.L1617:
GAS LISTING  			page 241


 6073              	.loc 1 1546 0
 6074 27e4 F6050000 	testb $16,ieee80211_debug_level
 6074      000010
 6075 27eb 0F846E03 	je .L1609
 6075      0000
 6076              	.LBB331:
 6077              	.LBB332:
 6078              	.loc 5 91 0
 6079 27f1 B800E0FF 	movl $-8192,%eax
 6079      FF
 6080              	
 6081 27f6 21E0     	andl %esp,%eax
 6082              	
 6083              	.LBE332:
 6084              	.LBE331:
 6085              	.loc 5 89 0
 6086 27f8 8B4014   	movl 20(%eax),%eax
 6087 27fb 2500FFFF 	andl $268435200,%eax
 6087      0F
 6088 2800 83F801   	cmpl $1,%eax
 6089 2803 19C0     	sbbl %eax,%eax
 6090 2805 6A30     	pushl $48
 6091              	.LCFI566:
 6092 2807 83E00C   	andl $12,%eax
 6093 280a 68210100 	pushl $__func__.11
 6093      00
 6094              	.LCFI567:
 6095 280f 83C049   	addl $73,%eax
 6096 2812 50       	pushl %eax
 6097              	.LCFI568:
 6098 2813 68FE0A00 	pushl $.LC70
 6098      00
 6099              	.LCFI569:
 6100 2818 E8FCFFFF 	call printk
 6100      FF
 6101 281d 83C410   	addl $16,%esp
 6102              	.LCFI570:
 6103              	.loc 1 1549 0
 6104 2820 E93A0300 	jmp .L1609
 6104      00
 6105              	.L1623:
 6106              	.loc 1 1552 0
 6107 2825 F6050000 	testb $16,ieee80211_debug_level
 6107      000010
 6108 282c 742F     	je .L1624
 6109              	.LBB333:
 6110              	.LBB334:
 6111              	.loc 5 91 0
 6112 282e B800E0FF 	movl $-8192,%eax
 6112      FF
 6113              	
 6114 2833 21E0     	andl %esp,%eax
 6115              	
 6116              	.LBE334:
 6117              	.LBE333:
 6118              	.loc 5 89 0
 6119 2835 8B4014   	movl 20(%eax),%eax
GAS LISTING  			page 242


 6120 2838 2500FFFF 	andl $268435200,%eax
 6120      0F
 6121 283d 83F801   	cmpl $1,%eax
 6122 2840 19C0     	sbbl %eax,%eax
 6123 2842 6A40     	pushl $64
 6124              	.LCFI571:
 6125 2844 83E00C   	andl $12,%eax
 6126 2847 68210100 	pushl $__func__.11
 6126      00
 6127              	.LCFI572:
 6128 284c 83C049   	addl $73,%eax
 6129 284f 50       	pushl %eax
 6130              	.LCFI573:
 6131 2850 68380B00 	pushl $.LC71
 6131      00
 6132              	.LCFI574:
 6133 2855 E8FCFFFF 	call printk
 6133      FF
 6134 285a 83C410   	addl $16,%esp
 6135              	.LCFI575:
 6136              	.L1624:
 6137              	.loc 1 1556 0
 6138 285d 8B8BA007 	movl 1952(%ebx),%ecx
 6138      0000
 6139 2863 E97E0100 	jmp .L1701
 6139      00
 6140              	.L1630:
 6141              	.loc 1 1564 0
 6142 2868 F6050000 	testb $16,ieee80211_debug_level
 6142      000010
 6143 286f 742F     	je .L1631
 6144              	.LBB335:
 6145              	.LBB336:
 6146              	.loc 5 91 0
 6147 2871 B800E0FF 	movl $-8192,%eax
 6147      FF
 6148              	
 6149 2876 21E0     	andl %esp,%eax
 6150              	
 6151              	.LBE336:
 6152              	.LBE335:
 6153              	.loc 5 89 0
 6154 2878 8B4014   	movl 20(%eax),%eax
 6155 287b 2500FFFF 	andl $268435200,%eax
 6155      0F
 6156 2880 83F801   	cmpl $1,%eax
 6157 2883 19C0     	sbbl %eax,%eax
 6158 2885 6A50     	pushl $80
 6159              	.LCFI576:
 6160 2887 83E00C   	andl $12,%eax
 6161 288a 68210100 	pushl $__func__.11
 6161      00
 6162              	.LCFI577:
 6163 288f 83C049   	addl $73,%eax
 6164 2892 50       	pushl %eax
 6165              	.LCFI578:
 6166 2893 68600B00 	pushl $.LC72
GAS LISTING  			page 243


 6166      00
 6167              	.LCFI579:
 6168 2898 E8FCFFFF 	call printk
 6168      FF
 6169 289d 83C410   	addl $16,%esp
 6170              	.LCFI580:
 6171              	.L1631:
 6172              	.loc 1 1567 0
 6173 28a0 F6050000 	testb $4,ieee80211_debug_level
 6173      000004
 6174 28a7 0F849800 	je .L1647
 6174      0000
 6175              	.LBB337:
 6176              	.LBB338:
 6177              	.loc 5 91 0
 6178 28ad B800E0FF 	movl $-8192,%eax
 6178      FF
 6179              	
 6180 28b2 21E0     	andl %esp,%eax
 6181              	
 6182              	.LBE338:
 6183              	.LBE337:
 6184              	.loc 5 89 0
 6185 28b4 8B4014   	movl 20(%eax),%eax
 6186 28b7 2500FFFF 	andl $268435200,%eax
 6186      0F
 6187 28bc 83F801   	cmpl $1,%eax
 6188 28bf 19C0     	sbbl %eax,%eax
 6189 28c1 83E00C   	andl $12,%eax
 6190 28c4 68210100 	pushl $__func__.11
 6190      00
 6191              	.LCFI581:
 6192 28c9 83C049   	addl $73,%eax
 6193 28cc 50       	pushl %eax
 6194              	.LCFI582:
 6195 28cd 68920B00 	pushl $.LC73
 6195      00
 6196              	.LCFI583:
 6197 28d2 EB69     	jmp .L1700
 6198              	.LCFI584:
 6199              	.L1641:
 6200              	.loc 1 1575 0
 6201 28d4 F6050000 	testb $16,ieee80211_debug_level
 6201      000010
 6202 28db 7432     	je .L1642
 6203              	.LBB339:
 6204              	.LBB340:
 6205              	.loc 5 91 0
 6206 28dd B800E0FF 	movl $-8192,%eax
 6206      FF
 6207              	
 6208 28e2 21E0     	andl %esp,%eax
 6209              	
 6210              	.LBE340:
 6211              	.LBE339:
 6212              	.loc 5 89 0
 6213 28e4 8B4014   	movl 20(%eax),%eax
GAS LISTING  			page 244


 6214 28e7 2500FFFF 	andl $268435200,%eax
 6214      0F
 6215 28ec 83F801   	cmpl $1,%eax
 6216 28ef 19C0     	sbbl %eax,%eax
 6217 28f1 68800000 	pushl $128
 6217      00
 6218              	.LCFI585:
 6219 28f6 83E00C   	andl $12,%eax
 6220 28f9 68210100 	pushl $__func__.11
 6220      00
 6221              	.LCFI586:
 6222 28fe 83C049   	addl $73,%eax
 6223 2901 50       	pushl %eax
 6224              	.LCFI587:
 6225 2902 68B60B00 	pushl $.LC74
 6225      00
 6226              	.LCFI588:
 6227 2907 E8FCFFFF 	call printk
 6227      FF
 6228 290c 83C410   	addl $16,%esp
 6229              	.LCFI589:
 6230              	.L1642:
 6231              	.loc 1 1578 0
 6232 290f F6050000 	testb $4,ieee80211_debug_level
 6232      000004
 6233 2916 742D     	je .L1647
 6234              	.LBB341:
 6235              	.LBB342:
 6236              	.loc 5 91 0
 6237 2918 B800E0FF 	movl $-8192,%eax
 6237      FF
 6238              	
 6239 291d 21E0     	andl %esp,%eax
 6240              	
 6241              	.LBE342:
 6242              	.LBE341:
 6243              	.loc 5 89 0
 6244 291f 8B4014   	movl 20(%eax),%eax
 6245 2922 2500FFFF 	andl $268435200,%eax
 6245      0F
 6246 2927 83F801   	cmpl $1,%eax
 6247 292a 19C0     	sbbl %eax,%eax
 6248 292c 83E00C   	andl $12,%eax
 6249 292f 68210100 	pushl $__func__.11
 6249      00
 6250              	.LCFI590:
 6251 2934 83C049   	addl $73,%eax
 6252 2937 50       	pushl %eax
 6253              	.LCFI591:
 6254 2938 68E00B00 	pushl $.LC75
 6254      00
 6255              	.LCFI592:
 6256              	.L1700:
 6257 293d E8FCFFFF 	call printk
 6257      FF
 6258 2942 83C40C   	addl $12,%esp
 6259              	.LCFI593:
GAS LISTING  			page 245


 6260              	.L1647:
 6261              	.loc 1 1579 0
 6262 2945 897C2418 	movl %edi,24(%esp)
 6263 2949 89742414 	movl %esi,20(%esp)
 6264 294d 895C2410 	movl %ebx,16(%esp)
 6265              	.loc 1 1651 0
 6266 2951 5B       	popl %ebx
 6267 2952 5E       	popl %esi
 6268 2953 5F       	popl %edi
 6269              	.loc 1 1579 0
 6270              	.LCFI594:
 6271 2954 E9FFF7FF 	jmp ieee80211_process_probe_response
 6271      FF
 6272              	.L1652:
 6273              	.loc 1 1586 0
 6274 2959 F6050000 	testb $16,ieee80211_debug_level
 6274      000010
 6275 2960 7432     	je .L1653
 6276              	.LBB343:
 6277              	.LBB344:
 6278              	.loc 5 91 0
 6279 2962 B800E0FF 	movl $-8192,%eax
 6279      FF
 6280              	
 6281 2967 21E0     	andl %esp,%eax
 6282              	
 6283              	.LBE344:
 6284              	.LBE343:
 6285              	.loc 5 89 0
 6286 2969 8B4014   	movl 20(%eax),%eax
 6287 296c 2500FFFF 	andl $268435200,%eax
 6287      0F
 6288 2971 83F801   	cmpl $1,%eax
 6289 2974 19C0     	sbbl %eax,%eax
 6290 2976 68B00000 	pushl $176
 6290      00
 6291              	.LCFI595:
 6292 297b 83E00C   	andl $12,%eax
 6293 297e 68210100 	pushl $__func__.11
 6293      00
 6294              	.LCFI596:
 6295 2983 83C049   	addl $73,%eax
 6296 2986 50       	pushl %eax
 6297              	.LCFI597:
 6298 2987 68380B00 	pushl $.LC71
 6298      00
 6299              	.LCFI598:
 6300 298c E8FCFFFF 	call printk
 6300      FF
 6301 2991 83C410   	addl $16,%esp
 6302              	.LCFI599:
 6303              	.L1653:
 6304              	.loc 1 1590 0
 6305 2994 8B8B8807 	movl 1928(%ebx),%ecx
 6305      0000
 6306 299a E94E0100 	jmp .L1702
 6306      00
GAS LISTING  			page 246


 6307              	.L1659:
 6308              	.loc 1 1596 0
 6309 299f 8B8B9407 	movl 1940(%ebx),%ecx
 6309      0000
 6310 29a5 E9430100 	jmp .L1702
 6310      00
 6311              	.L1661:
 6312              	.loc 1 1603 0
 6313 29aa F6050000 	testb $16,ieee80211_debug_level
 6313      000010
 6314 29b1 742D     	je .L1662
 6315              	.LBB345:
 6316              	.LBB346:
 6317              	.loc 5 91 0
 6318 29b3 B800E0FF 	movl $-8192,%eax
 6318      FF
 6319              	
 6320 29b8 21E0     	andl %esp,%eax
 6321              	
 6322              	.LBE346:
 6323              	.LBE345:
 6324              	.loc 5 89 0
 6325 29ba 8B4014   	movl 20(%eax),%eax
 6326 29bd 2500FFFF 	andl $268435200,%eax
 6326      0F
 6327 29c2 83F801   	cmpl $1,%eax
 6328 29c5 19C0     	sbbl %eax,%eax
 6329 29c7 83E00C   	andl $12,%eax
 6330 29ca 68210100 	pushl $__func__.11
 6330      00
 6331              	.LCFI600:
 6332 29cf 83C049   	addl $73,%eax
 6333 29d2 50       	pushl %eax
 6334              	.LCFI601:
 6335 29d3 68FC0B00 	pushl $.LC76
 6335      00
 6336              	.LCFI602:
 6337 29d8 E8FCFFFF 	call printk
 6337      FF
 6338 29dd 83C40C   	addl $12,%esp
 6339              	.LCFI603:
 6340              	.L1662:
 6341              	.loc 1 1604 0
 6342 29e0 8B8B9007 	movl 1936(%ebx),%ecx
 6342      0000
 6343              	.L1701:
 6344 29e6 85C9     	testl %ecx,%ecx
 6345 29e8 0F847101 	je .L1609
 6345      0000
 6346              	.loc 1 1605 0
 6347 29ee 897C2418 	movl %edi,24(%esp)
 6348 29f2 89742414 	movl %esi,20(%esp)
 6349 29f6 8B03     	movl (%ebx),%eax
 6350 29f8 89442410 	movl %eax,16(%esp)
 6351              	.loc 1 1651 0
 6352 29fc 5B       	popl %ebx
 6353 29fd 5E       	popl %esi
GAS LISTING  			page 247


 6354 29fe 5F       	popl %edi
 6355              	.loc 1 1605 0
 6356              	.LCFI604:
 6357 29ff FFE1     	jmp *%ecx
 6358              	.L1668:
 6359              	.loc 1 1611 0
 6360 2a01 F6050000 	testb $16,ieee80211_debug_level
 6360      000010
 6361 2a08 742F     	je .L1669
 6362              	.LBB347:
 6363              	.LBB348:
 6364              	.loc 5 91 0
 6365 2a0a B800E0FF 	movl $-8192,%eax
 6365      FF
 6366              	
 6367 2a0f 21E0     	andl %esp,%eax
 6368              	
 6369              	.LBE348:
 6370              	.LBE347:
 6371              	.loc 5 89 0
 6372 2a11 8B4014   	movl 20(%eax),%eax
 6373 2a14 2500FFFF 	andl $268435200,%eax
 6373      0F
 6374 2a19 83F801   	cmpl $1,%eax
 6375 2a1c 19C0     	sbbl %eax,%eax
 6376 2a1e 6A20     	pushl $32
 6377              	.LCFI605:
 6378 2a20 83E00C   	andl $12,%eax
 6379 2a23 68210100 	pushl $__func__.11
 6379      00
 6380              	.LCFI606:
 6381 2a28 83C049   	addl $73,%eax
 6382 2a2b 50       	pushl %eax
 6383              	.LCFI607:
 6384 2a2c 68180C00 	pushl $.LC77
 6384      00
 6385              	.LCFI608:
 6386 2a31 E8FCFFFF 	call printk
 6386      FF
 6387 2a36 83C410   	addl $16,%esp
 6388              	.LCFI609:
 6389              	.L1669:
 6390              	.loc 1 1615 0
 6391 2a39 FF33     	pushl (%ebx)
 6392              	.LCFI610:
 6393 2a3b 68430C00 	pushl $.LC78
 6393      00
 6394              	.LCFI611:
 6395 2a40 E8FCFFFF 	call printk
 6395      FF
 6396              	.loc 1 1617 0
 6397 2a45 5F       	popl %edi
 6398              	.LCFI612:
 6399 2a46 58       	popl %eax
 6400              	.LCFI613:
 6401 2a47 8B8BAC07 	movl 1964(%ebx),%ecx
 6401      0000
GAS LISTING  			page 248


 6402 2a4d E99B0000 	jmp .L1702
 6402      00
 6403              	.L1675:
 6404              	.loc 1 1624 0
 6405 2a52 F6050000 	testb $16,ieee80211_debug_level
 6405      000010
 6406 2a59 742F     	je .L1676
 6407              	.LBB349:
 6408              	.LBB350:
 6409              	.loc 5 91 0
 6410 2a5b B800E0FF 	movl $-8192,%eax
 6410      FF
 6411              	
 6412 2a60 21E0     	andl %esp,%eax
 6413              	
 6414              	.LBE350:
 6415              	.LBE349:
 6416              	.loc 5 89 0
 6417 2a62 8B4014   	movl 20(%eax),%eax
 6418 2a65 2500FFFF 	andl $268435200,%eax
 6418      0F
 6419 2a6a 83F801   	cmpl $1,%eax
 6420 2a6d 19C0     	sbbl %eax,%eax
 6421 2a6f 6A00     	pushl $0
 6422              	.LCFI614:
 6423 2a71 83E00C   	andl $12,%eax
 6424 2a74 68210100 	pushl $__func__.11
 6424      00
 6425              	.LCFI615:
 6426 2a79 83C049   	addl $73,%eax
 6427 2a7c 50       	pushl %eax
 6428              	.LCFI616:
 6429 2a7d 68750C00 	pushl $.LC79
 6429      00
 6430              	.LCFI617:
 6431 2a82 E8FCFFFF 	call printk
 6431      FF
 6432 2a87 83C410   	addl $16,%esp
 6433              	.LCFI618:
 6434              	.L1676:
 6435              	.loc 1 1628 0
 6436 2a8a FF33     	pushl (%ebx)
 6437              	.LCFI619:
 6438 2a8c 689E0C00 	pushl $.LC80
 6438      00
 6439              	.LCFI620:
 6440 2a91 E8FCFFFF 	call printk
 6440      FF
 6441              	.loc 1 1630 0
 6442 2a96 59       	popl %ecx
 6443              	.LCFI621:
 6444 2a97 8B8BA807 	movl 1960(%ebx),%ecx
 6444      0000
 6445 2a9d 85C9     	testl %ecx,%ecx
 6446 2a9f 5E       	popl %esi
 6447              	.LCFI622:
 6448 2aa0 0F84B900 	je .L1609
GAS LISTING  			page 249


 6448      0000
 6449              	.loc 1 1631 0
 6450 2aa6 8B03     	movl (%ebx),%eax
 6451 2aa8 89442410 	movl %eax,16(%esp)
 6452              	.loc 1 1651 0
 6453 2aac 5B       	popl %ebx
 6454 2aad 5E       	popl %esi
 6455 2aae 5F       	popl %edi
 6456              	.loc 1 1631 0
 6457              	.LCFI623:
 6458 2aaf FFE1     	jmp *%ecx
 6459              	.L1682:
 6460              	.loc 1 1635 0
 6461 2ab1 F6050000 	testb $16,ieee80211_debug_level
 6461      000010
 6462 2ab8 742D     	je .L1683
 6463              	.LBB351:
 6464              	.LBB352:
 6465              	.loc 5 91 0
 6466 2aba B800E0FF 	movl $-8192,%eax
 6466      FF
 6467              	
 6468 2abf 21E0     	andl %esp,%eax
 6469              	
 6470              	.LBE352:
 6471              	.LBE351:
 6472              	.loc 5 89 0
 6473 2ac1 8B4014   	movl 20(%eax),%eax
 6474 2ac4 2500FFFF 	andl $268435200,%eax
 6474      0F
 6475 2ac9 83F801   	cmpl $1,%eax
 6476 2acc 19C0     	sbbl %eax,%eax
 6477 2ace 83E00C   	andl $12,%eax
 6478 2ad1 68210100 	pushl $__func__.11
 6478      00
 6479              	.LCFI624:
 6480 2ad6 83C049   	addl $73,%eax
 6481 2ad9 50       	pushl %eax
 6482              	.LCFI625:
 6483 2ada 68CE0C00 	pushl $.LC81
 6483      00
 6484              	.LCFI626:
 6485 2adf E8FCFFFF 	call printk
 6485      FF
 6486 2ae4 83C40C   	addl $12,%esp
 6487              	.LCFI627:
 6488              	.L1683:
 6489              	.loc 1 1636 0
 6490 2ae7 8B8B8C07 	movl 1932(%ebx),%ecx
 6490      0000
 6491              	.L1702:
 6492 2aed 85C9     	testl %ecx,%ecx
 6493 2aef 746E     	je .L1609
 6494              	.loc 1 1637 0
 6495 2af1 89742414 	movl %esi,20(%esp)
 6496 2af5 8B03     	movl (%ebx),%eax
 6497 2af7 89442410 	movl %eax,16(%esp)
GAS LISTING  			page 250


 6498              	.loc 1 1651 0
 6499 2afb 5B       	popl %ebx
 6500 2afc 5E       	popl %esi
 6501 2afd 5F       	popl %edi
 6502              	.loc 1 1637 0
 6503              	.LCFI628:
 6504 2afe FFE1     	jmp *%ecx
 6505              	.L1689:
 6506              	.loc 1 1642 0
 6507 2b00 F6050000 	testb $16,ieee80211_debug_level
 6507      000010
 6508 2b07 7434     	je .L1690
 6509              	.LBB353:
 6510              	.LBB354:
 6511              	.loc 5 91 0
 6512 2b09 B800E0FF 	movl $-8192,%eax
 6512      FF
 6513              	
 6514 2b0e 21E0     	andl %esp,%eax
 6515              	
 6516              	.LBE354:
 6517              	.LBE353:
 6518              	.loc 5 89 0
 6519 2b10 8B4014   	movl 20(%eax),%eax
 6520 2b13 2500FFFF 	andl $268435200,%eax
 6520      0F
 6521 2b18 83F801   	cmpl $1,%eax
 6522 2b1b 19C0     	sbbl %eax,%eax
 6523 2b1d 81E2F000 	andl $240,%edx
 6523      0000
 6524 2b23 52       	pushl %edx
 6525              	.LCFI629:
 6526 2b24 83E00C   	andl $12,%eax
 6527 2b27 68210100 	pushl $__func__.11
 6527      00
 6528              	.LCFI630:
 6529 2b2c 83C049   	addl $73,%eax
 6530 2b2f 50       	pushl %eax
 6531              	.LCFI631:
 6532 2b30 68EA0C00 	pushl $.LC82
 6532      00
 6533              	.LCFI632:
 6534 2b35 E8FCFFFF 	call printk
 6534      FF
 6535 2b3a 83C410   	addl $16,%esp
 6536              	.LCFI633:
 6537              	.L1690:
 6538              	.loc 1 1645 0
 6539 2b3d 0FB706   	movzwl (%esi),%eax
 6540 2b40 25F00000 	andl $240,%eax
 6540      00
 6541 2b45 89442418 	movl %eax,24(%esp)
 6542 2b49 8B03     	movl (%ebx),%eax
 6543 2b4b 89442414 	movl %eax,20(%esp)
 6544 2b4f C7442410 	movl $.LC83,16(%esp)
 6544      150D0000 
 6545              	.loc 1 1651 0
GAS LISTING  			page 251


 6546 2b57 5B       	popl %ebx
 6547 2b58 5E       	popl %esi
 6548 2b59 5F       	popl %edi
 6549              	.loc 1 1645 0
 6550              	.LCFI634:
 6551 2b5a E9FCFFFF 	jmp printk
 6551      FF
 6552              	.L1609:
 6553              	.loc 1 1651 0
 6554 2b5f 5B       	popl %ebx
 6555 2b60 5E       	popl %esi
 6556 2b61 5F       	popl %edi
 6557 2b62 C3       	ret
 6558              	.LFE945:
 6560              	.section __kcrctab,"a",@progbits
 6561              	.align 4
 6564              	__kcrctab_ieee80211_rx_mgt:
 6565 0000 00000000 	.long __crc_ieee80211_rx_mgt
 6566              	.section __ksymtab_strings,"a",@progbits
 6569              	__kstrtab_ieee80211_rx_mgt:
 6570 0000 69656565 	.string "ieee80211_rx_mgt"
 6570      38303231 
 6570      315F7278 
 6570      5F6D6774 
 6570      00
 6571              	.section __ksymtab,"a",@progbits
 6572              	.align 4
 6575              	__ksymtab_ieee80211_rx_mgt:
 6576 0000 00000000 	.long ieee80211_rx_mgt
 6577 0004 00000000 	.long __kstrtab_ieee80211_rx_mgt
 6578              	.section __kcrctab
 6579              	.align 4
 6582              	__kcrctab_ieee80211_rx:
 6583 0004 00000000 	.long __crc_ieee80211_rx
 6584              	.section __ksymtab_strings
 6587              	__kstrtab_ieee80211_rx:
 6588 0011 69656565 	.string "ieee80211_rx"
 6588      38303231 
 6588      315F7278 
 6588      00
 6589              	.section __ksymtab
 6590              	.align 4
 6593              	__ksymtab_ieee80211_rx:
 6594 0008 00000000 	.long ieee80211_rx
 6595 000c 11000000 	.long __kstrtab_ieee80211_rx
 6596              	.weak __crc_ieee80211_rx
 6597              	.weak __crc_ieee80211_rx_mgt
 10611              	.Letext0:
 49477              	.ident "GCC: (GNU) 3.4.5 20050809 (prerelease) (Ubuntu 3.4.4-6ubuntu8.1)"
GAS LISTING  			page 252


DEFINED SYMBOLS
                            *ABS*:0000000000000000 ieee80211_rx.c
 {entrada estándar}:11     .text:0000000000000000 ieee80211_monitor_rx
 {entrada estándar}:151    .rodata:0000000000000000 __func__.2
 {entrada estándar}:158    .text:00000000000000a9 ieee80211_frag_cache_find
 {entrada estándar}:393    .text:00000000000001ff ieee80211_frag_cache_get
 {entrada estándar}:668    .rodata:0000000000000020 __func__.3
 {entrada estándar}:675    .text:0000000000000362 ieee80211_frag_cache_invalidate
 {entrada estándar}:755    .data:0000000000000000 rfc1042_header
 {entrada estándar}:764    .data:0000000000000006 bridge_tunnel_header
 {entrada estándar}:773    .text:00000000000003d3 ieee80211_is_eapol_frame
 {entrada estándar}:908    .rodata:0000000000000040 __func__.4
 {entrada estándar}:917    .text:00000000000004d7 ieee80211_rx_frame_decrypt
 {entrada estándar}:1133   .text:0000000000000624 ieee80211_rx_frame_decrypt_msdu
 {entrada estándar}:1290   .rodata:000000000000005b __func__.5
 {entrada estándar}:1314   .text:00000000000006f9 ieee80211_rx
 {entrada estándar}:2586   .data:000000000000000c qos_oui
 {entrada estándar}:2592   .text:0000000000000f82 ieee80211_verify_qos_info
 {entrada estándar}:2638   .text:0000000000000fc2 ieee80211_read_qos_param_element
 {entrada estándar}:2712   .text:0000000000001017 ieee80211_read_qos_info_element
 {entrada estándar}:2789   .text:000000000000106f ieee80211_qos_convert_ac_to_parameters
 {entrada estándar}:2860   .rodata:0000000000000080 __func__.6
 {entrada estándar}:2867   .text:00000000000010e2 ieee80211_parse_qos_info_param_IE
 {entrada estándar}:3042   .text:000000000000118c get_info_element_string
 {entrada estándar}:3213   .rodata:00000000000000a2 __func__.7
 {entrada estándar}:3250   .text:00000000000012f3 ieee80211_parse_info_param
 {entrada estándar}:4344   .text:0000000000001ba2 ieee80211_handle_assoc_resp
 {entrada estándar}:4561   .rodata:00000000000000bd __func__.8
 {entrada estándar}:4568   .text:0000000000001d51 ieee80211_network_init
 {entrada estándar}:4821   .rodata:00000000000000d4 __func__.9
 {entrada estándar}:4830   .text:0000000000001f2f update_network
 {entrada estándar}:5115   .rodata:0000000000000100 __func__.10
 {entrada estándar}:5134   .text:0000000000002158 ieee80211_process_probe_response
 {entrada estándar}:5942   .rodata:0000000000000121 __func__.11
 {entrada estándar}:5978   .text:00000000000026fd ieee80211_rx_mgt
 {entrada estándar}:6564   __kcrctab:0000000000000000 __kcrctab_ieee80211_rx_mgt
 {entrada estándar}:6569   __ksymtab_strings:0000000000000000 __kstrtab_ieee80211_rx_mgt
 {entrada estándar}:6575   __ksymtab:0000000000000000 __ksymtab_ieee80211_rx_mgt
 {entrada estándar}:6582   __kcrctab:0000000000000004 __kcrctab_ieee80211_rx
 {entrada estándar}:6587   __ksymtab_strings:0000000000000011 __kstrtab_ieee80211_rx
 {entrada estándar}:6593   __ksymtab:0000000000000008 __ksymtab_ieee80211_rx

UNDEFINED SYMBOLS
netif_rx
jiffies
ieee80211_debug_level
printk
per_cpu__softnet_data
raise_softirq_irqoff
__kfree_skb
alloc_skb
memcmp
skb_under_panic
eth_type_trans
snprintf
__kmalloc
memset
GAS LISTING  			page 253


escape_essid
ieee80211_network_reset
__crc_ieee80211_rx_mgt
__crc_ieee80211_rx
