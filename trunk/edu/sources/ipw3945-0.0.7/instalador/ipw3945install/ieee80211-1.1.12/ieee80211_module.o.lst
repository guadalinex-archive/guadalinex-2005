GAS LISTING  			page 1


   1              	.file "ieee80211_module.c"
   9              	.Ltext0:
  10              	.section .modinfo,"a",@progbits
  13              	__mod_version60:
  14 0000 76657273 	.string "version=1.1.12"
  14      696F6E3D 
  14      312E312E 
  14      313200
  15 000f 00000000 	.align 32
  15      00000000 
  15      00000000 
  15      00000000 
  15      00
  18              	__mod_description61:
  19 0020 64657363 	.string "description=802.11 data/management/control stack"
  19      72697074 
  19      696F6E3D 
  19      3830322E 
  19      31312064 
  20 0051 00000000 	.align 32
  20      00000000 
  20      00000000 
  20      000000
  23              	__mod_author62:
  24 0060 61757468 	.string "author=Copyright (C) 2004-2005 Intel Corporation <jketreno@linux.intel.com>"
  24      6F723D43 
  24      6F707972 
  24      69676874 
  24      20284329 
  27              	__mod_license63:
  28 00ac 6C696365 	.string "license=GPL"
  28      6E73653D 
  28      47504C00 
  29              	.section .rodata.str1.1,"aMS",@progbits,1
  30              	.LC0:
  31 0000 3C343E25 	.string "<4>%s: Out of memory allocating beacons\n"
  31      733A204F 
  31      7574206F 
  31      66206D65 
  31      6D6F7279 
  32              	.text
  34              	ieee80211_networks_allocate:
  35              	.LFB922:
  36              	.file 1 "/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c"
   1:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** /*******************************************************************************
   2:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 
   3:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c ****   Copyright(c) 2004-2005 Intel Corporation. All rights reserved.
   4:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 
   5:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c ****   Portions of this file are based on the WEP enablement code provided by the
   6:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c ****   Host AP project hostap-drivers v0.1.3
   7:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c ****   Copyright (c) 2001-2002, SSH Communications Security Corp and Jouni Malinen
   8:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c ****   <jkmaline@cc.hut.fi>
   9:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c ****   Copyright (c) 2002-2003, Jouni Malinen <jkmaline@cc.hut.fi>
  10:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 
  11:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c ****   This program is free software; you can redistribute it and/or modify it
  12:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c ****   under the terms of version 2 of the GNU General Public License as
  13:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c ****   published by the Free Software Foundation.
GAS LISTING  			page 2


  14:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 
  15:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c ****   This program is distributed in the hope that it will be useful, but WITHOUT
  16:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c ****   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  17:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c ****   FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
  18:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c ****   more details.
  19:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 
  20:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c ****   You should have received a copy of the GNU General Public License along with
  21:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c ****   this program; if not, write to the Free Software Foundation, Inc., 59
  22:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c ****   Temple Place - Suite 330, Boston, MA  02111-1307, USA.
  23:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 
  24:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c ****   The full GNU General Public License is included in this distribution in the
  25:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c ****   file called LICENSE.
  26:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 
  27:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c ****   Contact Information:
  28:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c ****   James P. Ketrenos <ipw2100-admin@linux.intel.com>
  29:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c ****   Intel Corporation, 5200 N.E. Elam Young Parkway, Hillsboro, OR 97124-6497
  30:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 
  31:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** *******************************************************************************/
  32:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 
  33:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** #include <linux/compiler.h>
  34:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** #include <linux/config.h>
  35:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** #include <linux/errno.h>
  36:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** #include <linux/if_arp.h>
  37:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** #include <linux/in6.h>
  38:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** #include <linux/in.h>
  39:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** #include <linux/ip.h>
  40:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** #include <linux/kernel.h>
  41:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** #include <linux/module.h>
  42:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** #include <linux/netdevice.h>
  43:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** #include <linux/proc_fs.h>
  44:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** #include <linux/skbuff.h>
  45:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** #include <linux/slab.h>
  46:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** #include <linux/tcp.h>
  47:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** #include <linux/types.h>
  48:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** #include <linux/wireless.h>
  49:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** #include <linux/etherdevice.h>
  50:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** #include <asm/uaccess.h>
  51:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** #include <net/arp.h>
  52:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 
  53:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** #include <net/ieee80211.h>
  54:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 
  55:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** #define DRV_DESCRIPTION "802.11 data/management/control stack"
  56:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** #define DRV_NAME        "ieee80211"
  57:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** #define DRV_VERSION	IEEE80211_VERSION
  58:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** #define DRV_COPYRIGHT   "Copyright (C) 2004-2005 Intel Corporation <jketreno@linux.intel.com>"
  59:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 
  60:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** MODULE_VERSION(DRV_VERSION);
  61:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** MODULE_DESCRIPTION(DRV_DESCRIPTION);
  62:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** MODULE_AUTHOR(DRV_COPYRIGHT);
  63:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** MODULE_LICENSE("GPL");
  64:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 
  65:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** static int ieee80211_networks_allocate(struct ieee80211_device *ieee)
  66:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** {
  37              	.loc 1 66 0
  38 0000 57       	pushl %edi
  39              	.LCFI0:
  40 0001 56       	pushl %esi
GAS LISTING  			page 3


  41              	.LCFI1:
  42 0002 53       	pushl %ebx
  43              	.LCFI2:
  44              	.loc 1 66 0
  45 0003 8B742410 	movl 16(%esp),%esi
  67:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	if (ieee->networks)
  46              	.loc 1 67 0
  47 0007 8B9EE405 	movl 1508(%esi),%ebx
  47      0000
  68:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 		return 0;
  48              	.loc 1 68 0
  49 000d 31C0     	xorl %eax,%eax
  50              	.loc 1 67 0
  51 000f 85DB     	testl %ebx,%ebx
  52 0011 753E     	jne .L1
  53              	.L5:
  54              	.LBB2:
  55              	.LBB3:
  56              	.LBB4:
  57              	.file 2 "include/linux/slab.h"
   1:include/linux/slab.h **** /*
   2:include/linux/slab.h ****  * linux/mm/slab.h
   3:include/linux/slab.h ****  * Written by Mark Hemment, 1996.
   4:include/linux/slab.h ****  * (markhe@nextd.demon.co.uk)
   5:include/linux/slab.h ****  */
   6:include/linux/slab.h **** 
   7:include/linux/slab.h **** #ifndef _LINUX_SLAB_H
   8:include/linux/slab.h **** #define	_LINUX_SLAB_H
   9:include/linux/slab.h **** 
  10:include/linux/slab.h **** #if	defined(__KERNEL__)
  11:include/linux/slab.h **** 
  12:include/linux/slab.h **** typedef struct kmem_cache_s kmem_cache_t;
  13:include/linux/slab.h **** 
  14:include/linux/slab.h **** #include	<linux/config.h>	/* kmalloc_sizes.h needs CONFIG_ options */
  15:include/linux/slab.h **** #include	<linux/gfp.h>
  16:include/linux/slab.h **** #include	<linux/init.h>
  17:include/linux/slab.h **** #include	<linux/types.h>
  18:include/linux/slab.h **** #include	<asm/page.h>		/* kmalloc_sizes.h needs PAGE_SIZE */
  19:include/linux/slab.h **** #include	<asm/cache.h>		/* kmalloc_sizes.h needs L1_CACHE_BYTES */
  20:include/linux/slab.h **** 
  21:include/linux/slab.h **** /* flags for kmem_cache_alloc() */
  22:include/linux/slab.h **** #define	SLAB_NOFS		GFP_NOFS
  23:include/linux/slab.h **** #define	SLAB_NOIO		GFP_NOIO
  24:include/linux/slab.h **** #define	SLAB_ATOMIC		GFP_ATOMIC
  25:include/linux/slab.h **** #define	SLAB_USER		GFP_USER
  26:include/linux/slab.h **** #define	SLAB_KERNEL		GFP_KERNEL
  27:include/linux/slab.h **** #define	SLAB_DMA		GFP_DMA
  28:include/linux/slab.h **** 
  29:include/linux/slab.h **** #define SLAB_LEVEL_MASK		GFP_LEVEL_MASK
  30:include/linux/slab.h **** 
  31:include/linux/slab.h **** #define	SLAB_NO_GROW		__GFP_NO_GROW	/* don't grow a cache */
  32:include/linux/slab.h **** 
  33:include/linux/slab.h **** /* flags to pass to kmem_cache_create().
  34:include/linux/slab.h ****  * The first 3 are only valid when the allocator as been build
  35:include/linux/slab.h ****  * SLAB_DEBUG_SUPPORT.
  36:include/linux/slab.h ****  */
  37:include/linux/slab.h **** #define	SLAB_DEBUG_FREE		0x00000100UL	/* Peform (expensive) checks on free */
GAS LISTING  			page 4


  38:include/linux/slab.h **** #define	SLAB_DEBUG_INITIAL	0x00000200UL	/* Call constructor (as verifier) */
  39:include/linux/slab.h **** #define	SLAB_RED_ZONE		0x00000400UL	/* Red zone objs in a cache */
  40:include/linux/slab.h **** #define	SLAB_POISON		0x00000800UL	/* Poison objects */
  41:include/linux/slab.h **** #define	SLAB_NO_REAP		0x00001000UL	/* never reap from the cache */
  42:include/linux/slab.h **** #define	SLAB_HWCACHE_ALIGN	0x00002000UL	/* align objs on a h/w cache lines */
  43:include/linux/slab.h **** #define SLAB_CACHE_DMA		0x00004000UL	/* use GFP_DMA memory */
  44:include/linux/slab.h **** #define SLAB_MUST_HWCACHE_ALIGN	0x00008000UL	/* force alignment */
  45:include/linux/slab.h **** #define SLAB_STORE_USER		0x00010000UL	/* store the last owner for bug hunting */
  46:include/linux/slab.h **** #define SLAB_RECLAIM_ACCOUNT	0x00020000UL	/* track pages allocated to indicate
  47:include/linux/slab.h **** 						   what is reclaimable later*/
  48:include/linux/slab.h **** #define SLAB_PANIC		0x00040000UL	/* panic if kmem_cache_create() fails */
  49:include/linux/slab.h **** #define SLAB_DESTROY_BY_RCU	0x00080000UL	/* defer freeing pages to RCU */
  50:include/linux/slab.h **** 
  51:include/linux/slab.h **** /* flags passed to a constructor func */
  52:include/linux/slab.h **** #define	SLAB_CTOR_CONSTRUCTOR	0x001UL		/* if not set, then deconstructor */
  53:include/linux/slab.h **** #define SLAB_CTOR_ATOMIC	0x002UL		/* tell constructor it can't sleep */
  54:include/linux/slab.h **** #define	SLAB_CTOR_VERIFY	0x004UL		/* tell constructor it's a verify call */
  55:include/linux/slab.h **** 
  56:include/linux/slab.h **** /* prototypes */
  57:include/linux/slab.h **** extern void __init kmem_cache_init(void);
  58:include/linux/slab.h **** 
  59:include/linux/slab.h **** extern kmem_cache_t *kmem_cache_create(const char *, size_t, size_t, unsigned long,
  60:include/linux/slab.h **** 				       void (*)(void *, kmem_cache_t *, unsigned long),
  61:include/linux/slab.h **** 				       void (*)(void *, kmem_cache_t *, unsigned long));
  62:include/linux/slab.h **** extern int kmem_cache_destroy(kmem_cache_t *);
  63:include/linux/slab.h **** extern int kmem_cache_shrink(kmem_cache_t *);
  64:include/linux/slab.h **** extern void *kmem_cache_alloc(kmem_cache_t *, unsigned int __nocast);
  65:include/linux/slab.h **** extern void kmem_cache_free(kmem_cache_t *, void *);
  66:include/linux/slab.h **** extern unsigned int kmem_cache_size(kmem_cache_t *);
  67:include/linux/slab.h **** extern kmem_cache_t *kmem_find_general_cachep(size_t size, int gfpflags);
  68:include/linux/slab.h **** 
  69:include/linux/slab.h **** /* Size description struct for general caches. */
  70:include/linux/slab.h **** struct cache_sizes {
  71:include/linux/slab.h **** 	size_t		 cs_size;
  72:include/linux/slab.h **** 	kmem_cache_t	*cs_cachep;
  73:include/linux/slab.h **** 	kmem_cache_t	*cs_dmacachep;
  74:include/linux/slab.h **** };
  75:include/linux/slab.h **** extern struct cache_sizes malloc_sizes[];
  76:include/linux/slab.h **** extern void *__kmalloc(size_t, unsigned int __nocast);
  77:include/linux/slab.h **** 
  78:include/linux/slab.h **** static inline void *kmalloc(size_t size, unsigned int __nocast flags)
  79:include/linux/slab.h **** {
  80:include/linux/slab.h **** 	if (__builtin_constant_p(size)) {
  81:include/linux/slab.h **** 		int i = 0;
  82:include/linux/slab.h **** #define CACHE(x) \
  83:include/linux/slab.h **** 		if (size <= x) \
  84:include/linux/slab.h **** 			goto found; \
  85:include/linux/slab.h **** 		else \
  86:include/linux/slab.h **** 			i++;
  87:include/linux/slab.h **** #include "kmalloc_sizes.h"
  88:include/linux/slab.h **** #undef CACHE
  89:include/linux/slab.h **** 		{
  90:include/linux/slab.h **** 			extern void __you_cannot_kmalloc_that_much(void);
  91:include/linux/slab.h **** 			__you_cannot_kmalloc_that_much();
  92:include/linux/slab.h **** 		}
  93:include/linux/slab.h **** found:
  58              	.loc 2 93 0
GAS LISTING  			page 5


  59 0013 68D00000 	pushl $208
  59      00
  60              	.LCFI3:
  61 0018 FF358800 	pushl malloc_sizes+136
  61      0000
  62              	.LCFI4:
  63 001e E8FCFFFF 	call kmem_cache_alloc
  63      FF
  64 0023 5F       	popl %edi
  65              	.LCFI5:
  66              	.LBE4:
  67              	.LBE3:
  68              	.LBE2:
  69:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 
  70:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	ieee->networks =
  71:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	    kmalloc(MAX_NETWORK_COUNT * sizeof(struct ieee80211_network),
  72:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 		    GFP_KERNEL);
  73:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	if (!ieee->networks) {
  69              	.loc 1 73 0
  70 0024 85C0     	testl %eax,%eax
  71              	.LBB5:
  72              	.LBB6:
  73              	.LBB7:
  74              	.loc 2 93 0
  75 0026 5A       	popl %edx
  76              	.LCFI6:
  77 0027 89C7     	movl %eax,%edi
  78              	.LBE7:
  79              	.LBE6:
  80              	.LBE5:
  81              	.loc 2 79 0
  82 0029 8986E405 	movl %eax,1508(%esi)
  82      0000
  83              	.loc 1 73 0
  84 002f 7515     	jne .L34
  74:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 		printk(KERN_WARNING "%s: Out of memory allocating beacons\n",
  85              	.loc 1 74 0
  86 0031 FF36     	pushl (%esi)
  87              	.LCFI7:
  88 0033 68000000 	pushl $.LC0
  88      00
  89              	.LCFI8:
  90 0038 E8FCFFFF 	call printk
  90      FF
  75:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 		       ieee->dev->name);
  76:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 		return -ENOMEM;
  91              	.loc 1 76 0
  92 003d 5A       	popl %edx
  93              	.LCFI9:
  94 003e B8F4FFFF 	movl $-12,%eax
  94      FF
  95 0043 59       	popl %ecx
  96              	.LCFI10:
  97 0044 EB0B     	jmp .L1
  98              	.L34:
  99              	.LBB8:
 100              	.LBB9:
GAS LISTING  			page 6


 101              	.LBB10:
 102              	.file 3 "include/asm/string.h"
   1:include/asm/string.h **** #ifndef _I386_STRING_H_
   2:include/asm/string.h **** #define _I386_STRING_H_
   3:include/asm/string.h **** 
   4:include/asm/string.h **** #ifdef __KERNEL__
   5:include/asm/string.h **** #include <linux/config.h>
   6:include/asm/string.h **** /*
   7:include/asm/string.h ****  * On a 486 or Pentium, we are better off not using the
   8:include/asm/string.h ****  * byte string operations. But on a 386 or a PPro the
   9:include/asm/string.h ****  * byte string ops are faster than doing it by hand
  10:include/asm/string.h ****  * (MUCH faster on a Pentium).
  11:include/asm/string.h ****  */
  12:include/asm/string.h **** 
  13:include/asm/string.h **** /*
  14:include/asm/string.h ****  * This string-include defines all string functions as inline
  15:include/asm/string.h ****  * functions. Use gcc. It also assumes ds=es=data space, this should be
  16:include/asm/string.h ****  * normal. Most of the string-functions are rather heavily hand-optimized,
  17:include/asm/string.h ****  * see especially strsep,strstr,str[c]spn. They should work, but are not
  18:include/asm/string.h ****  * very easy to understand. Everything is done entirely within the register
  19:include/asm/string.h ****  * set, making the functions fast and clean. String instructions have been
  20:include/asm/string.h ****  * used through-out, making for "slightly" unclear code :-)
  21:include/asm/string.h ****  *
  22:include/asm/string.h ****  *		NO Copyright (C) 1991, 1992 Linus Torvalds,
  23:include/asm/string.h ****  *		consider these trivial functions to be PD.
  24:include/asm/string.h ****  */
  25:include/asm/string.h **** 
  26:include/asm/string.h **** /* AK: in fact I bet it would be better to move this stuff all out of line.
  27:include/asm/string.h ****  */
  28:include/asm/string.h **** 
  29:include/asm/string.h **** #define __HAVE_ARCH_STRCPY
  30:include/asm/string.h **** static inline char * strcpy(char * dest,const char *src)
  31:include/asm/string.h **** {
  32:include/asm/string.h **** int d0, d1, d2;
  33:include/asm/string.h **** __asm__ __volatile__(
  34:include/asm/string.h **** 	"1:\tlodsb\n\t"
  35:include/asm/string.h **** 	"stosb\n\t"
  36:include/asm/string.h **** 	"testb %%al,%%al\n\t"
  37:include/asm/string.h **** 	"jne 1b"
  38:include/asm/string.h **** 	: "=&S" (d0), "=&D" (d1), "=&a" (d2)
  39:include/asm/string.h **** 	:"0" (src),"1" (dest) : "memory");
  40:include/asm/string.h **** return dest;
  41:include/asm/string.h **** }
  42:include/asm/string.h **** 
  43:include/asm/string.h **** #define __HAVE_ARCH_STRNCPY
  44:include/asm/string.h **** static inline char * strncpy(char * dest,const char *src,size_t count)
  45:include/asm/string.h **** {
  46:include/asm/string.h **** int d0, d1, d2, d3;
  47:include/asm/string.h **** __asm__ __volatile__(
  48:include/asm/string.h **** 	"1:\tdecl %2\n\t"
  49:include/asm/string.h **** 	"js 2f\n\t"
  50:include/asm/string.h **** 	"lodsb\n\t"
  51:include/asm/string.h **** 	"stosb\n\t"
  52:include/asm/string.h **** 	"testb %%al,%%al\n\t"
  53:include/asm/string.h **** 	"jne 1b\n\t"
  54:include/asm/string.h **** 	"rep\n\t"
  55:include/asm/string.h **** 	"stosb\n"
GAS LISTING  			page 7


  56:include/asm/string.h **** 	"2:"
  57:include/asm/string.h **** 	: "=&S" (d0), "=&D" (d1), "=&c" (d2), "=&a" (d3)
  58:include/asm/string.h **** 	:"0" (src),"1" (dest),"2" (count) : "memory");
  59:include/asm/string.h **** return dest;
  60:include/asm/string.h **** }
  61:include/asm/string.h **** 
  62:include/asm/string.h **** #define __HAVE_ARCH_STRCAT
  63:include/asm/string.h **** static inline char * strcat(char * dest,const char * src)
  64:include/asm/string.h **** {
  65:include/asm/string.h **** int d0, d1, d2, d3;
  66:include/asm/string.h **** __asm__ __volatile__(
  67:include/asm/string.h **** 	"repne\n\t"
  68:include/asm/string.h **** 	"scasb\n\t"
  69:include/asm/string.h **** 	"decl %1\n"
  70:include/asm/string.h **** 	"1:\tlodsb\n\t"
  71:include/asm/string.h **** 	"stosb\n\t"
  72:include/asm/string.h **** 	"testb %%al,%%al\n\t"
  73:include/asm/string.h **** 	"jne 1b"
  74:include/asm/string.h **** 	: "=&S" (d0), "=&D" (d1), "=&a" (d2), "=&c" (d3)
  75:include/asm/string.h **** 	: "0" (src), "1" (dest), "2" (0), "3" (0xffffffffu):"memory");
  76:include/asm/string.h **** return dest;
  77:include/asm/string.h **** }
  78:include/asm/string.h **** 
  79:include/asm/string.h **** #define __HAVE_ARCH_STRNCAT
  80:include/asm/string.h **** static inline char * strncat(char * dest,const char * src,size_t count)
  81:include/asm/string.h **** {
  82:include/asm/string.h **** int d0, d1, d2, d3;
  83:include/asm/string.h **** __asm__ __volatile__(
  84:include/asm/string.h **** 	"repne\n\t"
  85:include/asm/string.h **** 	"scasb\n\t"
  86:include/asm/string.h **** 	"decl %1\n\t"
  87:include/asm/string.h **** 	"movl %8,%3\n"
  88:include/asm/string.h **** 	"1:\tdecl %3\n\t"
  89:include/asm/string.h **** 	"js 2f\n\t"
  90:include/asm/string.h **** 	"lodsb\n\t"
  91:include/asm/string.h **** 	"stosb\n\t"
  92:include/asm/string.h **** 	"testb %%al,%%al\n\t"
  93:include/asm/string.h **** 	"jne 1b\n"
  94:include/asm/string.h **** 	"2:\txorl %2,%2\n\t"
  95:include/asm/string.h **** 	"stosb"
  96:include/asm/string.h **** 	: "=&S" (d0), "=&D" (d1), "=&a" (d2), "=&c" (d3)
  97:include/asm/string.h **** 	: "0" (src),"1" (dest),"2" (0),"3" (0xffffffffu), "g" (count)
  98:include/asm/string.h **** 	: "memory");
  99:include/asm/string.h **** return dest;
 100:include/asm/string.h **** }
 101:include/asm/string.h **** 
 102:include/asm/string.h **** #define __HAVE_ARCH_STRCMP
 103:include/asm/string.h **** static inline int strcmp(const char * cs,const char * ct)
 104:include/asm/string.h **** {
 105:include/asm/string.h **** int d0, d1;
 106:include/asm/string.h **** register int __res;
 107:include/asm/string.h **** __asm__ __volatile__(
 108:include/asm/string.h **** 	"1:\tlodsb\n\t"
 109:include/asm/string.h **** 	"scasb\n\t"
 110:include/asm/string.h **** 	"jne 2f\n\t"
 111:include/asm/string.h **** 	"testb %%al,%%al\n\t"
 112:include/asm/string.h **** 	"jne 1b\n\t"
GAS LISTING  			page 8


 113:include/asm/string.h **** 	"xorl %%eax,%%eax\n\t"
 114:include/asm/string.h **** 	"jmp 3f\n"
 115:include/asm/string.h **** 	"2:\tsbbl %%eax,%%eax\n\t"
 116:include/asm/string.h **** 	"orb $1,%%al\n"
 117:include/asm/string.h **** 	"3:"
 118:include/asm/string.h **** 	:"=a" (__res), "=&S" (d0), "=&D" (d1)
 119:include/asm/string.h **** 	:"1" (cs),"2" (ct)
 120:include/asm/string.h **** 	:"memory");
 121:include/asm/string.h **** return __res;
 122:include/asm/string.h **** }
 123:include/asm/string.h **** 
 124:include/asm/string.h **** #define __HAVE_ARCH_STRNCMP
 125:include/asm/string.h **** static inline int strncmp(const char * cs,const char * ct,size_t count)
 126:include/asm/string.h **** {
 127:include/asm/string.h **** register int __res;
 128:include/asm/string.h **** int d0, d1, d2;
 129:include/asm/string.h **** __asm__ __volatile__(
 130:include/asm/string.h **** 	"1:\tdecl %3\n\t"
 131:include/asm/string.h **** 	"js 2f\n\t"
 132:include/asm/string.h **** 	"lodsb\n\t"
 133:include/asm/string.h **** 	"scasb\n\t"
 134:include/asm/string.h **** 	"jne 3f\n\t"
 135:include/asm/string.h **** 	"testb %%al,%%al\n\t"
 136:include/asm/string.h **** 	"jne 1b\n"
 137:include/asm/string.h **** 	"2:\txorl %%eax,%%eax\n\t"
 138:include/asm/string.h **** 	"jmp 4f\n"
 139:include/asm/string.h **** 	"3:\tsbbl %%eax,%%eax\n\t"
 140:include/asm/string.h **** 	"orb $1,%%al\n"
 141:include/asm/string.h **** 	"4:"
 142:include/asm/string.h **** 	:"=a" (__res), "=&S" (d0), "=&D" (d1), "=&c" (d2)
 143:include/asm/string.h **** 	:"1" (cs),"2" (ct),"3" (count)
 144:include/asm/string.h **** 	:"memory");
 145:include/asm/string.h **** return __res;
 146:include/asm/string.h **** }
 147:include/asm/string.h **** 
 148:include/asm/string.h **** #define __HAVE_ARCH_STRCHR
 149:include/asm/string.h **** static inline char * strchr(const char * s, int c)
 150:include/asm/string.h **** {
 151:include/asm/string.h **** int d0;
 152:include/asm/string.h **** register char * __res;
 153:include/asm/string.h **** __asm__ __volatile__(
 154:include/asm/string.h **** 	"movb %%al,%%ah\n"
 155:include/asm/string.h **** 	"1:\tlodsb\n\t"
 156:include/asm/string.h **** 	"cmpb %%ah,%%al\n\t"
 157:include/asm/string.h **** 	"je 2f\n\t"
 158:include/asm/string.h **** 	"testb %%al,%%al\n\t"
 159:include/asm/string.h **** 	"jne 1b\n\t"
 160:include/asm/string.h **** 	"movl $1,%1\n"
 161:include/asm/string.h **** 	"2:\tmovl %1,%0\n\t"
 162:include/asm/string.h **** 	"decl %0"
 163:include/asm/string.h **** 	:"=a" (__res), "=&S" (d0)
 164:include/asm/string.h **** 	:"1" (s),"0" (c)
 165:include/asm/string.h **** 	:"memory");
 166:include/asm/string.h **** return __res;
 167:include/asm/string.h **** }
 168:include/asm/string.h **** 
 169:include/asm/string.h **** #define __HAVE_ARCH_STRRCHR
GAS LISTING  			page 9


 170:include/asm/string.h **** static inline char * strrchr(const char * s, int c)
 171:include/asm/string.h **** {
 172:include/asm/string.h **** int d0, d1;
 173:include/asm/string.h **** register char * __res;
 174:include/asm/string.h **** __asm__ __volatile__(
 175:include/asm/string.h **** 	"movb %%al,%%ah\n"
 176:include/asm/string.h **** 	"1:\tlodsb\n\t"
 177:include/asm/string.h **** 	"cmpb %%ah,%%al\n\t"
 178:include/asm/string.h **** 	"jne 2f\n\t"
 179:include/asm/string.h **** 	"leal -1(%%esi),%0\n"
 180:include/asm/string.h **** 	"2:\ttestb %%al,%%al\n\t"
 181:include/asm/string.h **** 	"jne 1b"
 182:include/asm/string.h **** 	:"=g" (__res), "=&S" (d0), "=&a" (d1)
 183:include/asm/string.h **** 	:"0" (0),"1" (s),"2" (c)
 184:include/asm/string.h **** 	:"memory");
 185:include/asm/string.h **** return __res;
 186:include/asm/string.h **** }
 187:include/asm/string.h **** 
 188:include/asm/string.h **** #define __HAVE_ARCH_STRLEN
 189:include/asm/string.h **** static inline size_t strlen(const char * s)
 190:include/asm/string.h **** {
 191:include/asm/string.h **** int d0;
 192:include/asm/string.h **** register int __res;
 193:include/asm/string.h **** __asm__ __volatile__(
 194:include/asm/string.h **** 	"repne\n\t"
 195:include/asm/string.h **** 	"scasb\n\t"
 196:include/asm/string.h **** 	"notl %0\n\t"
 197:include/asm/string.h **** 	"decl %0"
 198:include/asm/string.h **** 	:"=c" (__res), "=&D" (d0)
 199:include/asm/string.h **** 	:"1" (s),"a" (0), "0" (0xffffffffu)
 200:include/asm/string.h **** 	:"memory");
 201:include/asm/string.h **** return __res;
 202:include/asm/string.h **** }
 203:include/asm/string.h **** 
 204:include/asm/string.h **** static inline void * __memcpy(void * to, const void * from, size_t n)
 205:include/asm/string.h **** {
 206:include/asm/string.h **** int d0, d1, d2;
 207:include/asm/string.h **** __asm__ __volatile__(
 208:include/asm/string.h **** 	"rep ; movsl\n\t"
 209:include/asm/string.h **** 	"movl %4,%%ecx\n\t"
 210:include/asm/string.h **** 	"andl $3,%%ecx\n\t"
 211:include/asm/string.h **** #if 1	/* want to pay 2 byte penalty for a chance to skip microcoded rep? */
 212:include/asm/string.h **** 	"jz 1f\n\t"
 213:include/asm/string.h **** #endif
 214:include/asm/string.h **** 	"rep ; movsb\n\t"
 215:include/asm/string.h **** 	"1:"
 216:include/asm/string.h **** 	: "=&c" (d0), "=&D" (d1), "=&S" (d2)
 217:include/asm/string.h **** 	: "0" (n/4), "g" (n), "1" ((long) to), "2" ((long) from)
 218:include/asm/string.h **** 	: "memory");
 219:include/asm/string.h **** return (to);
 220:include/asm/string.h **** }
 221:include/asm/string.h **** 
 222:include/asm/string.h **** /*
 223:include/asm/string.h ****  * This looks ugly, but the compiler can optimize it totally,
 224:include/asm/string.h ****  * as the count is constant.
 225:include/asm/string.h ****  */
 226:include/asm/string.h **** static inline void * __constant_memcpy(void * to, const void * from, size_t n)
GAS LISTING  			page 10


 227:include/asm/string.h **** {
 228:include/asm/string.h **** 	long esi, edi;
 229:include/asm/string.h **** 	if (!n) return to;
 230:include/asm/string.h **** #if 1	/* want to do small copies with non-string ops? */
 231:include/asm/string.h **** 	switch (n) {
 232:include/asm/string.h **** 		case 1: *(char*)to = *(char*)from; return to;
 233:include/asm/string.h **** 		case 2: *(short*)to = *(short*)from; return to;
 234:include/asm/string.h **** 		case 4: *(int*)to = *(int*)from; return to;
 235:include/asm/string.h **** #if 1	/* including those doable with two moves? */
 236:include/asm/string.h **** 		case 3: *(short*)to = *(short*)from;
 237:include/asm/string.h **** 			*((char*)to+2) = *((char*)from+2); return to;
 238:include/asm/string.h **** 		case 5: *(int*)to = *(int*)from;
 239:include/asm/string.h **** 			*((char*)to+4) = *((char*)from+4); return to;
 240:include/asm/string.h **** 		case 6: *(int*)to = *(int*)from;
 241:include/asm/string.h **** 			*((short*)to+2) = *((short*)from+2); return to;
 242:include/asm/string.h **** 		case 8: *(int*)to = *(int*)from;
 243:include/asm/string.h **** 			*((int*)to+1) = *((int*)from+1); return to;
 244:include/asm/string.h **** #endif
 245:include/asm/string.h **** 	}
 246:include/asm/string.h **** #endif
 247:include/asm/string.h **** 	esi = (long) from;
 248:include/asm/string.h **** 	edi = (long) to;
 249:include/asm/string.h **** 	if (n >= 5*4) {
 250:include/asm/string.h **** 		/* large block: use rep prefix */
 251:include/asm/string.h **** 		int ecx;
 252:include/asm/string.h **** 		__asm__ __volatile__(
 253:include/asm/string.h **** 			"rep ; movsl"
 254:include/asm/string.h **** 			: "=&c" (ecx), "=&D" (edi), "=&S" (esi)
 255:include/asm/string.h **** 			: "0" (n/4), "1" (edi),"2" (esi)
 256:include/asm/string.h **** 			: "memory"
 257:include/asm/string.h **** 		);
 258:include/asm/string.h **** 	} else {
 259:include/asm/string.h **** 		/* small block: don't clobber ecx + smaller code */
 260:include/asm/string.h **** 		if (n >= 4*4) __asm__ __volatile__("movsl"
 261:include/asm/string.h **** 			:"=&D"(edi),"=&S"(esi):"0"(edi),"1"(esi):"memory");
 262:include/asm/string.h **** 		if (n >= 3*4) __asm__ __volatile__("movsl"
 263:include/asm/string.h **** 			:"=&D"(edi),"=&S"(esi):"0"(edi),"1"(esi):"memory");
 264:include/asm/string.h **** 		if (n >= 2*4) __asm__ __volatile__("movsl"
 265:include/asm/string.h **** 			:"=&D"(edi),"=&S"(esi):"0"(edi),"1"(esi):"memory");
 266:include/asm/string.h **** 		if (n >= 1*4) __asm__ __volatile__("movsl"
 267:include/asm/string.h **** 			:"=&D"(edi),"=&S"(esi):"0"(edi),"1"(esi):"memory");
 268:include/asm/string.h **** 	}
 269:include/asm/string.h **** 	switch (n % 4) {
 270:include/asm/string.h **** 		/* tail */
 271:include/asm/string.h **** 		case 0: return to;
 272:include/asm/string.h **** 		case 1: __asm__ __volatile__("movsb"
 273:include/asm/string.h **** 			:"=&D"(edi),"=&S"(esi):"0"(edi),"1"(esi):"memory");
 274:include/asm/string.h **** 			return to;
 275:include/asm/string.h **** 		case 2: __asm__ __volatile__("movsw"
 276:include/asm/string.h **** 			:"=&D"(edi),"=&S"(esi):"0"(edi),"1"(esi):"memory");
 277:include/asm/string.h **** 			return to;
 278:include/asm/string.h **** 		default: __asm__ __volatile__("movsw\n\tmovsb"
 279:include/asm/string.h **** 			:"=&D"(edi),"=&S"(esi):"0"(edi),"1"(esi):"memory");
 280:include/asm/string.h **** 			return to;
 281:include/asm/string.h **** 	}
 282:include/asm/string.h **** }
 283:include/asm/string.h **** 
GAS LISTING  			page 11


 284:include/asm/string.h **** #define __HAVE_ARCH_MEMCPY
 285:include/asm/string.h **** 
 286:include/asm/string.h **** #ifdef CONFIG_X86_USE_3DNOW
 287:include/asm/string.h **** 
 288:include/asm/string.h **** #include <asm/mmx.h>
 289:include/asm/string.h **** 
 290:include/asm/string.h **** /*
 291:include/asm/string.h ****  *	This CPU favours 3DNow strongly (eg AMD Athlon)
 292:include/asm/string.h ****  */
 293:include/asm/string.h **** 
 294:include/asm/string.h **** static inline void * __constant_memcpy3d(void * to, const void * from, size_t len)
 295:include/asm/string.h **** {
 296:include/asm/string.h **** 	if (len < 512)
 297:include/asm/string.h **** 		return __constant_memcpy(to, from, len);
 298:include/asm/string.h **** 	return _mmx_memcpy(to, from, len);
 299:include/asm/string.h **** }
 300:include/asm/string.h **** 
 301:include/asm/string.h **** static __inline__ void *__memcpy3d(void *to, const void *from, size_t len)
 302:include/asm/string.h **** {
 303:include/asm/string.h **** 	if (len < 512)
 304:include/asm/string.h **** 		return __memcpy(to, from, len);
 305:include/asm/string.h **** 	return _mmx_memcpy(to, from, len);
 306:include/asm/string.h **** }
 307:include/asm/string.h **** 
 308:include/asm/string.h **** #define memcpy(t, f, n) \
 309:include/asm/string.h **** (__builtin_constant_p(n) ? \
 310:include/asm/string.h ****  __constant_memcpy3d((t),(f),(n)) : \
 311:include/asm/string.h ****  __memcpy3d((t),(f),(n)))
 312:include/asm/string.h **** 
 313:include/asm/string.h **** #else
 314:include/asm/string.h **** 
 315:include/asm/string.h **** /*
 316:include/asm/string.h ****  *	No 3D Now!
 317:include/asm/string.h ****  */
 318:include/asm/string.h ****  
 319:include/asm/string.h **** #define memcpy(t, f, n) \
 320:include/asm/string.h **** (__builtin_constant_p(n) ? \
 321:include/asm/string.h ****  __constant_memcpy((t),(f),(n)) : \
 322:include/asm/string.h ****  __memcpy((t),(f),(n)))
 323:include/asm/string.h **** 
 324:include/asm/string.h **** #endif
 325:include/asm/string.h **** 
 326:include/asm/string.h **** #define __HAVE_ARCH_MEMMOVE
 327:include/asm/string.h **** void *memmove(void * dest,const void * src, size_t n);
 328:include/asm/string.h **** 
 329:include/asm/string.h **** #define memcmp __builtin_memcmp
 330:include/asm/string.h **** 
 331:include/asm/string.h **** #define __HAVE_ARCH_MEMCHR
 332:include/asm/string.h **** static inline void * memchr(const void * cs,int c,size_t count)
 333:include/asm/string.h **** {
 334:include/asm/string.h **** int d0;
 335:include/asm/string.h **** register void * __res;
 336:include/asm/string.h **** if (!count)
 337:include/asm/string.h **** 	return NULL;
 338:include/asm/string.h **** __asm__ __volatile__(
 339:include/asm/string.h **** 	"repne\n\t"
 340:include/asm/string.h **** 	"scasb\n\t"
GAS LISTING  			page 12


 341:include/asm/string.h **** 	"je 1f\n\t"
 342:include/asm/string.h **** 	"movl $1,%0\n"
 343:include/asm/string.h **** 	"1:\tdecl %0"
 344:include/asm/string.h **** 	:"=D" (__res), "=&c" (d0)
 345:include/asm/string.h **** 	:"a" (c),"0" (cs),"1" (count)
 346:include/asm/string.h **** 	:"memory");
 347:include/asm/string.h **** return __res;
 348:include/asm/string.h **** }
 349:include/asm/string.h **** 
 350:include/asm/string.h **** static inline void * __memset_generic(void * s, char c,size_t count)
 351:include/asm/string.h **** {
 352:include/asm/string.h **** int d0, d1;
 353:include/asm/string.h **** __asm__ __volatile__(
 354:include/asm/string.h **** 	"rep\n\t"
 355:include/asm/string.h **** 	"stosb"
 356:include/asm/string.h **** 	: "=&c" (d0), "=&D" (d1)
 357:include/asm/string.h **** 	:"a" (c),"1" (s),"0" (count)
 358:include/asm/string.h **** 	:"memory");
 359:include/asm/string.h **** return s;
 360:include/asm/string.h **** }
 361:include/asm/string.h **** 
 362:include/asm/string.h **** /* we might want to write optimized versions of these later */
 363:include/asm/string.h **** #define __constant_count_memset(s,c,count) __memset_generic((s),(c),(count))
 364:include/asm/string.h **** 
 365:include/asm/string.h **** /*
 366:include/asm/string.h ****  * memset(x,0,y) is a reasonably common thing to do, so we want to fill
 367:include/asm/string.h ****  * things 32 bits at a time even when we don't know the size of the
 368:include/asm/string.h ****  * area at compile-time..
 369:include/asm/string.h ****  */
 370:include/asm/string.h **** static inline void * __constant_c_memset(void * s, unsigned long c, size_t count)
 371:include/asm/string.h **** {
 372:include/asm/string.h **** int d0, d1;
 373:include/asm/string.h **** __asm__ __volatile__(
 374:include/asm/string.h **** 	"rep ; stosl\n\t"
 375:include/asm/string.h **** 	"testb $2,%b3\n\t"
 376:include/asm/string.h **** 	"je 1f\n\t"
 377:include/asm/string.h **** 	"stosw\n"
 378:include/asm/string.h **** 	"1:\ttestb $1,%b3\n\t"
 379:include/asm/string.h **** 	"je 2f\n\t"
 380:include/asm/string.h **** 	"stosb\n"
 381:include/asm/string.h **** 	"2:"
 382:include/asm/string.h **** 	:"=&c" (d0), "=&D" (d1)
 383:include/asm/string.h **** 	:"a" (c), "q" (count), "0" (count/4), "1" ((long) s)
 384:include/asm/string.h **** 	:"memory");
 385:include/asm/string.h **** return (s);	
 386:include/asm/string.h **** }
 387:include/asm/string.h **** 
 388:include/asm/string.h **** /* Added by Gertjan van Wingerde to make minix and sysv module work */
 389:include/asm/string.h **** #define __HAVE_ARCH_STRNLEN
 390:include/asm/string.h **** static inline size_t strnlen(const char * s, size_t count)
 391:include/asm/string.h **** {
 392:include/asm/string.h **** int d0;
 393:include/asm/string.h **** register int __res;
 394:include/asm/string.h **** __asm__ __volatile__(
 395:include/asm/string.h **** 	"movl %2,%0\n\t"
 396:include/asm/string.h **** 	"jmp 2f\n"
 397:include/asm/string.h **** 	"1:\tcmpb $0,(%0)\n\t"
GAS LISTING  			page 13


 398:include/asm/string.h **** 	"je 3f\n\t"
 399:include/asm/string.h **** 	"incl %0\n"
 400:include/asm/string.h **** 	"2:\tdecl %1\n\t"
 401:include/asm/string.h **** 	"cmpl $-1,%1\n\t"
 402:include/asm/string.h **** 	"jne 1b\n"
 403:include/asm/string.h **** 	"3:\tsubl %2,%0"
 404:include/asm/string.h **** 	:"=a" (__res), "=&d" (d0)
 405:include/asm/string.h **** 	:"c" (s),"1" (count)
 406:include/asm/string.h **** 	:"memory");
 407:include/asm/string.h **** return __res;
 408:include/asm/string.h **** }
 409:include/asm/string.h **** /* end of additional stuff */
 410:include/asm/string.h **** 
 411:include/asm/string.h **** #define __HAVE_ARCH_STRSTR
 412:include/asm/string.h **** 
 413:include/asm/string.h **** extern char *strstr(const char *cs, const char *ct);
 414:include/asm/string.h **** 
 415:include/asm/string.h **** /*
 416:include/asm/string.h ****  * This looks horribly ugly, but the compiler can optimize it totally,
 417:include/asm/string.h ****  * as we by now know that both pattern and count is constant..
 418:include/asm/string.h ****  */
 419:include/asm/string.h **** static inline void * __constant_c_and_count_memset(void * s, unsigned long pattern, size_t count)
 420:include/asm/string.h **** {
 421:include/asm/string.h **** 	switch (count) {
 422:include/asm/string.h **** 		case 0:
 423:include/asm/string.h **** 			return s;
 424:include/asm/string.h **** 		case 1:
 425:include/asm/string.h **** 			*(unsigned char *)s = pattern;
 426:include/asm/string.h **** 			return s;
 427:include/asm/string.h **** 		case 2:
 428:include/asm/string.h **** 			*(unsigned short *)s = pattern;
 429:include/asm/string.h **** 			return s;
 430:include/asm/string.h **** 		case 3:
 431:include/asm/string.h **** 			*(unsigned short *)s = pattern;
 432:include/asm/string.h **** 			*(2+(unsigned char *)s) = pattern;
 433:include/asm/string.h **** 			return s;
 434:include/asm/string.h **** 		case 4:
 435:include/asm/string.h **** 			*(unsigned long *)s = pattern;
 436:include/asm/string.h **** 			return s;
 437:include/asm/string.h **** 	}
 438:include/asm/string.h **** #define COMMON(x) \
 439:include/asm/string.h **** __asm__  __volatile__( \
 440:include/asm/string.h **** 	"rep ; stosl" \
 441:include/asm/string.h **** 	x \
 442:include/asm/string.h **** 	: "=&c" (d0), "=&D" (d1) \
 443:include/asm/string.h **** 	: "a" (pattern),"0" (count/4),"1" ((long) s) \
 444:include/asm/string.h **** 	: "memory")
 445:include/asm/string.h **** {
 446:include/asm/string.h **** 	int d0, d1;
 447:include/asm/string.h **** 	switch (count % 4) {
 448:include/asm/string.h **** 		case 0: COMMON(""); return s;
 103              	.loc 3 448 0
 104 0046 B9002B00 	movl $11008,%ecx
 104      00
 105 004b 89D8     	movl %ebx,%eax
 106              	
 107 004d F3AB     	rep
GAS LISTING  			page 14


 108              	
 109              	.LBE10:
 110              	.LBE9:
 111              	.LBE8:
  77:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	}
  78:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 
  79:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	memset(ieee->networks, 0,
  80:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	       MAX_NETWORK_COUNT * sizeof(struct ieee80211_network));
  81:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 
  82:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	return 0;
 112              	.loc 1 82 0
 113 004f 31C0     	xorl %eax,%eax
 114              	.L1:
  83:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** }
 115              	.loc 1 83 0
 116 0051 5B       	popl %ebx
 117 0052 5E       	popl %esi
 118 0053 5F       	popl %edi
 119 0054 C3       	ret
 120              	.LFE922:
 122              	.globl ieee80211_network_reset
 124              	ieee80211_network_reset:
 125              	.LFB923:
  84:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 
  85:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** void ieee80211_network_reset(struct ieee80211_network *network)
  86:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** {
 126              	.loc 1 86 0
 127 0055 53       	pushl %ebx
 128              	.LCFI11:
 129              	.loc 1 86 0
 130 0056 8B5C2408 	movl 8(%esp),%ebx
  87:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	if (!network)
 131              	.loc 1 87 0
 132 005a 85DB     	testl %ebx,%ebx
 133 005c 741B     	je .L48
  88:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 		return;
  89:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 
  90:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	if (network->ibss_dfs) {
 134              	.loc 1 90 0
 135 005e 8B834401 	movl 324(%ebx),%eax
 135      0000
 136 0064 85C0     	testl %eax,%eax
 137 0066 7411     	je .L48
  91:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 		kfree(network->ibss_dfs);
 138              	.loc 1 91 0
 139 0068 50       	pushl %eax
 140              	.LCFI12:
 141 0069 E8FCFFFF 	call kfree
 141      FF
  92:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 		network->ibss_dfs = NULL;
 142              	.loc 1 92 0
 143 006e C7834401 	movl $0,324(%ebx)
 143      00000000 
 143      0000
 144 0078 59       	popl %ecx
 145              	.LCFI13:
 146              	.L48:
GAS LISTING  			page 15


  93:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	}
  94:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** }
 147              	.loc 1 94 0
 148 0079 5B       	popl %ebx
 149 007a C3       	ret
 150              	.LFE923:
 153              	ieee80211_networks_initialize:
 154              	.LFB925:
  95:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 
  96:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** static inline void ieee80211_networks_free(struct ieee80211_device *ieee)
  97:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** {
  98:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	int i;
  99:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 
 100:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	if (!ieee->networks)
 101:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 		return;
 102:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 
 103:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	for (i = 0; i < MAX_NETWORK_COUNT; i++)
 104:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 		if (ieee->networks[i].ibss_dfs)
 105:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 			kfree(ieee->networks[i].ibss_dfs);
 106:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 
 107:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	kfree(ieee->networks);
 108:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	ieee->networks = NULL;
 109:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** }
 110:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 
 111:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** static void ieee80211_networks_initialize(struct ieee80211_device *ieee)
 112:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** {
 155              	.loc 1 112 0
 156 007b 55       	pushl %ebp
 157              	.LCFI14:
 158 007c 57       	pushl %edi
 159              	.LCFI15:
 160 007d 56       	pushl %esi
 161              	.LCFI16:
 162 007e 53       	pushl %ebx
 163              	.LCFI17:
 164              	.loc 1 112 0
 165 007f 8B742414 	movl 20(%esp),%esi
 113:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	int i;
 114:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 
 115:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	INIT_LIST_HEAD(&ieee->network_free_list);
 166              	.loc 1 115 0
 167 0083 8D86D405 	leal 1492(%esi),%eax
 167      0000
 168 0089 8986D405 	movl %eax,1492(%esi)
 168      0000
 169 008f 8986D805 	movl %eax,1496(%esi)
 169      0000
 116:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	INIT_LIST_HEAD(&ieee->network_list);
 170              	.loc 1 116 0
 171 0095 8D86DC05 	leal 1500(%esi),%eax
 171      0000
 172 009b 8986DC05 	movl %eax,1500(%esi)
 172      0000
 173 00a1 8986E005 	movl %eax,1504(%esi)
 173      0000
 174 00a7 31ED     	xorl %ebp,%ebp
 175 00a9 BF7F0000 	movl $127,%edi
GAS LISTING  			page 16


 175      00
 176              	.L59:
 177              	.LBB11:
 178              	.file 4 "include/linux/list.h"
   1:include/linux/list.h **** #ifndef _LINUX_LIST_H
   2:include/linux/list.h **** #define _LINUX_LIST_H
   3:include/linux/list.h **** 
   4:include/linux/list.h **** #ifdef __KERNEL__
   5:include/linux/list.h **** 
   6:include/linux/list.h **** #include <linux/stddef.h>
   7:include/linux/list.h **** #include <linux/prefetch.h>
   8:include/linux/list.h **** #include <asm/system.h>
   9:include/linux/list.h **** 
  10:include/linux/list.h **** /*
  11:include/linux/list.h ****  * These are non-NULL pointers that will result in page faults
  12:include/linux/list.h ****  * under normal circumstances, used to verify that nobody uses
  13:include/linux/list.h ****  * non-initialized list entries.
  14:include/linux/list.h ****  */
  15:include/linux/list.h **** #define LIST_POISON1  ((void *) 0x00100100)
  16:include/linux/list.h **** #define LIST_POISON2  ((void *) 0x00200200)
  17:include/linux/list.h **** 
  18:include/linux/list.h **** /*
  19:include/linux/list.h ****  * Simple doubly linked list implementation.
  20:include/linux/list.h ****  *
  21:include/linux/list.h ****  * Some of the internal functions ("__xxx") are useful when
  22:include/linux/list.h ****  * manipulating whole lists rather than single entries, as
  23:include/linux/list.h ****  * sometimes we already know the next/prev entries and we can
  24:include/linux/list.h ****  * generate better code by using them directly rather than
  25:include/linux/list.h ****  * using the generic single-entry routines.
  26:include/linux/list.h ****  */
  27:include/linux/list.h **** 
  28:include/linux/list.h **** struct list_head {
  29:include/linux/list.h **** 	struct list_head *next, *prev;
  30:include/linux/list.h **** };
  31:include/linux/list.h **** 
  32:include/linux/list.h **** #define LIST_HEAD_INIT(name) { &(name), &(name) }
  33:include/linux/list.h **** 
  34:include/linux/list.h **** #define LIST_HEAD(name) \
  35:include/linux/list.h **** 	struct list_head name = LIST_HEAD_INIT(name)
  36:include/linux/list.h **** 
  37:include/linux/list.h **** #define INIT_LIST_HEAD(ptr) do { \
  38:include/linux/list.h **** 	(ptr)->next = (ptr); (ptr)->prev = (ptr); \
  39:include/linux/list.h **** } while (0)
  40:include/linux/list.h **** 
  41:include/linux/list.h **** /*
  42:include/linux/list.h ****  * Insert a new entry between two known consecutive entries.
  43:include/linux/list.h ****  *
  44:include/linux/list.h ****  * This is only for internal list manipulation where we know
  45:include/linux/list.h ****  * the prev/next entries already!
  46:include/linux/list.h ****  */
  47:include/linux/list.h **** static inline void __list_add(struct list_head *new,
  48:include/linux/list.h **** 			      struct list_head *prev,
  49:include/linux/list.h **** 			      struct list_head *next)
  50:include/linux/list.h **** {
  51:include/linux/list.h **** 	next->prev = new;
  52:include/linux/list.h **** 	new->next = next;
  53:include/linux/list.h **** 	new->prev = prev;
GAS LISTING  			page 17


  54:include/linux/list.h **** 	prev->next = new;
  55:include/linux/list.h **** }
  56:include/linux/list.h **** 
  57:include/linux/list.h **** /**
  58:include/linux/list.h ****  * list_add - add a new entry
  59:include/linux/list.h ****  * @new: new entry to be added
  60:include/linux/list.h ****  * @head: list head to add it after
  61:include/linux/list.h ****  *
  62:include/linux/list.h ****  * Insert a new entry after the specified head.
  63:include/linux/list.h ****  * This is good for implementing stacks.
  64:include/linux/list.h ****  */
  65:include/linux/list.h **** static inline void list_add(struct list_head *new, struct list_head *head)
  66:include/linux/list.h **** {
  67:include/linux/list.h **** 	__list_add(new, head, head->next);
  68:include/linux/list.h **** }
  69:include/linux/list.h **** 
  70:include/linux/list.h **** /**
  71:include/linux/list.h ****  * list_add_tail - add a new entry
  72:include/linux/list.h ****  * @new: new entry to be added
  73:include/linux/list.h ****  * @head: list head to add it before
  74:include/linux/list.h ****  *
  75:include/linux/list.h ****  * Insert a new entry before the specified head.
  76:include/linux/list.h ****  * This is useful for implementing queues.
  77:include/linux/list.h ****  */
  78:include/linux/list.h **** static inline void list_add_tail(struct list_head *new, struct list_head *head)
  79:include/linux/list.h **** {
 179              	.loc 4 79 0
 180 00ae 8B9EE405 	movl 1508(%esi),%ebx
 180      0000
 181 00b4 01EB     	addl %ebp,%ebx
 182 00b6 8D86D405 	leal 1492(%esi),%eax
 182      0000
 183 00bc 8D935001 	leal 336(%ebx),%edx
 183      0000
 184              	.LBB12:
 185              	.LBB13:
 186              	.loc 4 50 0
 187 00c2 8B4804   	movl 4(%eax),%ecx
 188 00c5 81C55801 	addl $344,%ebp
 188      0000
 189 00cb 4F       	decl %edi
 190              	.LBB14:
 191              	.loc 4 51 0
 192 00cc 895004   	movl %edx,4(%eax)
 193              	.loc 4 52 0
 194 00cf 89835001 	movl %eax,336(%ebx)
 194      0000
 195              	.loc 4 53 0
 196 00d5 894A04   	movl %ecx,4(%edx)
 197              	.loc 4 54 0
 198 00d8 8911     	movl %edx,(%ecx)
 199 00da 79D2     	jns .L59
 200              	.LBE14:
 201              	.LBE13:
 202              	.LBE12:
 203              	.LBE11:
 117:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	for (i = 0; i < MAX_NETWORK_COUNT; i++)
GAS LISTING  			page 18


 204              	.loc 1 117 0
 205 00dc 5B       	popl %ebx
 206 00dd 5E       	popl %esi
 207 00de 5F       	popl %edi
 208 00df 5D       	popl %ebp
 209 00e0 C3       	ret
 210              	.LFE925:
 212              	.section .rodata
 215              	__func__.2:
 216 0000 616C6C6F 	.string "alloc_ieee80211"
 216      635F6965 
 216      65653830 
 216      32313100 
 217              	.section .rodata.str1.1
 218              	.LC1:
 219 0029 3C373E69 	.string "<7>ieee80211: %c %s Initializing...\n"
 219      65656538 
 219      30323131 
 219      3A202563 
 219      20257320 
 220              	.LC2:
 221 004e 3C333E69 	.string "<3>ieee80211: Unable to network device.\n"
 221      65656538 
 221      30323131 
 221      3A20556E 
 221      61626C65 
 222              	.LC3:
 223 0077 3C333E69 	.string "<3>ieee80211: Unable to allocate beacon storage: %d\n"
 223      65656538 
 223      30323131 
 223      3A20556E 
 223      61626C65 
 224              	.text
 225              	.globl alloc_ieee80211
 227              	alloc_ieee80211:
 228              	.LFB926:
 118:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 		list_add_tail(&ieee->networks[i].list,
 119:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 			      &ieee->network_free_list);
 120:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** }
 121:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 
 122:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** struct net_device *alloc_ieee80211(int sizeof_priv)
 123:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** {
 229              	.loc 1 123 0
 230 00e1 56       	pushl %esi
 231              	.LCFI18:
 124:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	struct ieee80211_device *ieee;
 125:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	struct net_device *dev;
 126:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	int err;
 127:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 
 128:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	IEEE80211_DEBUG_INFO("Initializing...\n");
 232              	.loc 1 128 0
 233 00e2 F6050000 	testb $1,ieee80211_debug_level
 233      000001
 234              	.loc 1 123 0
 235 00e9 53       	pushl %ebx
 236              	.LCFI19:
 237              	.loc 1 128 0
GAS LISTING  			page 19


 238 00ea 742D     	je .L63
 239              	.LBB15:
 240              	.LBB16:
 241              	.file 5 "include/asm/thread_info.h"
   1:include/asm/thread_info.h **** /* thread_info.h: i386 low-level thread information
   2:include/asm/thread_info.h ****  *
   3:include/asm/thread_info.h ****  * Copyright (C) 2002  David Howells (dhowells@redhat.com)
   4:include/asm/thread_info.h ****  * - Incorporating suggestions made by Linus Torvalds and Dave Miller
   5:include/asm/thread_info.h ****  */
   6:include/asm/thread_info.h **** 
   7:include/asm/thread_info.h **** #ifndef _ASM_THREAD_INFO_H
   8:include/asm/thread_info.h **** #define _ASM_THREAD_INFO_H
   9:include/asm/thread_info.h **** 
  10:include/asm/thread_info.h **** #ifdef __KERNEL__
  11:include/asm/thread_info.h **** 
  12:include/asm/thread_info.h **** #include <linux/config.h>
  13:include/asm/thread_info.h **** #include <linux/compiler.h>
  14:include/asm/thread_info.h **** #include <asm/page.h>
  15:include/asm/thread_info.h **** 
  16:include/asm/thread_info.h **** #ifndef __ASSEMBLY__
  17:include/asm/thread_info.h **** #include <asm/processor.h>
  18:include/asm/thread_info.h **** #endif
  19:include/asm/thread_info.h **** 
  20:include/asm/thread_info.h **** /*
  21:include/asm/thread_info.h ****  * low level task data that entry.S needs immediate access to
  22:include/asm/thread_info.h ****  * - this struct should fit entirely inside of one cache line
  23:include/asm/thread_info.h ****  * - this struct shares the supervisor stack pages
  24:include/asm/thread_info.h ****  * - if the contents of this structure are changed, the assembly constants must also be changed
  25:include/asm/thread_info.h ****  */
  26:include/asm/thread_info.h **** #ifndef __ASSEMBLY__
  27:include/asm/thread_info.h **** 
  28:include/asm/thread_info.h **** struct thread_info {
  29:include/asm/thread_info.h **** 	struct task_struct	*task;		/* main task structure */
  30:include/asm/thread_info.h **** 	struct exec_domain	*exec_domain;	/* execution domain */
  31:include/asm/thread_info.h **** 	unsigned long		flags;		/* low level flags */
  32:include/asm/thread_info.h **** 	unsigned long		status;		/* thread-synchronous flags */
  33:include/asm/thread_info.h **** 	__u32			cpu;		/* current CPU */
  34:include/asm/thread_info.h **** 	__s32			preempt_count; /* 0 => preemptable, <0 => BUG */
  35:include/asm/thread_info.h **** 
  36:include/asm/thread_info.h **** 
  37:include/asm/thread_info.h **** 	mm_segment_t		addr_limit;	/* thread address space:
  38:include/asm/thread_info.h **** 					 	   0-0xBFFFFFFF for user-thead
  39:include/asm/thread_info.h **** 						   0-0xFFFFFFFF for kernel-thread
  40:include/asm/thread_info.h **** 						*/
  41:include/asm/thread_info.h **** 	struct restart_block    restart_block;
  42:include/asm/thread_info.h **** 
  43:include/asm/thread_info.h **** 	unsigned long           previous_esp;   /* ESP of the previous stack in case
  44:include/asm/thread_info.h **** 						   of nested (IRQ) stacks
  45:include/asm/thread_info.h **** 						*/
  46:include/asm/thread_info.h **** 	__u8			supervisor_stack[0];
  47:include/asm/thread_info.h **** };
  48:include/asm/thread_info.h **** 
  49:include/asm/thread_info.h **** #else /* !__ASSEMBLY__ */
  50:include/asm/thread_info.h **** 
  51:include/asm/thread_info.h **** #include <asm/asm_offsets.h>
  52:include/asm/thread_info.h **** 
  53:include/asm/thread_info.h **** #endif
GAS LISTING  			page 20


  54:include/asm/thread_info.h **** 
  55:include/asm/thread_info.h **** #define PREEMPT_ACTIVE		0x10000000
  56:include/asm/thread_info.h **** #ifdef CONFIG_4KSTACKS
  57:include/asm/thread_info.h **** #define THREAD_SIZE            (4096)
  58:include/asm/thread_info.h **** #else
  59:include/asm/thread_info.h **** #define THREAD_SIZE		(8192)
  60:include/asm/thread_info.h **** #endif
  61:include/asm/thread_info.h **** 
  62:include/asm/thread_info.h **** #define STACK_WARN             (THREAD_SIZE/8)
  63:include/asm/thread_info.h **** /*
  64:include/asm/thread_info.h ****  * macros/functions for gaining access to the thread information structure
  65:include/asm/thread_info.h ****  *
  66:include/asm/thread_info.h ****  * preempt_count needs to be 1 initially, until the scheduler is functional.
  67:include/asm/thread_info.h ****  */
  68:include/asm/thread_info.h **** #ifndef __ASSEMBLY__
  69:include/asm/thread_info.h **** 
  70:include/asm/thread_info.h **** #define INIT_THREAD_INFO(tsk)			\
  71:include/asm/thread_info.h **** {						\
  72:include/asm/thread_info.h **** 	.task		= &tsk,			\
  73:include/asm/thread_info.h **** 	.exec_domain	= &default_exec_domain,	\
  74:include/asm/thread_info.h **** 	.flags		= 0,			\
  75:include/asm/thread_info.h **** 	.cpu		= 0,			\
  76:include/asm/thread_info.h **** 	.preempt_count	= 1,			\
  77:include/asm/thread_info.h **** 	.addr_limit	= KERNEL_DS,		\
  78:include/asm/thread_info.h **** 	.restart_block = {			\
  79:include/asm/thread_info.h **** 		.fn = do_no_restart_syscall,	\
  80:include/asm/thread_info.h **** 	},					\
  81:include/asm/thread_info.h **** }
  82:include/asm/thread_info.h **** 
  83:include/asm/thread_info.h **** #define init_thread_info	(init_thread_union.thread_info)
  84:include/asm/thread_info.h **** #define init_stack		(init_thread_union.stack)
  85:include/asm/thread_info.h **** 
  86:include/asm/thread_info.h **** 
  87:include/asm/thread_info.h **** /* how to get the thread information struct from C */
  88:include/asm/thread_info.h **** static inline struct thread_info *current_thread_info(void)
  89:include/asm/thread_info.h **** {
  90:include/asm/thread_info.h **** 	struct thread_info *ti;
  91:include/asm/thread_info.h **** 	__asm__("andl %%esp,%0; ":"=r" (ti) : "0" (~(THREAD_SIZE - 1)));
 242              	.loc 5 91 0
 243 00ec B800E0FF 	movl $-8192,%eax
 243      FF
 244              	
 245 00f1 21E0     	andl %esp,%eax
 246              	
 247              	.LBE16:
 248              	.LBE15:
 249              	.loc 5 89 0
 250 00f3 8B4014   	movl 20(%eax),%eax
 251 00f6 2500FFFF 	andl $268435200,%eax
 251      0F
 252 00fb 83F801   	cmpl $1,%eax
 253 00fe 19C0     	sbbl %eax,%eax
 254 0100 83E00C   	andl $12,%eax
 255 0103 68000000 	pushl $__func__.2
 255      00
 256              	.LCFI20:
 257 0108 83C049   	addl $73,%eax
GAS LISTING  			page 21


 258 010b 50       	pushl %eax
 259              	.LCFI21:
 260 010c 68290000 	pushl $.LC1
 260      00
 261              	.LCFI22:
 262 0111 E8FCFFFF 	call printk
 262      FF
 263 0116 83C40C   	addl $12,%esp
 264              	.LCFI23:
 265              	.L63:
 129:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 
 130:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	dev = alloc_etherdev(sizeof(struct ieee80211_device) + sizeof_priv);
 266              	.loc 1 130 0
 267 0119 8B44240C 	movl 12(%esp),%eax
 268 011d 05B00700 	addl $1968,%eax
 268      00
 269 0122 50       	pushl %eax
 270              	.LCFI24:
 271 0123 E8FCFFFF 	call alloc_etherdev
 271      FF
 131:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	if (!dev) {
 272              	.loc 1 131 0
 273 0128 85C0     	testl %eax,%eax
 274              	.loc 1 130 0
 275 012a 89C6     	movl %eax,%esi
 276              	.loc 1 131 0
 277 012c 59       	popl %ecx
 278              	.LCFI25:
 279 012d 750F     	jne .L68
 132:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 		IEEE80211_ERROR("Unable to network device.\n");
 280              	.loc 1 132 0
 281 012f 684E0000 	pushl $.LC2
 281      00
 282              	.LCFI26:
 283 0134 E8FCFFFF 	call printk
 283      FF
 284 0139 E9F90000 	jmp .L78
 284      00
 285              	.LCFI27:
 286              	.L68:
 287              	.LBB17:
 288              	.LBB18:
 289              	.file 6 "include/linux/netdevice.h"
   1:include/linux/netdevice.h **** /*
   2:include/linux/netdevice.h ****  * INET		An implementation of the TCP/IP protocol suite for the LINUX
   3:include/linux/netdevice.h ****  *		operating system.  INET is implemented using the  BSD Socket
   4:include/linux/netdevice.h ****  *		interface as the means of communication with the user level.
   5:include/linux/netdevice.h ****  *
   6:include/linux/netdevice.h ****  *		Definitions for the Interfaces handler.
   7:include/linux/netdevice.h ****  *
   8:include/linux/netdevice.h ****  * Version:	@(#)dev.h	1.0.10	08/12/93
   9:include/linux/netdevice.h ****  *
  10:include/linux/netdevice.h ****  * Authors:	Ross Biro
  11:include/linux/netdevice.h ****  *		Fred N. van Kempen, <waltje@uWalt.NL.Mugnet.ORG>
  12:include/linux/netdevice.h ****  *		Corey Minyard <wf-rch!minyard@relay.EU.net>
  13:include/linux/netdevice.h ****  *		Donald J. Becker, <becker@cesdis.gsfc.nasa.gov>
  14:include/linux/netdevice.h ****  *		Alan Cox, <Alan.Cox@linux.org>
GAS LISTING  			page 22


  15:include/linux/netdevice.h ****  *		Bjorn Ekwall. <bj0rn@blox.se>
  16:include/linux/netdevice.h ****  *              Pekka Riikonen <priikone@poseidon.pspt.fi>
  17:include/linux/netdevice.h ****  *
  18:include/linux/netdevice.h ****  *		This program is free software; you can redistribute it and/or
  19:include/linux/netdevice.h ****  *		modify it under the terms of the GNU General Public License
  20:include/linux/netdevice.h ****  *		as published by the Free Software Foundation; either version
  21:include/linux/netdevice.h ****  *		2 of the License, or (at your option) any later version.
  22:include/linux/netdevice.h ****  *
  23:include/linux/netdevice.h ****  *		Moved to /usr/include/linux for NET3
  24:include/linux/netdevice.h ****  */
  25:include/linux/netdevice.h **** #ifndef _LINUX_NETDEVICE_H
  26:include/linux/netdevice.h **** #define _LINUX_NETDEVICE_H
  27:include/linux/netdevice.h **** 
  28:include/linux/netdevice.h **** #include <linux/if.h>
  29:include/linux/netdevice.h **** #include <linux/if_ether.h>
  30:include/linux/netdevice.h **** #include <linux/if_packet.h>
  31:include/linux/netdevice.h **** 
  32:include/linux/netdevice.h **** #ifdef __KERNEL__
  33:include/linux/netdevice.h **** #include <asm/atomic.h>
  34:include/linux/netdevice.h **** #include <asm/cache.h>
  35:include/linux/netdevice.h **** #include <asm/byteorder.h>
  36:include/linux/netdevice.h **** 
  37:include/linux/netdevice.h **** #include <linux/config.h>
  38:include/linux/netdevice.h **** #include <linux/device.h>
  39:include/linux/netdevice.h **** #include <linux/percpu.h>
  40:include/linux/netdevice.h **** 
  41:include/linux/netdevice.h **** struct divert_blk;
  42:include/linux/netdevice.h **** struct vlan_group;
  43:include/linux/netdevice.h **** struct ethtool_ops;
  44:include/linux/netdevice.h **** struct netpoll;
  45:include/linux/netdevice.h **** 					/* source back-compat hooks */
  46:include/linux/netdevice.h **** #define SET_ETHTOOL_OPS(netdev,ops) \
  47:include/linux/netdevice.h **** 	( (netdev)->ethtool_ops = (ops) )
  48:include/linux/netdevice.h **** 
  49:include/linux/netdevice.h **** #define HAVE_ALLOC_NETDEV		/* feature macro: alloc_xxxdev
  50:include/linux/netdevice.h **** 					   functions are available. */
  51:include/linux/netdevice.h **** #define HAVE_FREE_NETDEV		/* free_netdev() */
  52:include/linux/netdevice.h **** #define HAVE_NETDEV_PRIV		/* netdev_priv() */
  53:include/linux/netdevice.h **** 
  54:include/linux/netdevice.h **** #define NET_XMIT_SUCCESS	0
  55:include/linux/netdevice.h **** #define NET_XMIT_DROP		1	/* skb dropped			*/
  56:include/linux/netdevice.h **** #define NET_XMIT_CN		2	/* congestion notification	*/
  57:include/linux/netdevice.h **** #define NET_XMIT_POLICED	3	/* skb is shot by police	*/
  58:include/linux/netdevice.h **** #define NET_XMIT_BYPASS		4	/* packet does not leave via dequeue;
  59:include/linux/netdevice.h **** 					   (TC use only - dev_queue_xmit
  60:include/linux/netdevice.h **** 					   returns this as NET_XMIT_SUCCESS) */
  61:include/linux/netdevice.h **** 
  62:include/linux/netdevice.h **** /* Backlog congestion levels */
  63:include/linux/netdevice.h **** #define NET_RX_SUCCESS		0   /* keep 'em coming, baby */
  64:include/linux/netdevice.h **** #define NET_RX_DROP		1  /* packet dropped */
  65:include/linux/netdevice.h **** #define NET_RX_CN_LOW		2   /* storm alert, just in case */
  66:include/linux/netdevice.h **** #define NET_RX_CN_MOD		3   /* Storm on its way! */
  67:include/linux/netdevice.h **** #define NET_RX_CN_HIGH		4   /* The storm is here */
  68:include/linux/netdevice.h **** #define NET_RX_BAD		5  /* packet dropped due to kernel error */
  69:include/linux/netdevice.h **** 
  70:include/linux/netdevice.h **** #define net_xmit_errno(e)	((e) != NET_XMIT_CN ? -ENOBUFS : 0)
  71:include/linux/netdevice.h **** 
GAS LISTING  			page 23


  72:include/linux/netdevice.h **** #endif
  73:include/linux/netdevice.h **** 
  74:include/linux/netdevice.h **** #define MAX_ADDR_LEN	32		/* Largest hardware address length */
  75:include/linux/netdevice.h **** 
  76:include/linux/netdevice.h **** /* Driver transmit return codes */
  77:include/linux/netdevice.h **** #define NETDEV_TX_OK 0		/* driver took care of packet */
  78:include/linux/netdevice.h **** #define NETDEV_TX_BUSY 1	/* driver tx path was busy*/
  79:include/linux/netdevice.h **** #define NETDEV_TX_LOCKED -1	/* driver tx lock was already taken */
  80:include/linux/netdevice.h **** 
  81:include/linux/netdevice.h **** /*
  82:include/linux/netdevice.h ****  *	Compute the worst case header length according to the protocols
  83:include/linux/netdevice.h ****  *	used.
  84:include/linux/netdevice.h ****  */
  85:include/linux/netdevice.h ****  
  86:include/linux/netdevice.h **** #if !defined(CONFIG_AX25) && !defined(CONFIG_AX25_MODULE) && !defined(CONFIG_TR)
  87:include/linux/netdevice.h **** #define LL_MAX_HEADER	32
  88:include/linux/netdevice.h **** #else
  89:include/linux/netdevice.h **** #if defined(CONFIG_AX25) || defined(CONFIG_AX25_MODULE)
  90:include/linux/netdevice.h **** #define LL_MAX_HEADER	96
  91:include/linux/netdevice.h **** #else
  92:include/linux/netdevice.h **** #define LL_MAX_HEADER	48
  93:include/linux/netdevice.h **** #endif
  94:include/linux/netdevice.h **** #endif
  95:include/linux/netdevice.h **** 
  96:include/linux/netdevice.h **** #if !defined(CONFIG_NET_IPIP) && \
  97:include/linux/netdevice.h ****     !defined(CONFIG_IPV6) && !defined(CONFIG_IPV6_MODULE)
  98:include/linux/netdevice.h **** #define MAX_HEADER LL_MAX_HEADER
  99:include/linux/netdevice.h **** #else
 100:include/linux/netdevice.h **** #define MAX_HEADER (LL_MAX_HEADER + 48)
 101:include/linux/netdevice.h **** #endif
 102:include/linux/netdevice.h **** 
 103:include/linux/netdevice.h **** /*
 104:include/linux/netdevice.h ****  *	Network device statistics. Akin to the 2.0 ether stats but
 105:include/linux/netdevice.h ****  *	with byte counters.
 106:include/linux/netdevice.h ****  */
 107:include/linux/netdevice.h ****  
 108:include/linux/netdevice.h **** struct net_device_stats
 109:include/linux/netdevice.h **** {
 110:include/linux/netdevice.h **** 	unsigned long	rx_packets;		/* total packets received	*/
 111:include/linux/netdevice.h **** 	unsigned long	tx_packets;		/* total packets transmitted	*/
 112:include/linux/netdevice.h **** 	unsigned long	rx_bytes;		/* total bytes received 	*/
 113:include/linux/netdevice.h **** 	unsigned long	tx_bytes;		/* total bytes transmitted	*/
 114:include/linux/netdevice.h **** 	unsigned long	rx_errors;		/* bad packets received		*/
 115:include/linux/netdevice.h **** 	unsigned long	tx_errors;		/* packet transmit problems	*/
 116:include/linux/netdevice.h **** 	unsigned long	rx_dropped;		/* no space in linux buffers	*/
 117:include/linux/netdevice.h **** 	unsigned long	tx_dropped;		/* no space available in linux	*/
 118:include/linux/netdevice.h **** 	unsigned long	multicast;		/* multicast packets received	*/
 119:include/linux/netdevice.h **** 	unsigned long	collisions;
 120:include/linux/netdevice.h **** 
 121:include/linux/netdevice.h **** 	/* detailed rx_errors: */
 122:include/linux/netdevice.h **** 	unsigned long	rx_length_errors;
 123:include/linux/netdevice.h **** 	unsigned long	rx_over_errors;		/* receiver ring buff overflow	*/
 124:include/linux/netdevice.h **** 	unsigned long	rx_crc_errors;		/* recved pkt with crc error	*/
 125:include/linux/netdevice.h **** 	unsigned long	rx_frame_errors;	/* recv'd frame alignment error */
 126:include/linux/netdevice.h **** 	unsigned long	rx_fifo_errors;		/* recv'r fifo overrun		*/
 127:include/linux/netdevice.h **** 	unsigned long	rx_missed_errors;	/* receiver missed packet	*/
 128:include/linux/netdevice.h **** 
GAS LISTING  			page 24


 129:include/linux/netdevice.h **** 	/* detailed tx_errors */
 130:include/linux/netdevice.h **** 	unsigned long	tx_aborted_errors;
 131:include/linux/netdevice.h **** 	unsigned long	tx_carrier_errors;
 132:include/linux/netdevice.h **** 	unsigned long	tx_fifo_errors;
 133:include/linux/netdevice.h **** 	unsigned long	tx_heartbeat_errors;
 134:include/linux/netdevice.h **** 	unsigned long	tx_window_errors;
 135:include/linux/netdevice.h **** 	
 136:include/linux/netdevice.h **** 	/* for cslip etc */
 137:include/linux/netdevice.h **** 	unsigned long	rx_compressed;
 138:include/linux/netdevice.h **** 	unsigned long	tx_compressed;
 139:include/linux/netdevice.h **** };
 140:include/linux/netdevice.h **** 
 141:include/linux/netdevice.h **** 
 142:include/linux/netdevice.h **** /* Media selection options. */
 143:include/linux/netdevice.h **** enum {
 144:include/linux/netdevice.h ****         IF_PORT_UNKNOWN = 0,
 145:include/linux/netdevice.h ****         IF_PORT_10BASE2,
 146:include/linux/netdevice.h ****         IF_PORT_10BASET,
 147:include/linux/netdevice.h ****         IF_PORT_AUI,
 148:include/linux/netdevice.h ****         IF_PORT_100BASET,
 149:include/linux/netdevice.h ****         IF_PORT_100BASETX,
 150:include/linux/netdevice.h ****         IF_PORT_100BASEFX
 151:include/linux/netdevice.h **** };
 152:include/linux/netdevice.h **** 
 153:include/linux/netdevice.h **** #ifdef __KERNEL__
 154:include/linux/netdevice.h **** 
 155:include/linux/netdevice.h **** #include <linux/cache.h>
 156:include/linux/netdevice.h **** #include <linux/skbuff.h>
 157:include/linux/netdevice.h **** 
 158:include/linux/netdevice.h **** struct neighbour;
 159:include/linux/netdevice.h **** struct neigh_parms;
 160:include/linux/netdevice.h **** struct sk_buff;
 161:include/linux/netdevice.h **** 
 162:include/linux/netdevice.h **** struct netif_rx_stats
 163:include/linux/netdevice.h **** {
 164:include/linux/netdevice.h **** 	unsigned total;
 165:include/linux/netdevice.h **** 	unsigned dropped;
 166:include/linux/netdevice.h **** 	unsigned time_squeeze;
 167:include/linux/netdevice.h **** 	unsigned throttled;
 168:include/linux/netdevice.h **** 	unsigned fastroute_hit;
 169:include/linux/netdevice.h **** 	unsigned fastroute_success;
 170:include/linux/netdevice.h **** 	unsigned fastroute_defer;
 171:include/linux/netdevice.h **** 	unsigned fastroute_deferred_out;
 172:include/linux/netdevice.h **** 	unsigned fastroute_latency_reduction;
 173:include/linux/netdevice.h **** 	unsigned cpu_collision;
 174:include/linux/netdevice.h **** };
 175:include/linux/netdevice.h **** 
 176:include/linux/netdevice.h **** DECLARE_PER_CPU(struct netif_rx_stats, netdev_rx_stat);
 177:include/linux/netdevice.h **** 
 178:include/linux/netdevice.h **** 
 179:include/linux/netdevice.h **** /*
 180:include/linux/netdevice.h ****  *	We tag multicasts with these structures.
 181:include/linux/netdevice.h ****  */
 182:include/linux/netdevice.h ****  
 183:include/linux/netdevice.h **** struct dev_mc_list
 184:include/linux/netdevice.h **** {	
 185:include/linux/netdevice.h **** 	struct dev_mc_list	*next;
GAS LISTING  			page 25


 186:include/linux/netdevice.h **** 	__u8			dmi_addr[MAX_ADDR_LEN];
 187:include/linux/netdevice.h **** 	unsigned char		dmi_addrlen;
 188:include/linux/netdevice.h **** 	int			dmi_users;
 189:include/linux/netdevice.h **** 	int			dmi_gusers;
 190:include/linux/netdevice.h **** };
 191:include/linux/netdevice.h **** 
 192:include/linux/netdevice.h **** struct hh_cache
 193:include/linux/netdevice.h **** {
 194:include/linux/netdevice.h **** 	struct hh_cache *hh_next;	/* Next entry			     */
 195:include/linux/netdevice.h **** 	atomic_t	hh_refcnt;	/* number of users                   */
 196:include/linux/netdevice.h **** 	unsigned short  hh_type;	/* protocol identifier, f.e ETH_P_IP
 197:include/linux/netdevice.h ****                                          *  NOTE:  For VLANs, this will be the
 198:include/linux/netdevice.h ****                                          *  encapuslated type. --BLG
 199:include/linux/netdevice.h ****                                          */
 200:include/linux/netdevice.h **** 	int		hh_len;		/* length of header */
 201:include/linux/netdevice.h **** 	int		(*hh_output)(struct sk_buff *skb);
 202:include/linux/netdevice.h **** 	rwlock_t	hh_lock;
 203:include/linux/netdevice.h **** 
 204:include/linux/netdevice.h **** 	/* cached hardware header; allow for machine alignment needs.        */
 205:include/linux/netdevice.h **** #define HH_DATA_MOD	16
 206:include/linux/netdevice.h **** #define HH_DATA_OFF(__len) \
 207:include/linux/netdevice.h **** 	(HH_DATA_MOD - (((__len - 1) & (HH_DATA_MOD - 1)) + 1))
 208:include/linux/netdevice.h **** #define HH_DATA_ALIGN(__len) \
 209:include/linux/netdevice.h **** 	(((__len)+(HH_DATA_MOD-1))&~(HH_DATA_MOD - 1))
 210:include/linux/netdevice.h **** 	unsigned long	hh_data[HH_DATA_ALIGN(LL_MAX_HEADER) / sizeof(long)];
 211:include/linux/netdevice.h **** };
 212:include/linux/netdevice.h **** 
 213:include/linux/netdevice.h **** /* Reserve HH_DATA_MOD byte aligned hard_header_len, but at least that much.
 214:include/linux/netdevice.h ****  * Alternative is:
 215:include/linux/netdevice.h ****  *   dev->hard_header_len ? (dev->hard_header_len +
 216:include/linux/netdevice.h ****  *                           (HH_DATA_MOD - 1)) & ~(HH_DATA_MOD - 1) : 0
 217:include/linux/netdevice.h ****  *
 218:include/linux/netdevice.h ****  * We could use other alignment values, but we must maintain the
 219:include/linux/netdevice.h ****  * relationship HH alignment <= LL alignment.
 220:include/linux/netdevice.h ****  */
 221:include/linux/netdevice.h **** #define LL_RESERVED_SPACE(dev) \
 222:include/linux/netdevice.h **** 	(((dev)->hard_header_len&~(HH_DATA_MOD - 1)) + HH_DATA_MOD)
 223:include/linux/netdevice.h **** #define LL_RESERVED_SPACE_EXTRA(dev,extra) \
 224:include/linux/netdevice.h **** 	((((dev)->hard_header_len+extra)&~(HH_DATA_MOD - 1)) + HH_DATA_MOD)
 225:include/linux/netdevice.h **** 
 226:include/linux/netdevice.h **** /* These flag bits are private to the generic network queueing
 227:include/linux/netdevice.h ****  * layer, they may not be explicitly referenced by any other
 228:include/linux/netdevice.h ****  * code.
 229:include/linux/netdevice.h ****  */
 230:include/linux/netdevice.h **** 
 231:include/linux/netdevice.h **** enum netdev_state_t
 232:include/linux/netdevice.h **** {
 233:include/linux/netdevice.h **** 	__LINK_STATE_XOFF=0,
 234:include/linux/netdevice.h **** 	__LINK_STATE_START,
 235:include/linux/netdevice.h **** 	__LINK_STATE_PRESENT,
 236:include/linux/netdevice.h **** 	__LINK_STATE_SCHED,
 237:include/linux/netdevice.h **** 	__LINK_STATE_NOCARRIER,
 238:include/linux/netdevice.h **** 	__LINK_STATE_RX_SCHED,
 239:include/linux/netdevice.h **** 	__LINK_STATE_LINKWATCH_PENDING
 240:include/linux/netdevice.h **** };
 241:include/linux/netdevice.h **** 
 242:include/linux/netdevice.h **** 
GAS LISTING  			page 26


 243:include/linux/netdevice.h **** /*
 244:include/linux/netdevice.h ****  * This structure holds at boot time configured netdevice settings. They
 245:include/linux/netdevice.h ****  * are then used in the device probing. 
 246:include/linux/netdevice.h ****  */
 247:include/linux/netdevice.h **** struct netdev_boot_setup {
 248:include/linux/netdevice.h **** 	char name[IFNAMSIZ];
 249:include/linux/netdevice.h **** 	struct ifmap map;
 250:include/linux/netdevice.h **** };
 251:include/linux/netdevice.h **** #define NETDEV_BOOT_SETUP_MAX 8
 252:include/linux/netdevice.h **** 
 253:include/linux/netdevice.h **** 
 254:include/linux/netdevice.h **** /*
 255:include/linux/netdevice.h ****  *	The DEVICE structure.
 256:include/linux/netdevice.h ****  *	Actually, this whole structure is a big mistake.  It mixes I/O
 257:include/linux/netdevice.h ****  *	data with strictly "high-level" data, and it has to know about
 258:include/linux/netdevice.h ****  *	almost every data structure used in the INET module.
 259:include/linux/netdevice.h ****  *
 260:include/linux/netdevice.h ****  *	FIXME: cleanup struct net_device such that network protocol info
 261:include/linux/netdevice.h ****  *	moves out.
 262:include/linux/netdevice.h ****  */
 263:include/linux/netdevice.h **** 
 264:include/linux/netdevice.h **** struct net_device
 265:include/linux/netdevice.h **** {
 266:include/linux/netdevice.h **** 
 267:include/linux/netdevice.h **** 	/*
 268:include/linux/netdevice.h **** 	 * This is the first field of the "visible" part of this structure
 269:include/linux/netdevice.h **** 	 * (i.e. as seen by users in the "Space.c" file).  It is the name
 270:include/linux/netdevice.h **** 	 * the interface.
 271:include/linux/netdevice.h **** 	 */
 272:include/linux/netdevice.h **** 	char			name[IFNAMSIZ];
 273:include/linux/netdevice.h **** 
 274:include/linux/netdevice.h **** 	/*
 275:include/linux/netdevice.h **** 	 *	I/O specific fields
 276:include/linux/netdevice.h **** 	 *	FIXME: Merge these and struct ifmap into one
 277:include/linux/netdevice.h **** 	 */
 278:include/linux/netdevice.h **** 	unsigned long		mem_end;	/* shared mem end	*/
 279:include/linux/netdevice.h **** 	unsigned long		mem_start;	/* shared mem start	*/
 280:include/linux/netdevice.h **** 	unsigned long		base_addr;	/* device I/O address	*/
 281:include/linux/netdevice.h **** 	unsigned int		irq;		/* device IRQ number	*/
 282:include/linux/netdevice.h **** 
 283:include/linux/netdevice.h **** 	/*
 284:include/linux/netdevice.h **** 	 *	Some hardware also needs these fields, but they are not
 285:include/linux/netdevice.h **** 	 *	part of the usual set specified in Space.c.
 286:include/linux/netdevice.h **** 	 */
 287:include/linux/netdevice.h **** 
 288:include/linux/netdevice.h **** 	unsigned char		if_port;	/* Selectable AUI, TP,..*/
 289:include/linux/netdevice.h **** 	unsigned char		dma;		/* DMA channel		*/
 290:include/linux/netdevice.h **** 
 291:include/linux/netdevice.h **** 	unsigned long		state;
 292:include/linux/netdevice.h **** 
 293:include/linux/netdevice.h **** 	struct net_device	*next;
 294:include/linux/netdevice.h **** 	
 295:include/linux/netdevice.h **** 	/* The device initialization function. Called only once. */
 296:include/linux/netdevice.h **** 	int			(*init)(struct net_device *dev);
 297:include/linux/netdevice.h **** 
 298:include/linux/netdevice.h **** 	/* ------- Fields preinitialized in Space.c finish here ------- */
 299:include/linux/netdevice.h **** 
GAS LISTING  			page 27


 300:include/linux/netdevice.h **** 	struct net_device	*next_sched;
 301:include/linux/netdevice.h **** 
 302:include/linux/netdevice.h **** 	/* Interface index. Unique device identifier	*/
 303:include/linux/netdevice.h **** 	int			ifindex;
 304:include/linux/netdevice.h **** 	int			iflink;
 305:include/linux/netdevice.h **** 
 306:include/linux/netdevice.h **** 
 307:include/linux/netdevice.h **** 	struct net_device_stats* (*get_stats)(struct net_device *dev);
 308:include/linux/netdevice.h **** 	struct iw_statistics*	(*get_wireless_stats)(struct net_device *dev);
 309:include/linux/netdevice.h **** 
 310:include/linux/netdevice.h **** 	/* List of functions to handle Wireless Extensions (instead of ioctl).
 311:include/linux/netdevice.h **** 	 * See <net/iw_handler.h> for details. Jean II */
 312:include/linux/netdevice.h **** 	const struct iw_handler_def *	wireless_handlers;
 313:include/linux/netdevice.h **** 	/* Instance data managed by the core of Wireless Extensions. */
 314:include/linux/netdevice.h **** 	struct iw_public_data *	wireless_data;
 315:include/linux/netdevice.h **** 
 316:include/linux/netdevice.h **** 	struct ethtool_ops *ethtool_ops;
 317:include/linux/netdevice.h **** 
 318:include/linux/netdevice.h **** 	/*
 319:include/linux/netdevice.h **** 	 * This marks the end of the "visible" part of the structure. All
 320:include/linux/netdevice.h **** 	 * fields hereafter are internal to the system, and may change at
 321:include/linux/netdevice.h **** 	 * will (read: may be cleaned up at will).
 322:include/linux/netdevice.h **** 	 */
 323:include/linux/netdevice.h **** 
 324:include/linux/netdevice.h **** 	/* These may be needed for future network-power-down code. */
 325:include/linux/netdevice.h **** 	unsigned long		trans_start;	/* Time (in jiffies) of last Tx	*/
 326:include/linux/netdevice.h **** 	unsigned long		last_rx;	/* Time of last Rx	*/
 327:include/linux/netdevice.h **** 
 328:include/linux/netdevice.h **** 	unsigned short		flags;	/* interface flags (a la BSD)	*/
 329:include/linux/netdevice.h **** 	unsigned short		gflags;
 330:include/linux/netdevice.h ****         unsigned short          priv_flags; /* Like 'flags' but invisible to userspace. */
 331:include/linux/netdevice.h **** 	unsigned short		padded;	/* How much padding added by alloc_netdev() */
 332:include/linux/netdevice.h **** 
 333:include/linux/netdevice.h **** 	unsigned		mtu;	/* interface MTU value		*/
 334:include/linux/netdevice.h **** 	unsigned short		type;	/* interface hardware type	*/
 335:include/linux/netdevice.h **** 	unsigned short		hard_header_len;	/* hardware hdr length	*/
 336:include/linux/netdevice.h **** 	void			*priv;	/* pointer to private data	*/
 337:include/linux/netdevice.h **** 
 338:include/linux/netdevice.h **** 	struct net_device	*master; /* Pointer to master device of a group,
 339:include/linux/netdevice.h **** 					  * which this device is member of.
 340:include/linux/netdevice.h **** 					  */
 341:include/linux/netdevice.h **** 
 342:include/linux/netdevice.h **** 	/* Interface address info. */
 343:include/linux/netdevice.h **** 	unsigned char		broadcast[MAX_ADDR_LEN];	/* hw bcast add	*/
 344:include/linux/netdevice.h **** 	unsigned char		dev_addr[MAX_ADDR_LEN];	/* hw address	*/
 345:include/linux/netdevice.h **** 	unsigned char		addr_len;	/* hardware address length	*/
 346:include/linux/netdevice.h **** 	unsigned short          dev_id;		/* for shared network cards */
 347:include/linux/netdevice.h **** 
 348:include/linux/netdevice.h **** 	struct dev_mc_list	*mc_list;	/* Multicast mac addresses	*/
 349:include/linux/netdevice.h **** 	int			mc_count;	/* Number of installed mcasts	*/
 350:include/linux/netdevice.h **** 	int			promiscuity;
 351:include/linux/netdevice.h **** 	int			allmulti;
 352:include/linux/netdevice.h **** 
 353:include/linux/netdevice.h **** 	int			watchdog_timeo;
 354:include/linux/netdevice.h **** 	struct timer_list	watchdog_timer;
 355:include/linux/netdevice.h **** 
 356:include/linux/netdevice.h **** 	/* Protocol specific pointers */
GAS LISTING  			page 28


 357:include/linux/netdevice.h **** 	
 358:include/linux/netdevice.h **** 	void 			*atalk_ptr;	/* AppleTalk link 	*/
 359:include/linux/netdevice.h **** 	void			*ip_ptr;	/* IPv4 specific data	*/  
 360:include/linux/netdevice.h **** 	void                    *dn_ptr;        /* DECnet specific data */
 361:include/linux/netdevice.h **** 	void                    *ip6_ptr;       /* IPv6 specific data */
 362:include/linux/netdevice.h **** 	void			*ec_ptr;	/* Econet specific data	*/
 363:include/linux/netdevice.h **** 	void			*ax25_ptr;	/* AX.25 specific data */
 364:include/linux/netdevice.h **** 
 365:include/linux/netdevice.h **** 	struct list_head	poll_list;	/* Link to poll list	*/
 366:include/linux/netdevice.h **** 	int			quota;
 367:include/linux/netdevice.h **** 	int			weight;
 368:include/linux/netdevice.h **** 
 369:include/linux/netdevice.h **** 	struct Qdisc		*qdisc;
 370:include/linux/netdevice.h **** 	struct Qdisc		*qdisc_sleeping;
 371:include/linux/netdevice.h **** 	struct Qdisc		*qdisc_ingress;
 372:include/linux/netdevice.h **** 	struct list_head	qdisc_list;
 373:include/linux/netdevice.h **** 	unsigned long		tx_queue_len;	/* Max frames per queue allowed */
 374:include/linux/netdevice.h **** 
 375:include/linux/netdevice.h **** 	/* ingress path synchronizer */
 376:include/linux/netdevice.h **** 	spinlock_t		ingress_lock;
 377:include/linux/netdevice.h **** 	/* hard_start_xmit synchronizer */
 378:include/linux/netdevice.h **** 	spinlock_t		xmit_lock;
 379:include/linux/netdevice.h **** 	/* cpu id of processor entered to hard_start_xmit or -1,
 380:include/linux/netdevice.h **** 	   if nobody entered there.
 381:include/linux/netdevice.h **** 	 */
 382:include/linux/netdevice.h **** 	int			xmit_lock_owner;
 383:include/linux/netdevice.h **** 	/* device queue lock */
 384:include/linux/netdevice.h **** 	spinlock_t		queue_lock;
 385:include/linux/netdevice.h **** 	/* Number of references to this device */
 386:include/linux/netdevice.h **** 	atomic_t		refcnt;
 387:include/linux/netdevice.h **** 	/* delayed register/unregister */
 388:include/linux/netdevice.h **** 	struct list_head	todo_list;
 389:include/linux/netdevice.h **** 	/* device name hash chain */
 390:include/linux/netdevice.h **** 	struct hlist_node	name_hlist;
 391:include/linux/netdevice.h **** 	/* device index hash chain */
 392:include/linux/netdevice.h **** 	struct hlist_node	index_hlist;
 393:include/linux/netdevice.h **** 
 394:include/linux/netdevice.h **** 	/* register/unregister state machine */
 395:include/linux/netdevice.h **** 	enum { NETREG_UNINITIALIZED=0,
 396:include/linux/netdevice.h **** 	       NETREG_REGISTERING,	/* called register_netdevice */
 397:include/linux/netdevice.h **** 	       NETREG_REGISTERED,	/* completed register todo */
 398:include/linux/netdevice.h **** 	       NETREG_UNREGISTERING,	/* called unregister_netdevice */
 399:include/linux/netdevice.h **** 	       NETREG_UNREGISTERED,	/* completed unregister todo */
 400:include/linux/netdevice.h **** 	       NETREG_RELEASED,		/* called free_netdev */
 401:include/linux/netdevice.h **** 	} reg_state;
 402:include/linux/netdevice.h **** 
 403:include/linux/netdevice.h **** 	/* Net device features */
 404:include/linux/netdevice.h **** 	unsigned long		features;
 405:include/linux/netdevice.h **** #define NETIF_F_SG		1	/* Scatter/gather IO. */
 406:include/linux/netdevice.h **** #define NETIF_F_IP_CSUM		2	/* Can checksum only TCP/UDP over IPv4. */
 407:include/linux/netdevice.h **** #define NETIF_F_NO_CSUM		4	/* Does not require checksum. F.e. loopack. */
 408:include/linux/netdevice.h **** #define NETIF_F_HW_CSUM		8	/* Can checksum all the packets. */
 409:include/linux/netdevice.h **** #define NETIF_F_HIGHDMA		32	/* Can DMA to high memory. */
 410:include/linux/netdevice.h **** #define NETIF_F_FRAGLIST	64	/* Scatter/gather IO. */
 411:include/linux/netdevice.h **** #define NETIF_F_HW_VLAN_TX	128	/* Transmit VLAN hw acceleration */
 412:include/linux/netdevice.h **** #define NETIF_F_HW_VLAN_RX	256	/* Receive VLAN hw acceleration */
 413:include/linux/netdevice.h **** #define NETIF_F_HW_VLAN_FILTER	512	/* Receive filtering on VLAN */
GAS LISTING  			page 29


 414:include/linux/netdevice.h **** #define NETIF_F_VLAN_CHALLENGED	1024	/* Device cannot handle VLAN packets */
 415:include/linux/netdevice.h **** #define NETIF_F_TSO		2048	/* Can offload TCP/IP segmentation */
 416:include/linux/netdevice.h **** #define NETIF_F_LLTX		4096	/* LockLess TX */
 417:include/linux/netdevice.h **** 
 418:include/linux/netdevice.h **** 	/* Called after device is detached from network. */
 419:include/linux/netdevice.h **** 	void			(*uninit)(struct net_device *dev);
 420:include/linux/netdevice.h **** 	/* Called after last user reference disappears. */
 421:include/linux/netdevice.h **** 	void			(*destructor)(struct net_device *dev);
 422:include/linux/netdevice.h **** 
 423:include/linux/netdevice.h **** 	/* Pointers to interface service routines.	*/
 424:include/linux/netdevice.h **** 	int			(*open)(struct net_device *dev);
 425:include/linux/netdevice.h **** 	int			(*stop)(struct net_device *dev);
 426:include/linux/netdevice.h **** 	int			(*hard_start_xmit) (struct sk_buff *skb,
 427:include/linux/netdevice.h **** 						    struct net_device *dev);
 428:include/linux/netdevice.h **** #define HAVE_NETDEV_POLL
 429:include/linux/netdevice.h **** 	int			(*poll) (struct net_device *dev, int *quota);
 430:include/linux/netdevice.h **** 	int			(*hard_header) (struct sk_buff *skb,
 431:include/linux/netdevice.h **** 						struct net_device *dev,
 432:include/linux/netdevice.h **** 						unsigned short type,
 433:include/linux/netdevice.h **** 						void *daddr,
 434:include/linux/netdevice.h **** 						void *saddr,
 435:include/linux/netdevice.h **** 						unsigned len);
 436:include/linux/netdevice.h **** 	int			(*rebuild_header)(struct sk_buff *skb);
 437:include/linux/netdevice.h **** #define HAVE_MULTICAST			 
 438:include/linux/netdevice.h **** 	void			(*set_multicast_list)(struct net_device *dev);
 439:include/linux/netdevice.h **** #define HAVE_SET_MAC_ADDR  		 
 440:include/linux/netdevice.h **** 	int			(*set_mac_address)(struct net_device *dev,
 441:include/linux/netdevice.h **** 						   void *addr);
 442:include/linux/netdevice.h **** #define HAVE_PRIVATE_IOCTL
 443:include/linux/netdevice.h **** 	int			(*do_ioctl)(struct net_device *dev,
 444:include/linux/netdevice.h **** 					    struct ifreq *ifr, int cmd);
 445:include/linux/netdevice.h **** #define HAVE_SET_CONFIG
 446:include/linux/netdevice.h **** 	int			(*set_config)(struct net_device *dev,
 447:include/linux/netdevice.h **** 					      struct ifmap *map);
 448:include/linux/netdevice.h **** #define HAVE_HEADER_CACHE
 449:include/linux/netdevice.h **** 	int			(*hard_header_cache)(struct neighbour *neigh,
 450:include/linux/netdevice.h **** 						     struct hh_cache *hh);
 451:include/linux/netdevice.h **** 	void			(*header_cache_update)(struct hh_cache *hh,
 452:include/linux/netdevice.h **** 						       struct net_device *dev,
 453:include/linux/netdevice.h **** 						       unsigned char *  haddr);
 454:include/linux/netdevice.h **** #define HAVE_CHANGE_MTU
 455:include/linux/netdevice.h **** 	int			(*change_mtu)(struct net_device *dev, int new_mtu);
 456:include/linux/netdevice.h **** 
 457:include/linux/netdevice.h **** #define HAVE_TX_TIMEOUT
 458:include/linux/netdevice.h **** 	void			(*tx_timeout) (struct net_device *dev);
 459:include/linux/netdevice.h **** 
 460:include/linux/netdevice.h **** 	void			(*vlan_rx_register)(struct net_device *dev,
 461:include/linux/netdevice.h **** 						    struct vlan_group *grp);
 462:include/linux/netdevice.h **** 	void			(*vlan_rx_add_vid)(struct net_device *dev,
 463:include/linux/netdevice.h **** 						   unsigned short vid);
 464:include/linux/netdevice.h **** 	void			(*vlan_rx_kill_vid)(struct net_device *dev,
 465:include/linux/netdevice.h **** 						    unsigned short vid);
 466:include/linux/netdevice.h **** 
 467:include/linux/netdevice.h **** 	int			(*hard_header_parse)(struct sk_buff *skb,
 468:include/linux/netdevice.h **** 						     unsigned char *haddr);
 469:include/linux/netdevice.h **** 	int			(*neigh_setup)(struct net_device *dev, struct neigh_parms *);
 470:include/linux/netdevice.h **** #ifdef CONFIG_NETPOLL
GAS LISTING  			page 30


 471:include/linux/netdevice.h **** 	struct netpoll		*np;
 472:include/linux/netdevice.h **** #endif
 473:include/linux/netdevice.h **** #ifdef CONFIG_NET_POLL_CONTROLLER
 474:include/linux/netdevice.h **** 	void                    (*poll_controller)(struct net_device *dev);
 475:include/linux/netdevice.h **** #endif
 476:include/linux/netdevice.h **** 
 477:include/linux/netdevice.h **** 	/* bridge stuff */
 478:include/linux/netdevice.h **** 	struct net_bridge_port	*br_port;
 479:include/linux/netdevice.h **** 
 480:include/linux/netdevice.h **** #ifdef CONFIG_NET_DIVERT
 481:include/linux/netdevice.h **** 	/* this will get initialized at each interface type init routine */
 482:include/linux/netdevice.h **** 	struct divert_blk	*divert;
 483:include/linux/netdevice.h **** #endif /* CONFIG_NET_DIVERT */
 484:include/linux/netdevice.h **** 
 485:include/linux/netdevice.h **** 	/* class/net/name entry */
 486:include/linux/netdevice.h **** 	struct class_device	class_dev;
 487:include/linux/netdevice.h **** };
 488:include/linux/netdevice.h **** 
 489:include/linux/netdevice.h **** #define	NETDEV_ALIGN		32
 490:include/linux/netdevice.h **** #define	NETDEV_ALIGN_CONST	(NETDEV_ALIGN - 1)
 491:include/linux/netdevice.h **** 
 492:include/linux/netdevice.h **** static inline void *netdev_priv(struct net_device *dev)
 493:include/linux/netdevice.h **** {
 494:include/linux/netdevice.h **** 	return (char *)dev + ((sizeof(struct net_device)
 290              	.loc 6 494 0
 291 013e 8D982002 	leal 544(%eax),%ebx
 291      0000
 292              	.LBE18:
 293              	.LBE17:
 133:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 		goto failed;
 134:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	}
 135:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	ieee = netdev_priv(dev);
 136:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	dev->hard_start_xmit = ieee80211_xmit;
 294              	.loc 1 136 0
 295 0144 C7805C01 	movl $ieee80211_xmit,348(%eax)
 295      00000000 
 295      0000
 137:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 
 138:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	ieee->dev = dev;
 296              	.loc 1 138 0
 297 014e 89862002 	movl %eax,544(%esi)
 297      0000
 139:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 
 140:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	err = ieee80211_networks_allocate(ieee);
 298              	.loc 1 140 0
 299 0154 53       	pushl %ebx
 300              	.LCFI28:
 301 0155 E8A6FEFF 	call ieee80211_networks_allocate
 301      FF
 141:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	if (err) {
 302              	.loc 1 141 0
 303 015a 85C0     	testl %eax,%eax
 304 015c 5A       	popl %edx
 305              	.LCFI29:
 306 015d 0F85C100 	jne .L77
 306      0000
 142:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 		IEEE80211_ERROR("Unable to allocate beacon storage: %d\n", err);
GAS LISTING  			page 31


 143:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 		goto failed;
 144:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	}
 145:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	ieee80211_networks_initialize(ieee);
 307              	.loc 1 145 0
 308 0163 53       	pushl %ebx
 309              	.LCFI30:
 310 0164 E812FFFF 	call ieee80211_networks_initialize
 310      FF
 146:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 
 147:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	/* Default fragmentation threshold is maximum payload size */
 148:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	ieee->fts = DEFAULT_FTS;
 149:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	ieee->rts = DEFAULT_FTS;
 150:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	ieee->scan_age = DEFAULT_MAX_SCAN_AGE;
 151:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	ieee->open_wep = 1;
 152:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 
 153:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	/* Default to enabling full open WEP with host based encrypt/decrypt */
 154:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	ieee->host_encrypt = 1;
 155:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	ieee->host_decrypt = 1;
 156:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	ieee->host_mc_decrypt = 1;
 157:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 
 158:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	/* Host fragementation in Open mode. Default is enabled.
 159:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	 * Note: host fragmentation is always enabled if host encryption
 160:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	 * is enabled. For cards can do hardware encryption, they must do
 161:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	 * hardware fragmentation as well. So we don't need a variable
 162:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	 * like host_enc_frag. */
 163:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	ieee->host_open_frag = 1;
 164:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	ieee->ieee802_1x = 1;	/* Default to supporting 802.1x */
 165:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 
 166:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	INIT_LIST_HEAD(&ieee->crypt_deinit_list);
 311              	.loc 1 166 0
 312 0169 8D86B808 	leal 2232(%esi),%eax
 312      0000
 313 016f 89839806 	movl %eax,1688(%ebx)
 313      0000
 314 0175 89839C06 	movl %eax,1692(%ebx)
 314      0000
 315              	.loc 1 148 0
 316 017b 66C7834C 	movw $2346,1868(%ebx)
 316      0700002A 
 316      09
 317              	.loc 1 149 0
 318 0184 66C7834E 	movw $2346,1870(%ebx)
 318      0700002A 
 318      09
 319              	.loc 1 150 0
 320 018d C783EC05 	movl $15000,1516(%ebx)
 320      0000983A 
 320      0000
 321              	.loc 1 151 0
 322 0197 C7836006 	movl $1,1632(%ebx)
 322      00000100 
 322      0000
 323              	.loc 1 154 0
 324 01a1 C7836806 	movl $1,1640(%ebx)
 324      00000100 
 324      0000
 325              	.loc 1 155 0
GAS LISTING  			page 32


 326 01ab C7837006 	movl $1,1648(%ebx)
 326      00000100 
 326      0000
 327              	.loc 1 156 0
 328 01b5 C7837406 	movl $1,1652(%ebx)
 328      00000100 
 328      0000
 329              	.loc 1 163 0
 330 01bf C7837806 	movl $1,1656(%ebx)
 330      00000100 
 330      0000
 331              	.loc 1 164 0
 332 01c9 C7838006 	movl $1,1664(%ebx)
 332      00000100 
 332      0000
 333              	.LBB19:
 334              	.file 7 "include/linux/timer.h"
   1:include/linux/timer.h **** #ifndef _LINUX_TIMER_H
   2:include/linux/timer.h **** #define _LINUX_TIMER_H
   3:include/linux/timer.h **** 
   4:include/linux/timer.h **** #include <linux/config.h>
   5:include/linux/timer.h **** #include <linux/list.h>
   6:include/linux/timer.h **** #include <linux/spinlock.h>
   7:include/linux/timer.h **** #include <linux/stddef.h>
   8:include/linux/timer.h **** 
   9:include/linux/timer.h **** struct tvec_t_base_s;
  10:include/linux/timer.h **** 
  11:include/linux/timer.h **** struct timer_list {
  12:include/linux/timer.h **** 	struct list_head entry;
  13:include/linux/timer.h **** 	unsigned long expires;
  14:include/linux/timer.h **** 
  15:include/linux/timer.h **** 	spinlock_t lock;
  16:include/linux/timer.h **** 	unsigned long magic;
  17:include/linux/timer.h **** 
  18:include/linux/timer.h **** 	void (*function)(unsigned long);
  19:include/linux/timer.h **** 	unsigned long data;
  20:include/linux/timer.h **** 
  21:include/linux/timer.h **** 	struct tvec_t_base_s *base;
  22:include/linux/timer.h **** };
  23:include/linux/timer.h **** 
  24:include/linux/timer.h **** #define TIMER_MAGIC	0x4b87ad6e
  25:include/linux/timer.h **** 
  26:include/linux/timer.h **** #define TIMER_INITIALIZER(_function, _expires, _data) {		\
  27:include/linux/timer.h **** 		.function = (_function),			\
  28:include/linux/timer.h **** 		.expires = (_expires),				\
  29:include/linux/timer.h **** 		.data = (_data),				\
  30:include/linux/timer.h **** 		.base = NULL,					\
  31:include/linux/timer.h **** 		.magic = TIMER_MAGIC,				\
  32:include/linux/timer.h **** 		.lock = SPIN_LOCK_UNLOCKED,			\
  33:include/linux/timer.h **** 	}
  34:include/linux/timer.h **** 
  35:include/linux/timer.h **** /***
  36:include/linux/timer.h ****  * init_timer - initialize a timer.
  37:include/linux/timer.h ****  * @timer: the timer to be initialized
  38:include/linux/timer.h ****  *
  39:include/linux/timer.h ****  * init_timer() must be done to a timer prior calling *any* of the
  40:include/linux/timer.h ****  * other timer functions.
GAS LISTING  			page 33


  41:include/linux/timer.h ****  */
  42:include/linux/timer.h **** static inline void init_timer(struct timer_list * timer)
  43:include/linux/timer.h **** {
 335              	.loc 7 43 0
 336 01d3 8D86D408 	leal 2260(%esi),%eax
 336      0000
 337              	.LBE19:
 338              	.loc 1 166 0
 339 01d9 59       	popl %ecx
 340              	.LCFI31:
 341              	.LBB20:
 342              	.LBB21:
  44:include/linux/timer.h **** 	timer->base = NULL;
 343              	.loc 7 44 0
 344 01da C7401800 	movl $0,24(%eax)
 344      000000
  45:include/linux/timer.h **** 	timer->magic = TIMER_MAGIC;
 345              	.loc 7 45 0
 346 01e1 C7400C6E 	movl $1267182958,12(%eax)
 346      AD874B
 347              	.LBE21:
 348              	.LBE20:
 167:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	init_timer(&ieee->crypt_deinit_timer);
 168:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	ieee->crypt_deinit_timer.data = (unsigned long)ieee;
 169:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	ieee->crypt_deinit_timer.function = ieee80211_crypt_deinit_handler;
 170:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	ieee->crypt_quiesced = 0;
 171:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 
 172:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	spin_lock_init(&ieee->lock);
 173:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 
 174:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	ieee->wpa_enabled = 0;
 175:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	ieee->drop_unencrypted = 0;
 176:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	ieee->privacy_invoked = 0;
 177:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 
 178:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	return dev;
 349              	.loc 1 178 0
 350 01e8 89F0     	movl %esi,%eax
 351              	.loc 1 168 0
 352 01ea 899BC806 	movl %ebx,1736(%ebx)
 352      0000
 353              	.loc 1 169 0
 354 01f0 C783C406 	movl $ieee80211_crypt_deinit_handler,1732(%ebx)
 354      00000000 
 354      0000
 355              	.loc 1 170 0
 356 01fa C783D006 	movl $0,1744(%ebx)
 356      00000000 
 356      0000
 357              	.loc 1 174 0
 358 0204 C7838406 	movl $0,1668(%ebx)
 358      00000000 
 358      0000
 359              	.loc 1 175 0
 360 020e C7838806 	movl $0,1672(%ebx)
 360      00000000 
 360      0000
 361              	.loc 1 176 0
 362 0218 C7838C06 	movl $0,1676(%ebx)
GAS LISTING  			page 34


 362      00000000 
 362      0000
 363              	.loc 1 178 0
 364 0222 EB16     	jmp .L62
 365              	.L77:
 366              	.L69:
 367              	.loc 1 142 0
 368 0224 50       	pushl %eax
 369              	.LCFI32:
 370 0225 68770000 	pushl $.LC3
 370      00
 371              	.LCFI33:
 372 022a E8FCFFFF 	call printk
 372      FF
 373              	.loc 1 143 0
 374 022f 58       	popl %eax
 375              	.LCFI34:
 376 0230 5A       	popl %edx
 377              	.LCFI35:
 179:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 
 180:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c ****       failed:
 181:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	if (dev)
 182:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 		free_netdev(dev);
 378              	.loc 1 182 0
 379 0231 56       	pushl %esi
 380              	.LCFI36:
 381 0232 E8FCFFFF 	call free_netdev
 381      FF
 382              	.L78:
 383 0237 5B       	popl %ebx
 384              	.LCFI37:
 183:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	return NULL;
 385              	.loc 1 183 0
 386 0238 31C0     	xorl %eax,%eax
 387              	.L62:
 184:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** }
 388              	.loc 1 184 0
 389 023a 5B       	popl %ebx
 390 023b 5E       	popl %esi
 391 023c C3       	ret
 392              	.LFE926:
 394              	.globl free_ieee80211
 396              	free_ieee80211:
 397              	.LFB927:
 185:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 
 186:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** void free_ieee80211(struct net_device *dev)
 187:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** {
 398              	.loc 1 187 0
 399 023d 55       	pushl %ebp
 400              	.LCFI38:
 401 023e 57       	pushl %edi
 402              	.LCFI39:
 403 023f 56       	pushl %esi
 404              	.LCFI40:
 405 0240 53       	pushl %ebx
 406              	.LCFI41:
 407              	.loc 1 187 0
GAS LISTING  			page 35


 408 0241 8B6C2414 	movl 20(%esp),%ebp
 409              	.LBB22:
 410              	.LBB23:
 411              	.loc 6 494 0
 412 0245 8DB52002 	leal 544(%ebp),%esi
 412      0000
 413              	.LBE23:
 414              	.LBE22:
 188:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	struct ieee80211_device *ieee = netdev_priv(dev);
 189:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 
 190:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	int i;
 191:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 
 192:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	ieee80211_crypt_quiescing(ieee);
 415              	.loc 1 192 0
 416 024b 56       	pushl %esi
 417              	.LCFI42:
 418 024c E8FCFFFF 	call ieee80211_crypt_quiescing
 418      FF
 193:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	del_timer_sync(&ieee->crypt_deinit_timer);
 419              	.loc 1 193 0
 420 0251 8D85D408 	leal 2260(%ebp),%eax
 420      0000
 421 0257 50       	pushl %eax
 422              	.LCFI43:
 423              	.LCFI44:
 424 0258 E8FCFFFF 	call del_timer
 424      FF
 194:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	ieee80211_crypt_deinit_entries(ieee, 1);
 425              	.loc 1 194 0
 426 025d 6A01     	pushl $1
 427              	.LCFI45:
 428 025f 56       	pushl %esi
 429              	.LCFI46:
 430              	.LCFI47:
 431 0260 E8FCFFFF 	call ieee80211_crypt_deinit_entries
 431      FF
 195:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 
 196:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	for (i = 0; i < WEP_KEYS; i++) {
 432              	.loc 1 196 0
 433 0265 31FF     	xorl %edi,%edi
 434 0267 83C410   	addl $16,%esp
 435              	.LCFI48:
 436              	.L93:
 437              	.LBB24:
 197:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 		struct ieee80211_crypt_data *crypt = ieee->crypt[i];
 438              	.loc 1 197 0
 439 026a 8B9CBEA0 	movl 1696(%esi,%edi,4),%ebx
 439      060000
 198:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 		if (crypt) {
 440              	.loc 1 198 0
 441 0271 85DB     	testl %ebx,%ebx
 442 0273 7440     	je .L83
 199:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 			if (crypt->ops) {
 443              	.loc 1 199 0
 444 0275 8B4308   	movl 8(%ebx),%eax
 445 0278 85C0     	testl %eax,%eax
 446 027a 7427     	je .L85
GAS LISTING  			page 36


 200:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 				crypt->ops->deinit(crypt->priv);
 447              	.loc 1 200 0
 448 027c FF730C   	pushl 12(%ebx)
 449              	.LCFI49:
 450 027f FF5010   	call *16(%eax)
 451              	.file 8 "include/linux/module.h"
   1:include/linux/module.h **** #ifndef _LINUX_MODULE_H
   2:include/linux/module.h **** #define _LINUX_MODULE_H
   3:include/linux/module.h **** /*
   4:include/linux/module.h ****  * Dynamic loading of modules into the kernel.
   5:include/linux/module.h ****  *
   6:include/linux/module.h ****  * Rewritten by Richard Henderson <rth@tamu.edu> Dec 1996
   7:include/linux/module.h ****  * Rewritten again by Rusty Russell, 2002
   8:include/linux/module.h ****  */
   9:include/linux/module.h **** #include <linux/config.h>
  10:include/linux/module.h **** #include <linux/sched.h>
  11:include/linux/module.h **** #include <linux/spinlock.h>
  12:include/linux/module.h **** #include <linux/list.h>
  13:include/linux/module.h **** #include <linux/stat.h>
  14:include/linux/module.h **** #include <linux/compiler.h>
  15:include/linux/module.h **** #include <linux/cache.h>
  16:include/linux/module.h **** #include <linux/kmod.h>
  17:include/linux/module.h **** #include <linux/elf.h>
  18:include/linux/module.h **** #include <linux/stringify.h>
  19:include/linux/module.h **** #include <linux/kobject.h>
  20:include/linux/module.h **** #include <linux/moduleparam.h>
  21:include/linux/module.h **** #include <asm/local.h>
  22:include/linux/module.h **** 
  23:include/linux/module.h **** #include <asm/module.h>
  24:include/linux/module.h **** 
  25:include/linux/module.h **** /* Not Yet Implemented */
  26:include/linux/module.h **** #define MODULE_SUPPORTED_DEVICE(name)
  27:include/linux/module.h **** 
  28:include/linux/module.h **** /* v850 toolchain uses a `_' prefix for all user symbols */
  29:include/linux/module.h **** #ifndef MODULE_SYMBOL_PREFIX
  30:include/linux/module.h **** #define MODULE_SYMBOL_PREFIX ""
  31:include/linux/module.h **** #endif
  32:include/linux/module.h **** 
  33:include/linux/module.h **** #define MODULE_NAME_LEN (64 - sizeof(unsigned long))
  34:include/linux/module.h **** 
  35:include/linux/module.h **** struct kernel_symbol
  36:include/linux/module.h **** {
  37:include/linux/module.h **** 	unsigned long value;
  38:include/linux/module.h **** 	const char *name;
  39:include/linux/module.h **** };
  40:include/linux/module.h **** 
  41:include/linux/module.h **** struct modversion_info
  42:include/linux/module.h **** {
  43:include/linux/module.h **** 	unsigned long crc;
  44:include/linux/module.h **** 	char name[MODULE_NAME_LEN];
  45:include/linux/module.h **** };
  46:include/linux/module.h **** 
  47:include/linux/module.h **** struct module;
  48:include/linux/module.h **** 
  49:include/linux/module.h **** struct module_attribute {
  50:include/linux/module.h ****         struct attribute attr;
  51:include/linux/module.h ****         ssize_t (*show)(struct module_attribute *, struct module *, char *);
GAS LISTING  			page 37


  52:include/linux/module.h ****         ssize_t (*store)(struct module_attribute *, struct module *,
  53:include/linux/module.h **** 			 const char *, size_t count);
  54:include/linux/module.h **** };
  55:include/linux/module.h **** 
  56:include/linux/module.h **** struct module_kobject
  57:include/linux/module.h **** {
  58:include/linux/module.h **** 	struct kobject kobj;
  59:include/linux/module.h **** 	struct module *mod;
  60:include/linux/module.h **** };
  61:include/linux/module.h **** 
  62:include/linux/module.h **** /* These are either module local, or the kernel's dummy ones. */
  63:include/linux/module.h **** extern int init_module(void);
  64:include/linux/module.h **** extern void cleanup_module(void);
  65:include/linux/module.h **** 
  66:include/linux/module.h **** /* Archs provide a method of finding the correct exception table. */
  67:include/linux/module.h **** struct exception_table_entry;
  68:include/linux/module.h **** 
  69:include/linux/module.h **** const struct exception_table_entry *
  70:include/linux/module.h **** search_extable(const struct exception_table_entry *first,
  71:include/linux/module.h **** 	       const struct exception_table_entry *last,
  72:include/linux/module.h **** 	       unsigned long value);
  73:include/linux/module.h **** void sort_extable(struct exception_table_entry *start,
  74:include/linux/module.h **** 		  struct exception_table_entry *finish);
  75:include/linux/module.h **** void sort_main_extable(void);
  76:include/linux/module.h **** 
  77:include/linux/module.h **** extern struct subsystem module_subsys;
  78:include/linux/module.h **** 
  79:include/linux/module.h **** #ifdef MODULE
  80:include/linux/module.h **** #define MODULE_GENERIC_TABLE(gtype,name)			\
  81:include/linux/module.h **** extern const struct gtype##_id __mod_##gtype##_table		\
  82:include/linux/module.h ****   __attribute__ ((unused, alias(__stringify(name))))
  83:include/linux/module.h **** 
  84:include/linux/module.h **** extern struct module __this_module;
  85:include/linux/module.h **** #define THIS_MODULE (&__this_module)
  86:include/linux/module.h **** #else  /* !MODULE */
  87:include/linux/module.h **** #define MODULE_GENERIC_TABLE(gtype,name)
  88:include/linux/module.h **** #define THIS_MODULE ((struct module *)0)
  89:include/linux/module.h **** #endif
  90:include/linux/module.h **** 
  91:include/linux/module.h **** /* Generic info of form tag = "info" */
  92:include/linux/module.h **** #define MODULE_INFO(tag, info) __MODULE_INFO(tag, tag, info)
  93:include/linux/module.h **** 
  94:include/linux/module.h **** /* For userspace: you can also call me... */
  95:include/linux/module.h **** #define MODULE_ALIAS(_alias) MODULE_INFO(alias, _alias)
  96:include/linux/module.h **** 
  97:include/linux/module.h **** /*
  98:include/linux/module.h ****  * The following license idents are currently accepted as indicating free
  99:include/linux/module.h ****  * software modules
 100:include/linux/module.h ****  *
 101:include/linux/module.h ****  *	"GPL"				[GNU Public License v2 or later]
 102:include/linux/module.h ****  *	"GPL v2"			[GNU Public License v2]
 103:include/linux/module.h ****  *	"GPL and additional rights"	[GNU Public License v2 rights and more]
 104:include/linux/module.h ****  *	"Dual BSD/GPL"			[GNU Public License v2
 105:include/linux/module.h ****  *					 or BSD license choice]
 106:include/linux/module.h ****  *	"Dual MPL/GPL"			[GNU Public License v2
 107:include/linux/module.h ****  *					 or Mozilla license choice]
 108:include/linux/module.h ****  *
GAS LISTING  			page 38


 109:include/linux/module.h ****  * The following other idents are available
 110:include/linux/module.h ****  *
 111:include/linux/module.h ****  *	"Proprietary"			[Non free products]
 112:include/linux/module.h ****  *
 113:include/linux/module.h ****  * There are dual licensed components, but when running with Linux it is the
 114:include/linux/module.h ****  * GPL that is relevant so this is a non issue. Similarly LGPL linked with GPL
 115:include/linux/module.h ****  * is a GPL combined work.
 116:include/linux/module.h ****  *
 117:include/linux/module.h ****  * This exists for several reasons
 118:include/linux/module.h ****  * 1.	So modinfo can show license info for users wanting to vet their setup 
 119:include/linux/module.h ****  *	is free
 120:include/linux/module.h ****  * 2.	So the community can ignore bug reports including proprietary modules
 121:include/linux/module.h ****  * 3.	So vendors can do likewise based on their own policies
 122:include/linux/module.h ****  */
 123:include/linux/module.h **** #define MODULE_LICENSE(_license) MODULE_INFO(license, _license)
 124:include/linux/module.h **** 
 125:include/linux/module.h **** /* Author, ideally of form NAME <EMAIL>[, NAME <EMAIL>]*[ and NAME <EMAIL>] */
 126:include/linux/module.h **** #define MODULE_AUTHOR(_author) MODULE_INFO(author, _author)
 127:include/linux/module.h ****   
 128:include/linux/module.h **** /* What your module does. */
 129:include/linux/module.h **** #define MODULE_DESCRIPTION(_description) MODULE_INFO(description, _description)
 130:include/linux/module.h **** 
 131:include/linux/module.h **** /* One for each parameter, describing how to use it.  Some files do
 132:include/linux/module.h ****    multiple of these per line, so can't just use MODULE_INFO. */
 133:include/linux/module.h **** #define MODULE_PARM_DESC(_parm, desc) \
 134:include/linux/module.h **** 	__MODULE_INFO(parm, _parm, #_parm ":" desc)
 135:include/linux/module.h **** 
 136:include/linux/module.h **** #define MODULE_DEVICE_TABLE(type,name)		\
 137:include/linux/module.h ****   MODULE_GENERIC_TABLE(type##_device,name)
 138:include/linux/module.h **** 
 139:include/linux/module.h **** /* Version of form [<epoch>:]<version>[-<extra-version>].
 140:include/linux/module.h ****    Or for CVS/RCS ID version, everything but the number is stripped.
 141:include/linux/module.h ****   <epoch>: A (small) unsigned integer which allows you to start versions
 142:include/linux/module.h ****            anew. If not mentioned, it's zero.  eg. "2:1.0" is after
 143:include/linux/module.h **** 	   "1:2.0".
 144:include/linux/module.h ****   <version>: The <version> may contain only alphanumerics and the
 145:include/linux/module.h ****            character `.'.  Ordered by numeric sort for numeric parts,
 146:include/linux/module.h **** 	   ascii sort for ascii parts (as per RPM or DEB algorithm).
 147:include/linux/module.h ****   <extraversion>: Like <version>, but inserted for local
 148:include/linux/module.h ****            customizations, eg "rh3" or "rusty1".
 149:include/linux/module.h **** 
 150:include/linux/module.h ****   Using this automatically adds a checksum of the .c files and the
 151:include/linux/module.h ****   local headers in "srcversion".
 152:include/linux/module.h **** */
 153:include/linux/module.h **** #define MODULE_VERSION(_version) MODULE_INFO(version, _version)
 154:include/linux/module.h **** 
 155:include/linux/module.h **** /* Given an address, look for it in the exception tables */
 156:include/linux/module.h **** const struct exception_table_entry *search_exception_tables(unsigned long add);
 157:include/linux/module.h **** 
 158:include/linux/module.h **** struct notifier_block;
 159:include/linux/module.h **** 
 160:include/linux/module.h **** #ifdef CONFIG_MODULES
 161:include/linux/module.h **** 
 162:include/linux/module.h **** /* Get/put a kernel symbol (calls must be symmetric) */
 163:include/linux/module.h **** void *__symbol_get(const char *symbol);
 164:include/linux/module.h **** void *__symbol_get_gpl(const char *symbol);
 165:include/linux/module.h **** #define symbol_get(x) ((typeof(&x))(__symbol_get(MODULE_SYMBOL_PREFIX #x)))
GAS LISTING  			page 39


 166:include/linux/module.h **** 
 167:include/linux/module.h **** #ifndef __GENKSYMS__
 168:include/linux/module.h **** #ifdef CONFIG_MODVERSIONS
 169:include/linux/module.h **** /* Mark the CRC weak since genksyms apparently decides not to
 170:include/linux/module.h ****  * generate a checksums for some symbols */
 171:include/linux/module.h **** #define __CRC_SYMBOL(sym, sec)					\
 172:include/linux/module.h **** 	extern void *__crc_##sym __attribute__((weak));		\
 173:include/linux/module.h **** 	static const unsigned long __kcrctab_##sym		\
 174:include/linux/module.h **** 	__attribute_used__					\
 175:include/linux/module.h **** 	__attribute__((section("__kcrctab" sec), unused))	\
 176:include/linux/module.h **** 	= (unsigned long) &__crc_##sym;
 177:include/linux/module.h **** #else
 178:include/linux/module.h **** #define __CRC_SYMBOL(sym, sec)
 179:include/linux/module.h **** #endif
 180:include/linux/module.h **** 
 181:include/linux/module.h **** /* For every exported symbol, place a struct in the __ksymtab section */
 182:include/linux/module.h **** #define __EXPORT_SYMBOL(sym, sec)				\
 183:include/linux/module.h **** 	__CRC_SYMBOL(sym, sec)					\
 184:include/linux/module.h **** 	static const char __kstrtab_##sym[]			\
 185:include/linux/module.h **** 	__attribute__((section("__ksymtab_strings")))		\
 186:include/linux/module.h **** 	= MODULE_SYMBOL_PREFIX #sym;                    	\
 187:include/linux/module.h **** 	static const struct kernel_symbol __ksymtab_##sym	\
 188:include/linux/module.h **** 	__attribute_used__					\
 189:include/linux/module.h **** 	__attribute__((section("__ksymtab" sec), unused))	\
 190:include/linux/module.h **** 	= { (unsigned long)&sym, __kstrtab_##sym }
 191:include/linux/module.h **** 
 192:include/linux/module.h **** #define EXPORT_SYMBOL(sym)					\
 193:include/linux/module.h **** 	__EXPORT_SYMBOL(sym, "")
 194:include/linux/module.h **** 
 195:include/linux/module.h **** #define EXPORT_SYMBOL_GPL(sym)					\
 196:include/linux/module.h **** 	__EXPORT_SYMBOL(sym, "_gpl")
 197:include/linux/module.h **** 
 198:include/linux/module.h **** #endif
 199:include/linux/module.h **** 
 200:include/linux/module.h **** struct module_ref
 201:include/linux/module.h **** {
 202:include/linux/module.h **** 	local_t count;
 203:include/linux/module.h **** } ____cacheline_aligned;
 204:include/linux/module.h **** 
 205:include/linux/module.h **** enum module_state
 206:include/linux/module.h **** {
 207:include/linux/module.h **** 	MODULE_STATE_LIVE,
 208:include/linux/module.h **** 	MODULE_STATE_COMING,
 209:include/linux/module.h **** 	MODULE_STATE_GOING,
 210:include/linux/module.h **** };
 211:include/linux/module.h **** 
 212:include/linux/module.h **** /* Similar stuff for section attributes. */
 213:include/linux/module.h **** #define MODULE_SECT_NAME_LEN 32
 214:include/linux/module.h **** struct module_sect_attr
 215:include/linux/module.h **** {
 216:include/linux/module.h **** 	struct module_attribute mattr;
 217:include/linux/module.h **** 	char name[MODULE_SECT_NAME_LEN];
 218:include/linux/module.h **** 	unsigned long address;
 219:include/linux/module.h **** };
 220:include/linux/module.h **** 
 221:include/linux/module.h **** struct module_sect_attrs
 222:include/linux/module.h **** {
GAS LISTING  			page 40


 223:include/linux/module.h **** 	struct attribute_group grp;
 224:include/linux/module.h **** 	struct module_sect_attr attrs[0];
 225:include/linux/module.h **** };
 226:include/linux/module.h **** 
 227:include/linux/module.h **** struct module_param_attrs;
 228:include/linux/module.h **** 
 229:include/linux/module.h **** struct module
 230:include/linux/module.h **** {
 231:include/linux/module.h **** 	enum module_state state;
 232:include/linux/module.h **** 
 233:include/linux/module.h **** 	/* Member of list of modules */
 234:include/linux/module.h **** 	struct list_head list;
 235:include/linux/module.h **** 
 236:include/linux/module.h **** 	/* Unique handle for this module */
 237:include/linux/module.h **** 	char name[MODULE_NAME_LEN];
 238:include/linux/module.h **** 
 239:include/linux/module.h **** 	/* Sysfs stuff. */
 240:include/linux/module.h **** 	struct module_kobject mkobj;
 241:include/linux/module.h **** 	struct module_param_attrs *param_attrs;
 242:include/linux/module.h **** 
 243:include/linux/module.h **** 	/* Exported symbols */
 244:include/linux/module.h **** 	const struct kernel_symbol *syms;
 245:include/linux/module.h **** 	unsigned int num_syms;
 246:include/linux/module.h **** 	const unsigned long *crcs;
 247:include/linux/module.h **** 
 248:include/linux/module.h **** 	/* GPL-only exported symbols. */
 249:include/linux/module.h **** 	const struct kernel_symbol *gpl_syms;
 250:include/linux/module.h **** 	unsigned int num_gpl_syms;
 251:include/linux/module.h **** 	const unsigned long *gpl_crcs;
 252:include/linux/module.h **** 
 253:include/linux/module.h **** 	/* Exception table */
 254:include/linux/module.h **** 	unsigned int num_exentries;
 255:include/linux/module.h **** 	const struct exception_table_entry *extable;
 256:include/linux/module.h **** 
 257:include/linux/module.h **** 	/* Startup function. */
 258:include/linux/module.h **** 	int (*init)(void);
 259:include/linux/module.h **** 
 260:include/linux/module.h **** 	/* If this is non-NULL, vfree after init() returns */
 261:include/linux/module.h **** 	void *module_init;
 262:include/linux/module.h **** 
 263:include/linux/module.h **** 	/* Here is the actual code + data, vfree'd on unload. */
 264:include/linux/module.h **** 	void *module_core;
 265:include/linux/module.h **** 
 266:include/linux/module.h **** 	/* Here are the sizes of the init and core sections */
 267:include/linux/module.h **** 	unsigned long init_size, core_size;
 268:include/linux/module.h **** 
 269:include/linux/module.h **** 	/* The size of the executable code in each section.  */
 270:include/linux/module.h **** 	unsigned long init_text_size, core_text_size;
 271:include/linux/module.h **** 
 272:include/linux/module.h **** 	/* Arch-specific module values */
 273:include/linux/module.h **** 	struct mod_arch_specific arch;
 274:include/linux/module.h **** 
 275:include/linux/module.h **** 	/* Am I unsafe to unload? */
 276:include/linux/module.h **** 	int unsafe;
 277:include/linux/module.h **** 
 278:include/linux/module.h **** 	/* Am I GPL-compatible */
 279:include/linux/module.h **** 	int license_gplok;
GAS LISTING  			page 41


 280:include/linux/module.h **** 
 281:include/linux/module.h **** #ifdef CONFIG_MODULE_UNLOAD
 282:include/linux/module.h **** 	/* Reference counts */
 283:include/linux/module.h **** 	struct module_ref ref[NR_CPUS];
 284:include/linux/module.h **** 
 285:include/linux/module.h **** 	/* What modules depend on me? */
 286:include/linux/module.h **** 	struct list_head modules_which_use_me;
 287:include/linux/module.h **** 
 288:include/linux/module.h **** 	/* Who is waiting for us to be unloaded */
 289:include/linux/module.h **** 	struct task_struct *waiter;
 290:include/linux/module.h **** 
 291:include/linux/module.h **** 	/* Destruction function. */
 292:include/linux/module.h **** 	void (*exit)(void);
 293:include/linux/module.h **** #endif
 294:include/linux/module.h **** 
 295:include/linux/module.h **** #ifdef CONFIG_KALLSYMS
 296:include/linux/module.h **** 	/* We keep the symbol and string tables for kallsyms. */
 297:include/linux/module.h **** 	Elf_Sym *symtab;
 298:include/linux/module.h **** 	unsigned long num_symtab;
 299:include/linux/module.h **** 	char *strtab;
 300:include/linux/module.h **** 
 301:include/linux/module.h **** 	/* Section attributes */
 302:include/linux/module.h **** 	struct module_sect_attrs *sect_attrs;
 303:include/linux/module.h **** #endif
 304:include/linux/module.h **** 
 305:include/linux/module.h **** 	/* Per-cpu data. */
 306:include/linux/module.h **** 	void *percpu;
 307:include/linux/module.h **** 
 308:include/linux/module.h **** 	/* The command line arguments (may be mangled).  People like
 309:include/linux/module.h **** 	   keeping pointers to this stuff */
 310:include/linux/module.h **** 	char *args;
 311:include/linux/module.h **** };
 312:include/linux/module.h **** 
 313:include/linux/module.h **** /* FIXME: It'd be nice to isolate modules during init, too, so they
 314:include/linux/module.h ****    aren't used before they (may) fail.  But presently too much code
 315:include/linux/module.h ****    (IDE & SCSI) require entry into the module during init.*/
 316:include/linux/module.h **** static inline int module_is_live(struct module *mod)
 317:include/linux/module.h **** {
 318:include/linux/module.h **** 	return mod->state != MODULE_STATE_GOING;
 319:include/linux/module.h **** }
 320:include/linux/module.h **** 
 321:include/linux/module.h **** /* Is this address in a module? (second is with no locks, for oops) */
 322:include/linux/module.h **** struct module *module_text_address(unsigned long addr);
 323:include/linux/module.h **** struct module *__module_text_address(unsigned long addr);
 324:include/linux/module.h **** 
 325:include/linux/module.h **** /* Returns module and fills in value, defined and namebuf, or NULL if
 326:include/linux/module.h ****    symnum out of range. */
 327:include/linux/module.h **** struct module *module_get_kallsym(unsigned int symnum,
 328:include/linux/module.h **** 				  unsigned long *value,
 329:include/linux/module.h **** 				  char *type,
 330:include/linux/module.h **** 				  char namebuf[128]);
 331:include/linux/module.h **** 
 332:include/linux/module.h **** /* Look for this name: can be of form module:name. */
 333:include/linux/module.h **** unsigned long module_kallsyms_lookup_name(const char *name);
 334:include/linux/module.h **** 
 335:include/linux/module.h **** int is_exported(const char *name, const struct module *mod);
 336:include/linux/module.h **** 
GAS LISTING  			page 42


 337:include/linux/module.h **** extern void __module_put_and_exit(struct module *mod, long code)
 338:include/linux/module.h **** 	__attribute__((noreturn));
 339:include/linux/module.h **** #define module_put_and_exit(code) __module_put_and_exit(THIS_MODULE, code);
 340:include/linux/module.h **** 
 341:include/linux/module.h **** #ifdef CONFIG_MODULE_UNLOAD
 342:include/linux/module.h **** unsigned int module_refcount(struct module *mod);
 343:include/linux/module.h **** void __symbol_put(const char *symbol);
 344:include/linux/module.h **** #define symbol_put(x) __symbol_put(MODULE_SYMBOL_PREFIX #x)
 345:include/linux/module.h **** void symbol_put_addr(void *addr);
 346:include/linux/module.h **** 
 347:include/linux/module.h **** /* Sometimes we know we already have a refcount, and it's easier not
 348:include/linux/module.h ****    to handle the error case (which only happens with rmmod --wait). */
 349:include/linux/module.h **** static inline void __module_get(struct module *module)
 350:include/linux/module.h **** {
 351:include/linux/module.h **** 	if (module) {
 352:include/linux/module.h **** 		BUG_ON(module_refcount(module) == 0);
 353:include/linux/module.h **** 		local_inc(&module->ref[get_cpu()].count);
 354:include/linux/module.h **** 		put_cpu();
 355:include/linux/module.h **** 	}
 356:include/linux/module.h **** }
 357:include/linux/module.h **** 
 358:include/linux/module.h **** static inline int try_module_get(struct module *module)
 359:include/linux/module.h **** {
 360:include/linux/module.h **** 	int ret = 1;
 361:include/linux/module.h **** 
 362:include/linux/module.h **** 	if (module) {
 363:include/linux/module.h **** 		unsigned int cpu = get_cpu();
 364:include/linux/module.h **** 		if (likely(module_is_live(module)))
 365:include/linux/module.h **** 			local_inc(&module->ref[cpu].count);
 366:include/linux/module.h **** 		else
 367:include/linux/module.h **** 			ret = 0;
 368:include/linux/module.h **** 		put_cpu();
 369:include/linux/module.h **** 	}
 370:include/linux/module.h **** 	return ret;
 371:include/linux/module.h **** }
 372:include/linux/module.h **** 
 373:include/linux/module.h **** static inline void module_put(struct module *module)
 374:include/linux/module.h **** {
 452              	.loc 8 374 0
 453 0282 58       	popl %eax
 454              	.LCFI50:
 455              	.LBB25:
 456 0283 8B4308   	movl 8(%ebx),%eax
 457 0286 8B404C   	movl 76(%eax),%eax
 458              	.LBB26:
 375:include/linux/module.h **** 	if (module) {
 459              	.loc 8 375 0
 460 0289 85C0     	testl %eax,%eax
 461 028b 7416     	je .L85
 462              	.LBB27:
 463              	.LBB28:
 464              	.LBB29:
 465              	.file 9 "include/asm/local.h"
   1:include/asm/local.h **** #ifndef _ARCH_I386_LOCAL_H
   2:include/asm/local.h **** #define _ARCH_I386_LOCAL_H
   3:include/asm/local.h **** 
   4:include/asm/local.h **** #include <linux/percpu.h>
GAS LISTING  			page 43


   5:include/asm/local.h **** 
   6:include/asm/local.h **** typedef struct
   7:include/asm/local.h **** {
   8:include/asm/local.h **** 	volatile unsigned long counter;
   9:include/asm/local.h **** } local_t;
  10:include/asm/local.h **** 
  11:include/asm/local.h **** #define LOCAL_INIT(i)	{ (i) }
  12:include/asm/local.h **** 
  13:include/asm/local.h **** #define local_read(v)	((v)->counter)
  14:include/asm/local.h **** #define local_set(v,i)	(((v)->counter) = (i))
  15:include/asm/local.h **** 
  16:include/asm/local.h **** static __inline__ void local_inc(local_t *v)
  17:include/asm/local.h **** {
  18:include/asm/local.h **** 	__asm__ __volatile__(
  19:include/asm/local.h **** 		"incl %0"
  20:include/asm/local.h **** 		:"=m" (v->counter)
  21:include/asm/local.h **** 		:"m" (v->counter));
  22:include/asm/local.h **** }
  23:include/asm/local.h **** 
  24:include/asm/local.h **** static __inline__ void local_dec(local_t *v)
  25:include/asm/local.h **** {
  26:include/asm/local.h **** 	__asm__ __volatile__(
 466              	.loc 9 26 0
 467              	
 468 028d FF880001 	decl 256(%eax)
 468      0000
 469              	
 470              	.LBE29:
 471              	.LBE28:
 472              	.loc 8 317 0
 473 0293 833802   	cmpl $2,(%eax)
 474 0296 750B     	jne .L85
 376:include/linux/module.h **** 		unsigned int cpu = get_cpu();
 377:include/linux/module.h **** 		local_dec(&module->ref[cpu].count);
 378:include/linux/module.h **** 		/* Maybe they're waiting for us to drop reference? */
 379:include/linux/module.h **** 		if (unlikely(!module_is_live(module)))
 380:include/linux/module.h **** 			wake_up_process(module->waiter);
 475              	.loc 8 380 0
 476 0298 8B808801 	movl 392(%eax),%eax
 476      0000
 477 029e E8FCFFFF 	call wake_up_process
 477      FF
 478              	.L85:
 479              	.LBE27:
 480              	.LBE26:
 481              	.LBE25:
 201:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 				module_put(crypt->ops->owner);
 202:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 			}
 203:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 			kfree(crypt);
 482              	.loc 1 203 0
 483 02a3 53       	pushl %ebx
 484              	.LCFI51:
 485 02a4 E8FCFFFF 	call kfree
 485      FF
 204:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 			ieee->crypt[i] = NULL;
 486              	.loc 1 204 0
 487 02a9 C784BEA0 	movl $0,1696(%esi,%edi,4)
GAS LISTING  			page 44


 487      06000000 
 487      000000
 488 02b4 58       	popl %eax
 489              	.LCFI52:
 490              	.L83:
 491              	.LBE24:
 492              	.loc 1 196 0
 493 02b5 47       	incl %edi
 494 02b6 83FF03   	cmpl $3,%edi
 495 02b9 7EAF     	jle .L93
 496              	.LBB30:
 497              	.LBB31:
 498              	.loc 1 100 0
 499 02bb 83BEE405 	cmpl $0,1508(%esi)
 499      000000
 500 02c2 743E     	je .L95
 501 02c4 31FF     	xorl %edi,%edi
 502 02c6 BB7F0000 	movl $127,%ebx
 502      00
 503              	.L100:
 504              	.loc 1 104 0
 505 02cb 8B86E405 	movl 1508(%esi),%eax
 505      0000
 506 02d1 8B840744 	movl 324(%edi,%eax),%eax
 506      010000
 507 02d8 85C0     	testl %eax,%eax
 508 02da 7407     	je .L98
 509              	.loc 1 105 0
 510 02dc 50       	pushl %eax
 511              	.LCFI53:
 512 02dd E8FCFFFF 	call kfree
 512      FF
 513 02e2 58       	popl %eax
 514              	.LCFI54:
 515              	.L98:
 516 02e3 81C75801 	addl $344,%edi
 516      0000
 517 02e9 4B       	decl %ebx
 518 02ea 79DF     	jns .L100
 519              	.loc 1 107 0
 520 02ec FFB6E405 	pushl 1508(%esi)
 520      0000
 521              	.LCFI55:
 522 02f2 E8FCFFFF 	call kfree
 522      FF
 523 02f7 5B       	popl %ebx
 524              	.LCFI56:
 525              	.loc 1 108 0
 526 02f8 C786E405 	movl $0,1508(%esi)
 526      00000000 
 526      0000
 527              	.L95:
 528              	.LBE31:
 529              	.LBE30:
 205:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 		}
 206:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	}
 207:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 
GAS LISTING  			page 45


 208:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	ieee80211_networks_free(ieee);
 209:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	free_netdev(dev);
 530              	.loc 1 209 0
 531 0302 896C2414 	movl %ebp,20(%esp)
 532 0306 5B       	popl %ebx
 533 0307 5E       	popl %esi
 534 0308 5F       	popl %edi
 535 0309 5D       	popl %ebp
 536              	.LCFI57:
 537 030a E9FCFFFF 	jmp free_netdev
 537      FF
 538              	.LFE927:
 540              	.local debug
 541              	.comm debug,4,4
 542              	.globl ieee80211_debug_level
 543              	.bss
 544              	.align 4
 547              	ieee80211_debug_level:
 548 0000 00000000 	.zero 4
 549              	.globl ieee80211_proc
 550              	.align 4
 553              	ieee80211_proc:
 554 0004 00000000 	.zero 4
 555              	.section .rodata.str1.1
 556              	.LC4:
 557 00ac 30782530 	.string "0x%08X\n"
 557      38580A00 
 558              	.text
 560              	show_debug_level:
 561              	.LFB928:
 210:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** }
 211:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 
 212:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** #ifdef CONFIG_IEEE80211_DEBUG
 213:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 
 214:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** static int debug = 0;
 215:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** u32 ieee80211_debug_level = 0;
 216:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** struct proc_dir_entry *ieee80211_proc = NULL;
 217:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 
 218:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** static int show_debug_level(char *page, char **start, off_t offset,
 219:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 			    int count, int *eof, void *data)
 220:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** {
 562              	.loc 1 220 0
 221:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	return snprintf(page, count, "0x%08X\n", ieee80211_debug_level);
 563              	.loc 1 221 0
 564 030f FF350000 	pushl ieee80211_debug_level
 564      0000
 565              	.LCFI58:
 566 0315 68AC0000 	pushl $.LC4
 566      00
 567              	.LCFI59:
 568 031a FF742418 	pushl 24(%esp)
 569              	.LCFI60:
 570 031e FF742410 	pushl 16(%esp)
 571              	.LCFI61:
 572 0322 E8FCFFFF 	call snprintf
 572      FF
 573 0327 83C410   	addl $16,%esp
GAS LISTING  			page 46


 574              	.LCFI62:
 222:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** }
 575              	.loc 1 222 0
 576 032a C3       	ret
 577              	.LFE928:
 579              	.section .rodata.str1.1
 580              	.LC5:
 581 00b4 30783030 	.string "0x00000000\n"
 581      30303030 
 581      30300A00 
 582              	.LC6:
 583 00c0 256C6900 	.string "%li"
 584              	.LC7:
 585 00c4 3C363E69 	.string "<6>ieee80211: %s is not in hex or decimal form.\n"
 585      65656538 
 585      30323131 
 585      3A202573 
 585      20697320 
 586              	.text
 588              	store_debug_level:
 589              	.LFB929:
 223:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 
 224:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** static int store_debug_level(struct file *file, const char __user * buffer,
 225:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 			     unsigned long count, void *data)
 226:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** {
 590              	.loc 1 226 0
 591 032b 56       	pushl %esi
 592              	.LCFI63:
 593 032c 53       	pushl %ebx
 594              	.LCFI64:
 595 032d 83EC14   	subl $20,%esp
 596              	.LCFI65:
 227:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	char buf[] = "0x00000000\n";
 597              	.loc 1 227 0
 598 0330 A1B40000 	movl .LC5,%eax
 598      00
 599 0335 89442404 	movl %eax,4(%esp)
 600              	.LBB32:
 228:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	unsigned long len = min((unsigned long)sizeof(buf) - 1, count);
 601              	.loc 1 228 0
 602 0339 8B5C2428 	movl 40(%esp),%ebx
 603              	.LBE32:
 604              	.loc 1 227 0
 605 033d A1040000 	movl .LC5+4,%eax
 605      00
 606 0342 89442408 	movl %eax,8(%esp)
 607              	.LBB33:
 608              	.loc 1 228 0
 609 0346 83FB0B   	cmpl $11,%ebx
 610              	.LBE33:
 611              	.loc 1 227 0
 612 0349 A1080000 	movl .LC5+8,%eax
 612      00
 613 034e 8944240C 	movl %eax,12(%esp)
 614              	.LBB34:
 615              	.loc 1 228 0
 616 0352 7605     	jbe .L107
GAS LISTING  			page 47


 617 0354 BB0B0000 	movl $11,%ebx
 617      00
 618              	.L107:
 619              	.LBE34:
 229:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	unsigned long val;
 230:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 
 231:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	if (copy_from_user(buf, buffer, len))
 620              	.loc 1 231 0
 621 0359 53       	pushl %ebx
 622              	.LCFI66:
 623 035a FF742428 	pushl 40(%esp)
 624              	.LCFI67:
 625 035e 8D74240C 	leal 12(%esp),%esi
 626 0362 56       	pushl %esi
 627              	.LCFI68:
 628 0363 E8FCFFFF 	call copy_from_user
 628      FF
 629 0368 83C40C   	addl $12,%esp
 630              	.LCFI69:
 631 036b 85C0     	testl %eax,%eax
 232:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 		return count;
 632              	.loc 1 232 0
 633 036d 8B4C2428 	movl 40(%esp),%ecx
 634              	.loc 1 231 0
 635 0371 754A     	jne .L106
 233:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	buf[len] = 0;
 234:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	if (sscanf(buf, "%li", &val) != 1)
 636              	.loc 1 234 0
 637 0373 89E0     	movl %esp,%eax
 638              	.loc 1 233 0
 639 0375 C6441C04 	movb $0,4(%esp,%ebx)
 639      00
 640              	.loc 1 234 0
 641 037a 50       	pushl %eax
 642              	.LCFI70:
 643 037b 68C00000 	pushl $.LC6
 643      00
 644              	.LCFI71:
 645 0380 56       	pushl %esi
 646              	.LCFI72:
 647 0381 E8FCFFFF 	call sscanf
 647      FF
 648 0386 83C40C   	addl $12,%esp
 649              	.LCFI73:
 650 0389 48       	decl %eax
 651 038a 740F     	je .L109
 235:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 		printk(KERN_INFO DRV_NAME
 652              	.loc 1 235 0
 653 038c 56       	pushl %esi
 654              	.LCFI74:
 655 038d 68C40000 	pushl $.LC7
 655      00
 656              	.LCFI75:
 657 0392 E8FCFFFF 	call printk
 657      FF
 658 0397 58       	popl %eax
 659              	.LCFI76:
GAS LISTING  			page 48


 660 0398 5A       	popl %edx
 661              	.LCFI77:
 662 0399 EB08     	jmp .L110
 663              	.L109:
 236:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 		       ": %s is not in hex or decimal form.\n", buf);
 237:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	else
 238:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 		ieee80211_debug_level = val;
 664              	.loc 1 238 0
 665 039b 8B0424   	movl (%esp),%eax
 666 039e A3000000 	movl %eax,ieee80211_debug_level
 666      00
 667              	.L110:
 668              	.LBB35:
 669              	.loc 3 391 0
 670 03a3 8D4C2404 	leal 4(%esp),%ecx
 671              	.LBE35:
 672 03a7 89DA     	movl %ebx,%edx
 673              	
 674 03a9 89C8     	movl %ecx,%eax
 675 03ab EB06     	jmp 2f
 676 03ad 803800   	1:cmpb $0,(%eax)
 677 03b0 7407     	je 3f
 678 03b2 40       	incl %eax
 679 03b3 4A       	2:decl %edx
 680 03b4 83FAFF   	cmpl $-1,%edx
 681 03b7 75F4     	jne 1b
 682 03b9 29C8     	3:subl %ecx,%eax
 683              	
 684 03bb 89C1     	movl %eax,%ecx
 685              	.L106:
 239:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 
 240:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	return strnlen(buf, len);
 241:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** }
 686              	.loc 1 241 0
 687 03bd 83C414   	addl $20,%esp
 688 03c0 5B       	popl %ebx
 689 03c1 89C8     	movl %ecx,%eax
 690 03c3 5E       	popl %esi
 691 03c4 C3       	ret
 692              	.LFE929:
 694              	.section .rodata.str1.1
 695              	.LC8:
 696 00f5 69656565 	.string "ieee80211"
 696      38303231 
 696      3100
 697              	.LC9:
 698 00ff 3C333E69 	.string "<3>ieee80211: Unable to create ieee80211 proc directory\n"
 698      65656538 
 698      30323131 
 698      3A20556E 
 698      61626C65 
 699              	.LC10:
 700 0138 64656275 	.string "debug_level"
 700      675F6C65 
 700      76656C00 
 701              	.LC11:
 702 0144 3C363E69 	.string "<6>ieee80211: 802.11 data/management/control stack, 1.1.12\n"
GAS LISTING  			page 49


 702      65656538 
 702      30323131 
 702      3A203830 
 702      322E3131 
 703              	.LC12:
 704 0180 3C363E69 	.string "<6>ieee80211: Copyright (C) 2004-2005 Intel Corporation <jketreno@linux.intel.com>\n"
 704      65656538 
 704      30323131 
 704      3A20436F 
 704      70797269 
 705              	.section .init.text,"ax",@progbits
 707              	ieee80211_init:
 708              	.LFB930:
 242:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** #endif				/* CONFIG_IEEE80211_DEBUG */
 243:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 
 244:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** static int __init ieee80211_init(void)
 245:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** {
 709              	.loc 1 245 0
 246:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** #ifdef CONFIG_IEEE80211_DEBUG
 247:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	struct proc_dir_entry *e;
 248:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 
 249:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	ieee80211_debug_level = debug;
 250:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	ieee80211_proc = proc_mkdir(DRV_NAME, proc_net);
 710              	.loc 1 250 0
 711 0000 FF350000 	pushl proc_net
 711      0000
 712              	.LCFI78:
 713              	.loc 1 249 0
 714 0006 A1080000 	movl debug,%eax
 714      00
 715              	.loc 1 250 0
 716 000b 68F50000 	pushl $.LC8
 716      00
 717              	.LCFI79:
 718              	.loc 1 249 0
 719 0010 A3000000 	movl %eax,ieee80211_debug_level
 719      00
 720              	.loc 1 250 0
 721 0015 E8FCFFFF 	call proc_mkdir
 721      FF
 251:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	if (ieee80211_proc == NULL) {
 722              	.loc 1 251 0
 723 001a 5A       	popl %edx
 724              	.LCFI80:
 725 001b 85C0     	testl %eax,%eax
 726              	.loc 1 250 0
 727 001d A3000000 	movl %eax,ieee80211_proc
 727      00
 728              	.loc 1 251 0
 729 0022 59       	popl %ecx
 730              	.LCFI81:
 731 0023 7511     	jne .L113
 252:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 		IEEE80211_ERROR("Unable to create " DRV_NAME
 732              	.loc 1 252 0
 733 0025 68FF0000 	pushl $.LC9
 733      00
 734              	.LCFI82:
GAS LISTING  			page 50


 735 002a E8FCFFFF 	call printk
 735      FF
 253:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 				" proc directory\n");
 254:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 		return -EIO;
 736              	.loc 1 254 0
 737 002f 59       	popl %ecx
 738              	.LCFI83:
 739 0030 B8FBFFFF 	movl $-5,%eax
 739      FF
 740 0035 C3       	ret
 741              	.L113:
 255:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	}
 256:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	e = create_proc_entry("debug_level", S_IFREG | S_IRUGO | S_IWUSR,
 742              	.loc 1 256 0
 743 0036 50       	pushl %eax
 744              	.LCFI84:
 745 0037 68A48100 	pushl $33188
 745      00
 746              	.LCFI85:
 747 003c 68380100 	pushl $.LC10
 747      00
 748              	.LCFI86:
 749 0041 E8FCFFFF 	call create_proc_entry
 749      FF
 257:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 			      ieee80211_proc);
 258:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	if (!e) {
 750              	.loc 1 258 0
 751 0046 83C40C   	addl $12,%esp
 752              	.LCFI87:
 753 0049 85C0     	testl %eax,%eax
 754 004b 7522     	jne .L114
 259:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 		remove_proc_entry(DRV_NAME, proc_net);
 755              	.loc 1 259 0
 756 004d FF350000 	pushl proc_net
 756      0000
 757              	.LCFI88:
 758 0053 68F50000 	pushl $.LC8
 758      00
 759              	.LCFI89:
 760 0058 E8FCFFFF 	call remove_proc_entry
 760      FF
 260:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 		ieee80211_proc = NULL;
 261:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 		return -EIO;
 761              	.loc 1 261 0
 762 005d 59       	popl %ecx
 763              	.LCFI90:
 764 005e B8FBFFFF 	movl $-5,%eax
 764      FF
 765 0063 5A       	popl %edx
 766              	.LCFI91:
 767              	.loc 1 260 0
 768 0064 C7050000 	movl $0,ieee80211_proc
 768      00000000 
 768      0000
 769              	.loc 1 261 0
 770 006e C3       	ret
 771              	.L114:
GAS LISTING  			page 51


 262:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	}
 263:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	e->read_proc = show_debug_level;
 772              	.loc 1 263 0
 773 006f C7403C0F 	movl $show_debug_level,60(%eax)
 773      030000
 264:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	e->write_proc = store_debug_level;
 774              	.loc 1 264 0
 775 0076 C740402B 	movl $store_debug_level,64(%eax)
 775      030000
 265:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	e->data = NULL;
 776              	.loc 1 265 0
 777 007d C7403800 	movl $0,56(%eax)
 777      000000
 266:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** #endif				/* CONFIG_IEEE80211_DEBUG */
 267:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 
 268:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	printk(KERN_INFO DRV_NAME ": " DRV_DESCRIPTION ", " DRV_VERSION "\n");
 778              	.loc 1 268 0
 779 0084 68440100 	pushl $.LC11
 779      00
 780              	.LCFI92:
 781 0089 E8FCFFFF 	call printk
 781      FF
 269:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	printk(KERN_INFO DRV_NAME ": " DRV_COPYRIGHT "\n");
 782              	.loc 1 269 0
 783 008e 68800100 	pushl $.LC12
 783      00
 784              	.LCFI93:
 785              	.LCFI94:
 786 0093 E8FCFFFF 	call printk
 786      FF
 270:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 
 271:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	return 0;
 787              	.loc 1 271 0
 788 0098 59       	popl %ecx
 789              	.LCFI95:
 790 0099 31C0     	xorl %eax,%eax
 791 009b 5A       	popl %edx
 792              	.LCFI96:
 272:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** }
 793              	.loc 1 272 0
 794 009c C3       	ret
 795              	.LFE930:
 797              	.section .exit.text,"ax",@progbits
 799              	ieee80211_exit:
 800              	.LFB931:
 273:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 
 274:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** static void __exit ieee80211_exit(void)
 275:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** {
 801              	.loc 1 275 0
 276:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** #ifdef CONFIG_IEEE80211_DEBUG
 277:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	if (ieee80211_proc) {
 802              	.loc 1 277 0
 803 0000 A1000000 	movl ieee80211_proc,%eax
 803      00
 804 0005 85C0     	testl %eax,%eax
 805 0007 7428     	je .L115
 278:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 		remove_proc_entry("debug_level", ieee80211_proc);
GAS LISTING  			page 52


 806              	.loc 1 278 0
 807 0009 50       	pushl %eax
 808              	.LCFI97:
 809 000a 68380100 	pushl $.LC10
 809      00
 810              	.LCFI98:
 811 000f E8FCFFFF 	call remove_proc_entry
 811      FF
 279:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 		remove_proc_entry(DRV_NAME, proc_net);
 812              	.loc 1 279 0
 813 0014 FF350000 	pushl proc_net
 813      0000
 814              	.LCFI99:
 815 001a 68F50000 	pushl $.LC8
 815      00
 816              	.LCFI100:
 817              	.LCFI101:
 818 001f E8FCFFFF 	call remove_proc_entry
 818      FF
 280:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 		ieee80211_proc = NULL;
 819              	.loc 1 280 0
 820 0024 83C410   	addl $16,%esp
 821              	.LCFI102:
 822 0027 C7050000 	movl $0,ieee80211_proc
 822      00000000 
 822      0000
 823              	.L115:
 824 0031 C3       	ret
 825              	.LFE931:
 827              	.data
 830              	__param_str_debug:
 831 0000 64656275 	.string "debug"
 831      6700
 832              	.section __param,"a",@progbits
 833              	.align 4
 836              	__param_debug:
 837 0000 00000000 	.long __param_str_debug
 838 0004 24010000 	.long 292
 839 0008 00000000 	.long param_set_int
 840 000c 00000000 	.long param_get_int
 841 0010 08000000 	.long debug
 842              	.section .modinfo
 845              	__mod_debugtype287:
 846 00b8 7061726D 	.string "parmtype=debug:int"
 846      74797065 
 846      3D646562 
 846      75673A69 
 846      6E7400
 849              	__mod_debug288:
 850 00cb 7061726D 	.string "parm=debug:debug output mask"
 850      3D646562 
 850      75673A64 
 850      65627567 
 850      206F7574 
 851              	.globl cleanup_module
 852              	.set cleanup_module,ieee80211_exit
 853              	.globl init_module
GAS LISTING  			page 53


 854              	.set init_module,ieee80211_init
 855              	.local escaped.3
 856              	.comm escaped.3,65,32
 857              	.section .rodata.str1.1
 858              	.LC13:
 859 01d4 3C686964 	.string "<hidden>"
 859      64656E3E 
 859      00
 860              	.text
 861              	.globl escape_essid
 863              	escape_essid:
 864              	.LFB935:
 281:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	}
 282:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** #endif				/* CONFIG_IEEE80211_DEBUG */
 283:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** }
 284:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 
 285:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** #ifdef CONFIG_IEEE80211_DEBUG
 286:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** #include <linux/moduleparam.h>
 287:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** module_param(debug, int, 0444);
 288:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** MODULE_PARM_DESC(debug, "debug output mask");
 289:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** #endif				/* CONFIG_IEEE80211_DEBUG */
 290:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 
 291:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** module_exit(ieee80211_exit);
 292:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** module_init(ieee80211_init);
 293:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 
 294:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** const char *escape_essid(const char *essid, u8 essid_len)
 295:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** {
 865              	.loc 1 295 0
 866 03c5 57       	pushl %edi
 867              	.LCFI103:
 868 03c6 56       	pushl %esi
 869              	.LCFI104:
 870              	.loc 1 295 0
 871 03c7 8A542410 	movb 16(%esp),%dl
 872              	.LBB36:
 873              	.file 10 "/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h"
   1:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** /*
   2:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * Merged with mainline ieee80211.h in Aug 2004.  Original ieee802_11
   3:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * remains copyright by the original authors
   4:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  *
   5:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * Portions of the merged code are based on Host AP (software wireless
   6:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * LAN access point) driver for Intersil Prism2/2.5/3.
   7:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  *
   8:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * Copyright (c) 2001-2002, SSH Communications Security Corp and Jouni Malinen
   9:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * <jkmaline@cc.hut.fi>
  10:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * Copyright (c) 2002-2003, Jouni Malinen <jkmaline@cc.hut.fi>
  11:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  *
  12:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * Adaption to a generic IEEE 802.11 stack by James Ketrenos
  13:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * <jketreno@linux.intel.com>
  14:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * Copyright (c) 2004-2005, Intel Corporation
  15:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  *
  16:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * This program is free software; you can redistribute it and/or modify
  17:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * it under the terms of the GNU General Public License version 2 as
  18:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * published by the Free Software Foundation. See README and COPYING for
  19:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * more details.
  20:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  *
  21:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * API Version History
GAS LISTING  			page 54


  22:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * 1.0.x -- Initial version
  23:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * 1.1.x -- Added radiotap, QoS, TIM, ieee80211_geo APIs,
  24:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  *          various structure changes, and crypto API init method
  25:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  */
  26:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #ifndef IEEE80211_H
  27:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_H
  28:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #include <linux/if_ether.h>	/* ETH_ALEN */
  29:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #include <linux/kernel.h>	/* ARRAY_SIZE */
  30:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #include <linux/wireless.h>
  31:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
  32:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_VERSION "1.1.12"
  33:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
  34:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_DATA_LEN		2304
  35:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** /* Maximum size for the MA-UNITDATA primitive, 802.11 standard section
  36:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****    6.2.1.1.2.
  37:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
  38:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****    The figure in section 7.1.2 suggests a body size of up to 2312
  39:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****    bytes is allowed, which is a bit confusing, I suspect this
  40:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****    represents the 2304 bytes of real data, plus a possible 8 bytes of
  41:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****    WEP IV and ICV. (this interpretation suggested by Ramiro Barreiro) */
  42:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
  43:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_1ADDR_LEN 10
  44:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_2ADDR_LEN 16
  45:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_3ADDR_LEN 24
  46:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_4ADDR_LEN 30
  47:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_FCS_LEN    4
  48:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_HLEN			(IEEE80211_4ADDR_LEN)
  49:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_FRAME_LEN		(IEEE80211_DATA_LEN + IEEE80211_HLEN)
  50:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
  51:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define MIN_FRAG_THRESHOLD     256U
  52:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define	MAX_FRAG_THRESHOLD     2346U
  53:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
  54:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** /* Frame control field constants */
  55:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_FCTL_VERS		0x0003
  56:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_FCTL_FTYPE		0x000c
  57:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_FCTL_STYPE		0x00f0
  58:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_FCTL_TODS		0x0100
  59:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_FCTL_FROMDS		0x0200
  60:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_FCTL_MOREFRAGS	0x0400
  61:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_FCTL_RETRY		0x0800
  62:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_FCTL_PM		0x1000
  63:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_FCTL_MOREDATA		0x2000
  64:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_FCTL_PROTECTED	0x4000
  65:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_FCTL_ORDER		0x8000
  66:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
  67:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_FTYPE_MGMT		0x0000
  68:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_FTYPE_CTL		0x0004
  69:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_FTYPE_DATA		0x0008
  70:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
  71:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** /* management */
  72:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_STYPE_ASSOC_REQ	0x0000
  73:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_STYPE_ASSOC_RESP 	0x0010
  74:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_STYPE_REASSOC_REQ	0x0020
  75:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_STYPE_REASSOC_RESP	0x0030
  76:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_STYPE_PROBE_REQ	0x0040
  77:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_STYPE_PROBE_RESP	0x0050
  78:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_STYPE_BEACON		0x0080
GAS LISTING  			page 55


  79:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_STYPE_ATIM		0x0090
  80:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_STYPE_DISASSOC	0x00A0
  81:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_STYPE_AUTH		0x00B0
  82:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_STYPE_DEAUTH		0x00C0
  83:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_STYPE_ACTION		0x00D0
  84:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
  85:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** /* control */
  86:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_STYPE_PSPOLL		0x00A0
  87:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_STYPE_RTS		0x00B0
  88:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_STYPE_CTS		0x00C0
  89:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_STYPE_ACK		0x00D0
  90:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_STYPE_CFEND		0x00E0
  91:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_STYPE_CFENDACK	0x00F0
  92:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
  93:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** /* data */
  94:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_STYPE_DATA		0x0000
  95:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_STYPE_DATA_CFACK	0x0010
  96:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_STYPE_DATA_CFPOLL	0x0020
  97:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_STYPE_DATA_CFACKPOLL	0x0030
  98:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_STYPE_NULLFUNC	0x0040
  99:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_STYPE_CFACK		0x0050
 100:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_STYPE_CFPOLL		0x0060
 101:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_STYPE_CFACKPOLL	0x0070
 102:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_STYPE_QOS_DATA        0x0080
 103:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 104:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_SCTL_FRAG		0x000F
 105:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_SCTL_SEQ		0xFFF0
 106:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 107:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** /* debug macros */
 108:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 109:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #ifdef CONFIG_IEEE80211_DEBUG
 110:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** extern u32 ieee80211_debug_level;
 111:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_DEBUG(level, fmt, args...) \
 112:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** do { if (ieee80211_debug_level & (level)) \
 113:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****   printk(KERN_DEBUG "ieee80211: %c %s " fmt, \
 114:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****          in_interrupt() ? 'I' : 'U', __FUNCTION__ , ## args); } while (0)
 115:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #else
 116:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_DEBUG(level, fmt, args...) do {} while (0)
 117:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #endif				/* CONFIG_IEEE80211_DEBUG */
 118:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 119:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** /* debug macros not dependent on CONFIG_IEEE80211_DEBUG */
 120:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 121:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define MAC_FMT "%02x:%02x:%02x:%02x:%02x:%02x"
 122:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define MAC_ARG(x) ((u8*)(x))[0],((u8*)(x))[1],((u8*)(x))[2],((u8*)(x))[3],((u8*)(x))[4],((u8*)(x))
 123:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 124:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** /* compatibility macros */
 125:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #if WIRELESS_EXT < 17
 126:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IW_QUAL_QUAL_UPDATED    0x01    /* Value was updated since last read */
 127:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IW_QUAL_LEVEL_UPDATED   0x02
 128:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IW_QUAL_NOISE_UPDATED   0x04
 129:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IW_QUAL_ALL_UPDATED     0x07
 130:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IW_QUAL_QUAL_INVALID    0x10    /* Driver doesn't provide value */
 131:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IW_QUAL_LEVEL_INVALID   0x20
 132:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IW_QUAL_NOISE_INVALID   0x40
 133:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IW_QUAL_ALL_INVALID     0x70
 134:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #endif
 135:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
GAS LISTING  			page 56


 136:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #if WIRELESS_EXT < 19
 137:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IW_QUAL_DBM             0x08    /* Level + Noise are dBm */
 138:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #endif
 139:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 140:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #ifndef __bitwise /* if __leXX is not defined */
 141:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** typedef __u16 __le16;
 142:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** typedef __u64 __le64;
 143:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #endif
 144:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 145:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #ifndef DEFINE_SPINLOCK
 146:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define DEFINE_SPINLOCK(s)              spinlock_t s = SPIN_LOCK_UNLOCKED
 147:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #endif
 148:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 149:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** /* escape_essid() is intended to be used in debug (and possibly error)
 150:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * messages. It should never be used for passing essid to user space. */
 151:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** const char *escape_essid(const char *essid, u8 essid_len);
 152:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 153:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** /*
 154:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * To use the debug system:
 155:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  *
 156:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * If you are defining a new debug classification, simply add it to the #define
 157:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * list here in the form of:
 158:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  *
 159:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * #define IEEE80211_DL_xxxx VALUE
 160:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  *
 161:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * shifting value to the left one bit from the previous entry.  xxxx should be
 162:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * the name of the classification (for example, WEP)
 163:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  *
 164:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * You then need to either add a IEEE80211_xxxx_DEBUG() macro definition for your
 165:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * classification, or use IEEE80211_DEBUG(IEEE80211_DL_xxxx, ...) whenever you want
 166:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * to send output to that classification.
 167:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  *
 168:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * To add your debug level to the list of levels seen when you perform
 169:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  *
 170:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * % cat /proc/net/ieee80211/debug_level
 171:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  *
 172:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * you simply need to add your entry to the ieee80211_debug_level array.
 173:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  *
 174:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * If you do not see debug_level in /proc/net/ieee80211 then you do not have
 175:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * CONFIG_IEEE80211_DEBUG defined in your kernel configuration
 176:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  *
 177:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  */
 178:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 179:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_DL_INFO          (1<<0)
 180:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_DL_WX            (1<<1)
 181:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_DL_SCAN          (1<<2)
 182:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_DL_STATE         (1<<3)
 183:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_DL_MGMT          (1<<4)
 184:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_DL_FRAG          (1<<5)
 185:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_DL_DROP          (1<<7)
 186:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 187:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_DL_TX            (1<<8)
 188:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_DL_RX            (1<<9)
 189:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_DL_QOS           (1<<31)
 190:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 191:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_ERROR(f, a...) printk(KERN_ERR "ieee80211: " f, ## a)
 192:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_WARNING(f, a...) printk(KERN_WARNING "ieee80211: " f, ## a)
GAS LISTING  			page 57


 193:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_DEBUG_INFO(f, a...)   IEEE80211_DEBUG(IEEE80211_DL_INFO, f, ## a)
 194:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 195:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_DEBUG_WX(f, a...)     IEEE80211_DEBUG(IEEE80211_DL_WX, f, ## a)
 196:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_DEBUG_SCAN(f, a...)   IEEE80211_DEBUG(IEEE80211_DL_SCAN, f, ## a)
 197:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_DEBUG_STATE(f, a...)  IEEE80211_DEBUG(IEEE80211_DL_STATE, f, ## a)
 198:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_DEBUG_MGMT(f, a...)  IEEE80211_DEBUG(IEEE80211_DL_MGMT, f, ## a)
 199:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_DEBUG_FRAG(f, a...)  IEEE80211_DEBUG(IEEE80211_DL_FRAG, f, ## a)
 200:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_DEBUG_DROP(f, a...)  IEEE80211_DEBUG(IEEE80211_DL_DROP, f, ## a)
 201:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_DEBUG_TX(f, a...)  IEEE80211_DEBUG(IEEE80211_DL_TX, f, ## a)
 202:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_DEBUG_RX(f, a...)  IEEE80211_DEBUG(IEEE80211_DL_RX, f, ## a)
 203:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_DEBUG_QOS(f, a...)  IEEE80211_DEBUG(IEEE80211_DL_QOS, f, ## a)
 204:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #include <linux/netdevice.h>
 205:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #include <linux/wireless.h>
 206:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #include <linux/if_arp.h>	/* ARPHRD_ETHER */
 207:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 208:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #ifndef WIRELESS_SPY
 209:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define WIRELESS_SPY		/* enable iwspy support */
 210:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #endif
 211:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #include <net/iw_handler.h>	/* new driver API */
 212:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 213:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #ifndef ETH_P_PAE
 214:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define ETH_P_PAE 0x888E	/* Port Access Entity (IEEE 802.1X) */
 215:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #endif				/* ETH_P_PAE */
 216:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 217:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define ETH_P_PREAUTH 0x88C7	/* IEEE 802.11i pre-authentication */
 218:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 219:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #ifndef ETH_P_80211_RAW
 220:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define ETH_P_80211_RAW (ETH_P_ECONET + 1)
 221:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #endif
 222:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 223:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** /* IEEE 802.11 defines */
 224:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 225:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define P80211_OUI_LEN 3
 226:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 227:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_snap_hdr {
 228:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 229:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 dsap;		/* always 0xAA */
 230:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 ssap;		/* always 0xAA */
 231:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 ctrl;		/* always 0x03 */
 232:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 oui[P80211_OUI_LEN];	/* organizational universal id */
 233:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 234:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** } __attribute__ ((packed));
 235:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 236:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define SNAP_SIZE sizeof(struct ieee80211_snap_hdr)
 237:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 238:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define WLAN_FC_GET_VERS(fc) ((fc) & IEEE80211_FCTL_VERS)
 239:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define WLAN_FC_GET_TYPE(fc) ((fc) & IEEE80211_FCTL_FTYPE)
 240:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define WLAN_FC_GET_STYPE(fc) ((fc) & IEEE80211_FCTL_STYPE)
 241:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 242:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define WLAN_GET_SEQ_FRAG(seq) ((seq) & IEEE80211_SCTL_FRAG)
 243:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define WLAN_GET_SEQ_SEQ(seq)  ((seq) & IEEE80211_SCTL_SEQ)
 244:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 245:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** /* Authentication algorithms */
 246:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define WLAN_AUTH_OPEN 0
 247:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define WLAN_AUTH_SHARED_KEY 1
 248:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define WLAN_AUTH_LEAP 2
 249:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
GAS LISTING  			page 58


 250:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define WLAN_AUTH_CHALLENGE_LEN 128
 251:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 252:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define WLAN_CAPABILITY_ESS (1<<0)
 253:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define WLAN_CAPABILITY_IBSS (1<<1)
 254:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define WLAN_CAPABILITY_CF_POLLABLE (1<<2)
 255:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define WLAN_CAPABILITY_CF_POLL_REQUEST (1<<3)
 256:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define WLAN_CAPABILITY_PRIVACY (1<<4)
 257:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define WLAN_CAPABILITY_SHORT_PREAMBLE (1<<5)
 258:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define WLAN_CAPABILITY_PBCC (1<<6)
 259:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define WLAN_CAPABILITY_CHANNEL_AGILITY (1<<7)
 260:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define WLAN_CAPABILITY_SPECTRUM_MGMT (1<<8)
 261:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define WLAN_CAPABILITY_QOS (1<<9)
 262:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define WLAN_CAPABILITY_SHORT_SLOT_TIME (1<<10)
 263:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define WLAN_CAPABILITY_DSSS_OFDM (1<<13)
 264:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 265:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** /* Status codes */
 266:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** enum ieee80211_statuscode {
 267:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_STATUS_SUCCESS = 0,
 268:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_STATUS_UNSPECIFIED_FAILURE = 1,
 269:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_STATUS_CAPS_UNSUPPORTED = 10,
 270:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_STATUS_REASSOC_NO_ASSOC = 11,
 271:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_STATUS_ASSOC_DENIED_UNSPEC = 12,
 272:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_STATUS_NOT_SUPPORTED_AUTH_ALG = 13,
 273:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_STATUS_UNKNOWN_AUTH_TRANSACTION = 14,
 274:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_STATUS_CHALLENGE_FAIL = 15,
 275:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_STATUS_AUTH_TIMEOUT = 16,
 276:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_STATUS_AP_UNABLE_TO_HANDLE_NEW_STA = 17,
 277:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_STATUS_ASSOC_DENIED_RATES = 18,
 278:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* 802.11b */
 279:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_STATUS_ASSOC_DENIED_NOSHORTPREAMBLE = 19,
 280:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_STATUS_ASSOC_DENIED_NOPBCC = 20,
 281:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_STATUS_ASSOC_DENIED_NOAGILITY = 21,
 282:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* 802.11h */
 283:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_STATUS_ASSOC_DENIED_NOSPECTRUM = 22,
 284:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_STATUS_ASSOC_REJECTED_BAD_POWER = 23,
 285:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_STATUS_ASSOC_REJECTED_BAD_SUPP_CHAN = 24,
 286:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* 802.11g */
 287:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_STATUS_ASSOC_DENIED_NOSHORTTIME = 25,
 288:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_STATUS_ASSOC_DENIED_NODSSSOFDM = 26,
 289:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* 802.11i */
 290:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_STATUS_INVALID_IE = 40,
 291:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_STATUS_INVALID_GROUP_CIPHER = 41,
 292:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_STATUS_INVALID_PAIRWISE_CIPHER = 42,
 293:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_STATUS_INVALID_AKMP = 43,
 294:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_STATUS_UNSUPP_RSN_VERSION = 44,
 295:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_STATUS_INVALID_RSN_IE_CAP = 45,
 296:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_STATUS_CIPHER_SUITE_REJECTED = 46,
 297:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** };
 298:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 299:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** /* Reason codes */
 300:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** enum ieee80211_reasoncode {
 301:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_REASON_UNSPECIFIED = 1,
 302:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_REASON_PREV_AUTH_NOT_VALID = 2,
 303:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_REASON_DEAUTH_LEAVING = 3,
 304:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_REASON_DISASSOC_DUE_TO_INACTIVITY = 4,
 305:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_REASON_DISASSOC_AP_BUSY = 5,
 306:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_REASON_CLASS2_FRAME_FROM_NONAUTH_STA = 6,
GAS LISTING  			page 59


 307:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_REASON_CLASS3_FRAME_FROM_NONASSOC_STA = 7,
 308:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_REASON_DISASSOC_STA_HAS_LEFT = 8,
 309:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_REASON_STA_REQ_ASSOC_WITHOUT_AUTH = 9,
 310:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* 802.11h */
 311:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_REASON_DISASSOC_BAD_POWER = 10,
 312:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_REASON_DISASSOC_BAD_SUPP_CHAN = 11,
 313:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* 802.11i */
 314:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_REASON_INVALID_IE = 13,
 315:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_REASON_MIC_FAILURE = 14,
 316:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_REASON_4WAY_HANDSHAKE_TIMEOUT = 15,
 317:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_REASON_GROUP_KEY_HANDSHAKE_TIMEOUT = 16,
 318:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_REASON_IE_DIFFERENT = 17,
 319:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_REASON_INVALID_GROUP_CIPHER = 18,
 320:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_REASON_INVALID_PAIRWISE_CIPHER = 19,
 321:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_REASON_INVALID_AKMP = 20,
 322:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_REASON_UNSUPP_RSN_VERSION = 21,
 323:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_REASON_INVALID_RSN_IE_CAP = 22,
 324:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_REASON_IEEE8021X_FAILED = 23,
 325:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_REASON_CIPHER_SUITE_REJECTED = 24,
 326:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** };
 327:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 328:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** /* Action categories - 802.11h */
 329:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** enum ieee80211_actioncategories {
 330:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_ACTION_SPECTRUM_MGMT = 0,
 331:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* Reserved 1-127  */
 332:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* Error    128-255 */
 333:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** };
 334:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 335:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** /* Action details - 802.11h */
 336:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** enum ieee80211_actiondetails {
 337:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_ACTION_CATEGORY_MEASURE_REQUEST = 0,
 338:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_ACTION_CATEGORY_MEASURE_REPORT = 1,
 339:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_ACTION_CATEGORY_TPC_REQUEST = 2,
 340:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_ACTION_CATEGORY_TPC_REPORT = 3,
 341:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	WLAN_ACTION_CATEGORY_CHANNEL_SWITCH = 4,
 342:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* 5 - 255 Reserved */
 343:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** };
 344:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 345:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_STATMASK_SIGNAL (1<<0)
 346:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_STATMASK_RSSI (1<<1)
 347:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_STATMASK_NOISE (1<<2)
 348:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_STATMASK_RATE (1<<3)
 349:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_STATMASK_WEMASK 0x7
 350:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 351:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_CCK_MODULATION    (1<<0)
 352:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_OFDM_MODULATION   (1<<1)
 353:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 354:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_24GHZ_BAND     (1<<0)
 355:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_52GHZ_BAND     (1<<1)
 356:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 357:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_CCK_RATE_1MB		        0x02
 358:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_CCK_RATE_2MB		        0x04
 359:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_CCK_RATE_5MB		        0x0B
 360:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_CCK_RATE_11MB		        0x16
 361:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_OFDM_RATE_6MB		        0x0C
 362:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_OFDM_RATE_9MB		        0x12
 363:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_OFDM_RATE_12MB		0x18
GAS LISTING  			page 60


 364:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_OFDM_RATE_18MB		0x24
 365:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_OFDM_RATE_24MB		0x30
 366:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_OFDM_RATE_36MB		0x48
 367:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_OFDM_RATE_48MB		0x60
 368:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_OFDM_RATE_54MB		0x6C
 369:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_BASIC_RATE_MASK		0x80
 370:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 371:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_CCK_RATE_1MB_MASK		(1<<0)
 372:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_CCK_RATE_2MB_MASK		(1<<1)
 373:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_CCK_RATE_5MB_MASK		(1<<2)
 374:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_CCK_RATE_11MB_MASK		(1<<3)
 375:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_OFDM_RATE_6MB_MASK		(1<<4)
 376:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_OFDM_RATE_9MB_MASK		(1<<5)
 377:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_OFDM_RATE_12MB_MASK		(1<<6)
 378:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_OFDM_RATE_18MB_MASK		(1<<7)
 379:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_OFDM_RATE_24MB_MASK		(1<<8)
 380:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_OFDM_RATE_36MB_MASK		(1<<9)
 381:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_OFDM_RATE_48MB_MASK		(1<<10)
 382:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_OFDM_RATE_54MB_MASK		(1<<11)
 383:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 384:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_CCK_RATES_MASK	        0x0000000F
 385:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_CCK_BASIC_RATES_MASK	(IEEE80211_CCK_RATE_1MB_MASK | \
 386:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	IEEE80211_CCK_RATE_2MB_MASK)
 387:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_CCK_DEFAULT_RATES_MASK	(IEEE80211_CCK_BASIC_RATES_MASK | \
 388:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****         IEEE80211_CCK_RATE_5MB_MASK | \
 389:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****         IEEE80211_CCK_RATE_11MB_MASK)
 390:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 391:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_OFDM_RATES_MASK		0x00000FF0
 392:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_OFDM_BASIC_RATES_MASK	(IEEE80211_OFDM_RATE_6MB_MASK | \
 393:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	IEEE80211_OFDM_RATE_12MB_MASK | \
 394:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	IEEE80211_OFDM_RATE_24MB_MASK)
 395:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_OFDM_DEFAULT_RATES_MASK	(IEEE80211_OFDM_BASIC_RATES_MASK | \
 396:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	IEEE80211_OFDM_RATE_9MB_MASK  | \
 397:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	IEEE80211_OFDM_RATE_18MB_MASK | \
 398:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	IEEE80211_OFDM_RATE_36MB_MASK | \
 399:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	IEEE80211_OFDM_RATE_48MB_MASK | \
 400:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	IEEE80211_OFDM_RATE_54MB_MASK)
 401:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_DEFAULT_RATES_MASK (IEEE80211_OFDM_DEFAULT_RATES_MASK | \
 402:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****                                 IEEE80211_CCK_DEFAULT_RATES_MASK)
 403:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 404:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_NUM_OFDM_RATES	    8
 405:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_NUM_CCK_RATES	            4
 406:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_OFDM_SHIFT_MASK_A         4
 407:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 408:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** /* NOTE: This data is for statistical purposes; not all hardware provides this
 409:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  *       information for frames received.
 410:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  *       For ieee80211_rx_mgt, you need to set at least the 'len' parameter.
 411:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  */
 412:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_rx_stats {
 413:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u32 mac_time;
 414:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	s8 rssi;
 415:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 signal;
 416:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 noise;
 417:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u16 rate;		/* in 100 kbps */
 418:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 received_channel;
 419:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 control;
 420:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 mask;
GAS LISTING  			page 61


 421:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 freq;
 422:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u16 len;
 423:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u64 tsf;
 424:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u32 beacon_time;
 425:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** };
 426:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 427:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** /* IEEE 802.11 requires that STA supports concurrent reception of at least
 428:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * three fragmented frames. This define can be increased to support more
 429:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * concurrent frames, but it should be noted that each entry can consume about
 430:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * 2 kB of RAM and increasing cache size will slow down frame reassembly. */
 431:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_FRAG_CACHE_LEN 4
 432:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 433:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_frag_entry {
 434:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	unsigned long first_frag_time;
 435:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	unsigned int seq;
 436:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	unsigned int last_frag;
 437:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct sk_buff *skb;
 438:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 src_addr[ETH_ALEN];
 439:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 dst_addr[ETH_ALEN];
 440:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** };
 441:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 442:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_stats {
 443:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	unsigned int tx_unicast_frames;
 444:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	unsigned int tx_multicast_frames;
 445:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	unsigned int tx_fragments;
 446:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	unsigned int tx_unicast_octets;
 447:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	unsigned int tx_multicast_octets;
 448:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	unsigned int tx_deferred_transmissions;
 449:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	unsigned int tx_single_retry_frames;
 450:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	unsigned int tx_multiple_retry_frames;
 451:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	unsigned int tx_retry_limit_exceeded;
 452:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	unsigned int tx_discards;
 453:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	unsigned int rx_unicast_frames;
 454:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	unsigned int rx_multicast_frames;
 455:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	unsigned int rx_fragments;
 456:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	unsigned int rx_unicast_octets;
 457:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	unsigned int rx_multicast_octets;
 458:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	unsigned int rx_fcs_errors;
 459:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	unsigned int rx_discards_no_buffer;
 460:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	unsigned int tx_discards_wrong_sa;
 461:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	unsigned int rx_discards_undecryptable;
 462:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	unsigned int rx_message_in_msg_fragments;
 463:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	unsigned int rx_message_in_bad_msg_fragments;
 464:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** };
 465:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 466:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_device;
 467:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 468:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #include "ieee80211_crypt.h"
 469:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 470:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define SEC_KEY_1		(1<<0)
 471:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define SEC_KEY_2		(1<<1)
 472:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define SEC_KEY_3		(1<<2)
 473:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define SEC_KEY_4		(1<<3)
 474:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define SEC_ACTIVE_KEY		(1<<4)
 475:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define SEC_AUTH_MODE		(1<<5)
 476:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define SEC_UNICAST_GROUP	(1<<6)
 477:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define SEC_LEVEL		(1<<7)
GAS LISTING  			page 62


 478:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define SEC_ENABLED		(1<<8)
 479:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define SEC_ENCRYPT		(1<<9)
 480:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 481:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define SEC_LEVEL_0		0	/* None */
 482:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define SEC_LEVEL_1		1	/* WEP 40 and 104 bit */
 483:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define SEC_LEVEL_2		2	/* Level 1 + TKIP */
 484:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define SEC_LEVEL_2_CKIP	3	/* Level 1 + CKIP */
 485:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define SEC_LEVEL_3		4	/* Level 2 + CCMP */
 486:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 487:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define SEC_ALG_NONE		0
 488:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define SEC_ALG_WEP		1
 489:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define SEC_ALG_TKIP		2
 490:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define SEC_ALG_CCMP		3
 491:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 492:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define WEP_KEYS		4
 493:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define WEP_KEY_LEN		13
 494:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define SCM_KEY_LEN		32
 495:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define SCM_TEMPORAL_KEY_LENGTH	16
 496:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 497:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_security {
 498:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u16 active_key:2,
 499:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	    enabled:1,
 500:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	    auth_mode:2, auth_algo:4, unicast_uses_group:1, encrypt:1;
 501:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 encode_alg[WEP_KEYS];
 502:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 key_sizes[WEP_KEYS];
 503:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 keys[WEP_KEYS][SCM_KEY_LEN];
 504:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 level;
 505:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u16 flags;
 506:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** } __attribute__ ((packed));
 507:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 508:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** /*
 509:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 510:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  802.11 data frame from AP
 511:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 512:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****       ,-------------------------------------------------------------------.
 513:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** Bytes |  2   |  2   |    6    |    6    |    6    |  2   | 0..2312 |   4  |
 514:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****       |------|------|---------|---------|---------|------|---------|------|
 515:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** Desc. | ctrl | dura |  DA/RA  |   TA    |    SA   | Sequ |  frame  |  fcs |
 516:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****       |      | tion | (BSSID) |         |         | ence |  data   |      |
 517:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****       `-------------------------------------------------------------------'
 518:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 519:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** Total: 28-2340 bytes
 520:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 521:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** */
 522:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 523:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define BEACON_PROBE_SSID_ID_POSITION 12
 524:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 525:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** /* Management Frame Information Element Types */
 526:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** enum ieee80211_mfie {
 527:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	MFIE_TYPE_SSID = 0,
 528:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	MFIE_TYPE_RATES = 1,
 529:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	MFIE_TYPE_FH_SET = 2,
 530:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	MFIE_TYPE_DS_SET = 3,
 531:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	MFIE_TYPE_CF_SET = 4,
 532:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	MFIE_TYPE_TIM = 5,
 533:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	MFIE_TYPE_IBSS_SET = 6,
 534:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	MFIE_TYPE_COUNTRY = 7,
GAS LISTING  			page 63


 535:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	MFIE_TYPE_HOP_PARAMS = 8,
 536:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	MFIE_TYPE_HOP_TABLE = 9,
 537:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	MFIE_TYPE_REQUEST = 10,
 538:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	MFIE_TYPE_CHALLENGE = 16,
 539:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	MFIE_TYPE_POWER_CONSTRAINT = 32,
 540:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	MFIE_TYPE_POWER_CAPABILITY = 33,
 541:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	MFIE_TYPE_TPC_REQUEST = 34,
 542:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	MFIE_TYPE_TPC_REPORT = 35,
 543:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	MFIE_TYPE_SUPP_CHANNELS = 36,
 544:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	MFIE_TYPE_CSA = 37,
 545:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	MFIE_TYPE_MEASURE_REQUEST = 38,
 546:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	MFIE_TYPE_MEASURE_REPORT = 39,
 547:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	MFIE_TYPE_QUIET = 40,
 548:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	MFIE_TYPE_IBSS_DFS = 41,
 549:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	MFIE_TYPE_ERP_INFO = 42,
 550:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	MFIE_TYPE_RSN = 48,
 551:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	MFIE_TYPE_RATES_EX = 50,
 552:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	MFIE_TYPE_GENERIC = 221,
 553:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	MFIE_TYPE_QOS_PARAMETER = 222,
 554:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** };
 555:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 556:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** /* Minimal header; can be used for passing 802.11 frames with sufficient
 557:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * information to determine what type of underlying data type is actually
 558:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * stored in the data. */
 559:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_hdr {
 560:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 frame_ctl;
 561:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 duration_id;
 562:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 payload[0];
 563:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** } __attribute__ ((packed));
 564:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 565:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_hdr_1addr {
 566:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 frame_ctl;
 567:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 duration_id;
 568:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 addr1[ETH_ALEN];
 569:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 payload[0];
 570:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** } __attribute__ ((packed));
 571:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 572:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_hdr_2addr {
 573:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 frame_ctl;
 574:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 duration_id;
 575:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 addr1[ETH_ALEN];
 576:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 addr2[ETH_ALEN];
 577:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 payload[0];
 578:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** } __attribute__ ((packed));
 579:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 580:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_hdr_3addr {
 581:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 frame_ctl;
 582:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 duration_id;
 583:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 addr1[ETH_ALEN];
 584:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 addr2[ETH_ALEN];
 585:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 addr3[ETH_ALEN];
 586:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 seq_ctl;
 587:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 payload[0];
 588:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** } __attribute__ ((packed));
 589:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 590:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_hdr_4addr {
 591:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 frame_ctl;
GAS LISTING  			page 64


 592:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 duration_id;
 593:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 addr1[ETH_ALEN];
 594:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 addr2[ETH_ALEN];
 595:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 addr3[ETH_ALEN];
 596:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 seq_ctl;
 597:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 addr4[ETH_ALEN];
 598:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 payload[0];
 599:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** } __attribute__ ((packed));
 600:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 601:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_hdr_3addrqos {
 602:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 frame_ctl;
 603:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 duration_id;
 604:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 addr1[ETH_ALEN];
 605:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 addr2[ETH_ALEN];
 606:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 addr3[ETH_ALEN];
 607:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 seq_ctl;
 608:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 payload[0];
 609:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 qos_ctl;
 610:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** } __attribute__ ((packed));
 611:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 612:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_hdr_4addrqos {
 613:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 frame_ctl;
 614:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 duration_id;
 615:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 addr1[ETH_ALEN];
 616:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 addr2[ETH_ALEN];
 617:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 addr3[ETH_ALEN];
 618:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 seq_ctl;
 619:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 addr4[ETH_ALEN];
 620:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 payload[0];
 621:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 qos_ctl;
 622:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** } __attribute__ ((packed));
 623:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 624:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_info_element {
 625:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 id;
 626:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 len;
 627:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 data[0];
 628:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** } __attribute__ ((packed));
 629:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 630:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** /*
 631:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * These are the data types that can make up management packets
 632:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  *
 633:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u16 auth_algorithm;
 634:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u16 auth_sequence;
 635:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u16 beacon_interval;
 636:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u16 capability;
 637:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 current_ap[ETH_ALEN];
 638:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u16 listen_interval;
 639:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct {
 640:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 		u16 association_id:14, reserved:2;
 641:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	} __attribute__ ((packed));
 642:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u32 time_stamp[2];
 643:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u16 reason;
 644:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u16 status;
 645:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** */
 646:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 647:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_auth {
 648:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_hdr_3addr header;
GAS LISTING  			page 65


 649:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 algorithm;
 650:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 transaction;
 651:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 status;
 652:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* challenge */
 653:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_info_element info_element[0];
 654:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** } __attribute__ ((packed));
 655:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 656:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_channel_switch {
 657:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 id;
 658:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 len;
 659:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 mode;
 660:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 channel;
 661:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 count;
 662:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** } __attribute__ ((packed));
 663:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 664:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_action {
 665:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_hdr_3addr header;
 666:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 category;
 667:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 action;
 668:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	union {
 669:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 		struct ieee80211_action_exchange {
 670:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 			u8 token;
 671:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 			struct ieee80211_info_element info_element[0];
 672:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 		} exchange;
 673:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 		struct ieee80211_channel_switch channel_switch;
 674:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 675:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	} format;
 676:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** } __attribute__ ((packed));
 677:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 678:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_disassoc {
 679:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_hdr_3addr header;
 680:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 reason;
 681:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** } __attribute__ ((packed));
 682:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 683:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** /* Alias deauth for disassoc */
 684:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define ieee80211_deauth ieee80211_disassoc
 685:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 686:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_probe_request {
 687:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_hdr_3addr header;
 688:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* SSID, supported rates */
 689:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_info_element info_element[0];
 690:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** } __attribute__ ((packed));
 691:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 692:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_probe_response {
 693:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_hdr_3addr header;
 694:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u32 time_stamp[2];
 695:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 beacon_interval;
 696:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 capability;
 697:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* SSID, supported rates, FH params, DS params,
 698:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	 * CF params, IBSS params, TIM (if beacon), RSN */
 699:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_info_element info_element[0];
 700:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** } __attribute__ ((packed));
 701:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 702:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** /* Alias beacon for probe_response */
 703:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define ieee80211_beacon ieee80211_probe_response
 704:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 705:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_assoc_request {
GAS LISTING  			page 66


 706:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_hdr_3addr header;
 707:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 capability;
 708:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 listen_interval;
 709:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* SSID, supported rates, RSN */
 710:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_info_element info_element[0];
 711:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** } __attribute__ ((packed));
 712:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 713:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_reassoc_request {
 714:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_hdr_3addr header;
 715:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 capability;
 716:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 listen_interval;
 717:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 current_ap[ETH_ALEN];
 718:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_info_element info_element[0];
 719:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** } __attribute__ ((packed));
 720:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 721:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_assoc_response {
 722:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_hdr_3addr header;
 723:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 capability;
 724:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 status;
 725:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 aid;
 726:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* supported rates */
 727:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_info_element info_element[0];
 728:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** } __attribute__ ((packed));
 729:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 730:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_txb {
 731:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 nr_frags;
 732:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 encrypted;
 733:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 rts_included;
 734:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 reserved;
 735:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 frag_size;
 736:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 payload_size;
 737:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct sk_buff *fragments[0];
 738:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** };
 739:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 740:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** /* SWEEP TABLE ENTRIES NUMBER */
 741:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define MAX_SWEEP_TAB_ENTRIES		  42
 742:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define MAX_SWEEP_TAB_ENTRIES_PER_PACKET  7
 743:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** /* MAX_RATES_LENGTH needs to be 12.  The spec says 8, and many APs
 744:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * only use 8, and then use extended rates for the remaining supported
 745:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * rates.  Other APs, however, stick all of their supported rates on the
 746:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****  * main rates information element... */
 747:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define MAX_RATES_LENGTH                  ((u8)12)
 748:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define MAX_RATES_EX_LENGTH               ((u8)16)
 749:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define MAX_NETWORK_COUNT                  128
 750:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 751:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define CRC_LENGTH                 4U
 752:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 753:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define MAX_WPA_IE_LEN 64
 754:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 755:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define NETWORK_EMPTY_ESSID    (1<<0)
 756:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define NETWORK_HAS_OFDM       (1<<1)
 757:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define NETWORK_HAS_CCK        (1<<2)
 758:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 759:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** /* QoS structure */
 760:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define NETWORK_HAS_QOS_PARAMETERS      (1<<3)
 761:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define NETWORK_HAS_QOS_INFORMATION     (1<<4)
 762:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define NETWORK_HAS_QOS_MASK            (NETWORK_HAS_QOS_PARAMETERS | \
GAS LISTING  			page 67


 763:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 					 NETWORK_HAS_QOS_INFORMATION)
 764:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 765:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** /* 802.11h */
 766:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define NETWORK_HAS_POWER_CONSTRAINT    (1<<5)
 767:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define NETWORK_HAS_CSA                 (1<<6)
 768:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define NETWORK_HAS_QUIET               (1<<7)
 769:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define NETWORK_HAS_IBSS_DFS            (1<<8)
 770:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define NETWORK_HAS_TPC_REPORT          (1<<9)
 771:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 772:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define QOS_QUEUE_NUM                   4
 773:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define QOS_OUI_LEN                     3
 774:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define QOS_OUI_TYPE                    2
 775:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define QOS_ELEMENT_ID                  221
 776:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define QOS_OUI_INFO_SUB_TYPE           0
 777:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define QOS_OUI_PARAM_SUB_TYPE          1
 778:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define QOS_VERSION_1                   1
 779:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define QOS_AIFSN_MIN_VALUE             2
 780:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 781:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_qos_information_element {
 782:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 elementID;
 783:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 length;
 784:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 qui[QOS_OUI_LEN];
 785:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 qui_type;
 786:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 qui_subtype;
 787:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 version;
 788:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 ac_info;
 789:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** } __attribute__ ((packed));
 790:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 791:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_qos_ac_parameter {
 792:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 aci_aifsn;
 793:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 ecw_min_max;
 794:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 tx_op_limit;
 795:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** } __attribute__ ((packed));
 796:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 797:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_qos_parameter_info {
 798:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_qos_information_element info_element;
 799:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 reserved;
 800:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_qos_ac_parameter ac_params_record[QOS_QUEUE_NUM];
 801:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** } __attribute__ ((packed));
 802:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 803:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_qos_parameters {
 804:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 cw_min[QOS_QUEUE_NUM];
 805:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 cw_max[QOS_QUEUE_NUM];
 806:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 aifs[QOS_QUEUE_NUM];
 807:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 flag[QOS_QUEUE_NUM];
 808:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 tx_op_limit[QOS_QUEUE_NUM];
 809:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** } __attribute__ ((packed));
 810:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 811:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_qos_data {
 812:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_qos_parameters parameters;
 813:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int active;
 814:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int supported;
 815:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 param_count;
 816:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 old_param_count;
 817:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** };
 818:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 819:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_tim_parameters {
GAS LISTING  			page 68


 820:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 tim_count;
 821:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 tim_period;
 822:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** } __attribute__ ((packed));
 823:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 824:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** /*******************************************************/
 825:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 826:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** enum {				/* ieee80211_basic_report.map */
 827:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	IEEE80211_BASIC_MAP_BSS = (1 << 0),
 828:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	IEEE80211_BASIC_MAP_OFDM = (1 << 1),
 829:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	IEEE80211_BASIC_MAP_UNIDENTIFIED = (1 << 2),
 830:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	IEEE80211_BASIC_MAP_RADAR = (1 << 3),
 831:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	IEEE80211_BASIC_MAP_UNMEASURED = (1 << 4),
 832:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* Bits 5-7 are reserved */
 833:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 834:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** };
 835:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_basic_report {
 836:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 channel;
 837:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le64 start_time;
 838:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 duration;
 839:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 map;
 840:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** } __attribute__ ((packed));
 841:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 842:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** enum {				/* ieee80211_measurement_request.mode */
 843:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* Bit 0 is reserved */
 844:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	IEEE80211_MEASUREMENT_ENABLE = (1 << 1),
 845:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	IEEE80211_MEASUREMENT_REQUEST = (1 << 2),
 846:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	IEEE80211_MEASUREMENT_REPORT = (1 << 3),
 847:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* Bits 4-7 are reserved */
 848:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** };
 849:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 850:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** enum {
 851:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	IEEE80211_REPORT_BASIC = 0,	/* required */
 852:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	IEEE80211_REPORT_CCA = 1,	/* optional */
 853:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	IEEE80211_REPORT_RPI = 2,	/* optional */
 854:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* 3-255 reserved */
 855:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** };
 856:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 857:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_measurement_params {
 858:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 channel;
 859:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le64 start_time;
 860:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	__le16 duration;
 861:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** } __attribute__ ((packed));
 862:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 863:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_measurement_request {
 864:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_info_element ie;
 865:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 token;
 866:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 mode;
 867:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 type;
 868:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_measurement_params params[0];
 869:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** } __attribute__ ((packed));
 870:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 871:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_measurement_report {
 872:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_info_element ie;
 873:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 token;
 874:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 mode;
 875:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 type;
 876:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	union {
GAS LISTING  			page 69


 877:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 		struct ieee80211_basic_report basic[0];
 878:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	} u;
 879:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** } __attribute__ ((packed));
 880:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 881:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_tpc_report {
 882:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 transmit_power;
 883:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 link_margin;
 884:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** } __attribute__ ((packed));
 885:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 886:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_channel_map {
 887:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 channel;
 888:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 map;
 889:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** } __attribute__ ((packed));
 890:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 891:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_ibss_dfs {
 892:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_info_element ie;
 893:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 owner[ETH_ALEN];
 894:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 recovery_interval;
 895:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_channel_map channel_map[0];
 896:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** };
 897:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 898:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_csa {
 899:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 mode;
 900:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 channel;
 901:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 count;
 902:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** } __attribute__ ((packed));
 903:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 904:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_quiet {
 905:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 count;
 906:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 period;
 907:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 duration;
 908:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 offset;
 909:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** } __attribute__ ((packed));
 910:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 911:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_network {
 912:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* These entries are used to identify a unique network */
 913:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 bssid[ETH_ALEN];
 914:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 channel;
 915:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* Ensure null-terminated for any debug msgs */
 916:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 ssid[IW_ESSID_MAX_SIZE + 1];
 917:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 ssid_len;
 918:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 919:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_qos_data qos_data;
 920:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 921:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* These are network statistics */
 922:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_rx_stats stats;
 923:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u16 capability;
 924:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 rates[MAX_RATES_LENGTH];
 925:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 rates_len;
 926:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 rates_ex[MAX_RATES_EX_LENGTH];
 927:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 rates_ex_len;
 928:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	unsigned long last_scanned;
 929:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 mode;
 930:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u32 flags;
 931:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u32 last_associate;
 932:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u32 time_stamp[2];
 933:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u16 beacon_interval;
GAS LISTING  			page 70


 934:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u16 listen_interval;
 935:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u16 atim_window;
 936:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 erp_value;
 937:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 wpa_ie[MAX_WPA_IE_LEN];
 938:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	size_t wpa_ie_len;
 939:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 rsn_ie[MAX_WPA_IE_LEN];
 940:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	size_t rsn_ie_len;
 941:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_tim_parameters tim;
 942:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 943:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* 802.11h info */
 944:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 945:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* Power Constraint - mandatory if spctrm mgmt required */
 946:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 power_constraint;
 947:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 948:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* TPC Report - mandatory if spctrm mgmt required */
 949:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_tpc_report tpc_report;
 950:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 951:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* IBSS DFS - mandatory if spctrm mgmt required and IBSS
 952:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	 * NOTE: This is variable length and so must be allocated dynamically */
 953:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_ibss_dfs *ibss_dfs;
 954:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 955:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* Channel Switch Announcement - optional if spctrm mgmt required */
 956:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_csa csa;
 957:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 958:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* Quiet - optional if spctrm mgmt required */
 959:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_quiet quiet;
 960:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 961:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct list_head list;
 962:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** };
 963:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 964:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** enum ieee80211_state {
 965:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	IEEE80211_UNINITIALIZED = 0,
 966:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	IEEE80211_INITIALIZED,
 967:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	IEEE80211_ASSOCIATING,
 968:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	IEEE80211_ASSOCIATED,
 969:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	IEEE80211_AUTHENTICATING,
 970:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	IEEE80211_AUTHENTICATED,
 971:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	IEEE80211_SHUTDOWN
 972:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** };
 973:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 974:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define DEFAULT_MAX_SCAN_AGE (15 * HZ)
 975:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define DEFAULT_FTS 2346
 976:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 977:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define CFG_IEEE80211_RESERVE_FCS (1<<0)
 978:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define CFG_IEEE80211_COMPUTE_FCS (1<<1)
 979:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define CFG_IEEE80211_RTS (1<<2)
 980:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 981:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_24GHZ_MIN_CHANNEL 1
 982:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_24GHZ_MAX_CHANNEL 14
 983:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_24GHZ_CHANNELS    14
 984:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 985:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_52GHZ_MIN_CHANNEL 34
 986:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_52GHZ_MAX_CHANNEL 165
 987:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE80211_52GHZ_CHANNELS    131
 988:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 989:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** enum {
 990:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	IEEE80211_CH_PASSIVE_ONLY = (1 << 0),
GAS LISTING  			page 71


 991:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	IEEE80211_CH_B_ONLY = (1 << 2),
 992:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	IEEE80211_CH_NO_IBSS = (1 << 3),
 993:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	IEEE80211_CH_UNIFORM_SPREADING = (1 << 4),
 994:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	IEEE80211_CH_RADAR_DETECT = (1 << 5),
 995:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	IEEE80211_CH_INVALID = (1 << 6),
 996:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** };
 997:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
 998:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_channel {
 999:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u32 freq;
1000:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 channel;
1001:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 flags;
1002:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 max_power;
1003:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** };
1004:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1005:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_geo {
1006:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 name[4];
1007:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 bg_channels;
1008:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 a_channels;
1009:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_channel bg[IEEE80211_24GHZ_CHANNELS];
1010:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_channel a[IEEE80211_52GHZ_CHANNELS];
1011:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** };
1012:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1013:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** struct ieee80211_device {
1014:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct net_device *dev;
1015:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_security sec;
1016:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1017:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* Bookkeeping structures */
1018:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct net_device_stats stats;
1019:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_stats ieee_stats;
1020:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1021:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_geo geo;
1022:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1023:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* Probe / Beacon management */
1024:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct list_head network_free_list;
1025:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct list_head network_list;
1026:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_network *networks;
1027:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int scans;
1028:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int scan_age;
1029:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1030:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int iw_mode;		/* operating mode (IW_MODE_*) */
1031:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct iw_spy_data spy_data;	/* iwspy support */
1032:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1033:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	spinlock_t lock;
1034:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1035:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int tx_headroom;	/* Set to size of any additional room needed at front
1036:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 				 * of allocated Tx SKBs */
1037:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u32 config;
1038:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1039:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* WEP and other encryption related settings at the device level */
1040:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int open_wep;		/* Set to 1 to allow unencrypted frames */
1041:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1042:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int reset_on_keychange;	/* Set to 1 if the HW needs to be reset on
1043:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 				 * WEP key changes */
1044:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1045:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* If the host performs {en,de}cryption, then set to 1 */
1046:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int host_encrypt;
1047:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int host_encrypt_msdu;
GAS LISTING  			page 72


1048:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int host_decrypt;
1049:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* host performs multicast decryption */
1050:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int host_mc_decrypt;
1051:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1052:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int host_open_frag;
1053:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int host_build_iv;
1054:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int ieee802_1x;		/* is IEEE 802.1X used */
1055:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1056:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* WPA data */
1057:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int wpa_enabled;
1058:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int drop_unencrypted;
1059:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int privacy_invoked;
1060:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	size_t wpa_ie_len;
1061:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 *wpa_ie;
1062:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1063:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct list_head crypt_deinit_list;
1064:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_crypt_data *crypt[WEP_KEYS];
1065:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int tx_keyidx;		/* default TX key index (crypt[tx_keyidx]) */
1066:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct timer_list crypt_deinit_timer;
1067:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int crypt_quiesced;
1068:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1069:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int bcrx_sta_key;	/* use individual keys to override default keys even
1070:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 				 * with RX of broad/multicast frames */
1071:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1072:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* Fragmentation structures */
1073:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	struct ieee80211_frag_entry frag_cache[IEEE80211_FRAG_CACHE_LEN];
1074:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	unsigned int frag_next_idx;
1075:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u16 fts;		/* Fragmentation Threshold */
1076:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u16 rts;		/* RTS threshold */
1077:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1078:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* Association info */
1079:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 bssid[ETH_ALEN];
1080:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1081:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	enum ieee80211_state state;
1082:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1083:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int mode;		/* A, B, G */
1084:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int modulation;		/* CCK, OFDM */
1085:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int freq_band;		/* 2.4Ghz, 5.2Ghz, Mixed */
1086:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int abg_true;		/* ABG flag              */
1087:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1088:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int perfect_rssi;
1089:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int worst_rssi;
1090:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1091:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* Callback functions */
1092:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	void (*set_security) (struct net_device * dev,
1093:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 			      struct ieee80211_security * sec);
1094:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int (*hard_start_xmit) (struct ieee80211_txb * txb,
1095:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 				struct net_device * dev, int pri);
1096:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int (*reset_port) (struct net_device * dev);
1097:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int (*is_queue_full) (struct net_device * dev, int pri);
1098:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1099:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int (*handle_management) (struct net_device * dev,
1100:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 				  struct ieee80211_network * network, u16 type);
1101:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1102:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* Typical STA methods */
1103:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int (*handle_auth) (struct net_device * dev,
1104:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 			    struct ieee80211_auth * auth);
GAS LISTING  			page 73


1105:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int (*handle_deauth) (struct net_device * dev,
1106:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 			      struct ieee80211_deauth * auth);
1107:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int (*handle_action) (struct net_device * dev,
1108:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 			      struct ieee80211_action * action,
1109:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 			      struct ieee80211_rx_stats * stats);
1110:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int (*handle_disassoc) (struct net_device * dev,
1111:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 				struct ieee80211_disassoc * assoc);
1112:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int (*handle_beacon) (struct net_device * dev,
1113:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 			      struct ieee80211_beacon * beacon,
1114:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 			      struct ieee80211_network * network);
1115:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int (*handle_probe_response) (struct net_device * dev,
1116:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 				      struct ieee80211_probe_response * resp,
1117:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 				      struct ieee80211_network * network);
1118:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int (*handle_probe_request) (struct net_device * dev,
1119:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 				     struct ieee80211_probe_request * req,
1120:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 				     struct ieee80211_rx_stats * stats);
1121:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int (*handle_assoc_response) (struct net_device * dev,
1122:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 				      struct ieee80211_assoc_response * resp,
1123:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 				      struct ieee80211_network * network);
1124:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1125:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* Typical AP methods */
1126:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int (*handle_assoc_request) (struct net_device * dev);
1127:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	int (*handle_reassoc_request) (struct net_device * dev,
1128:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 				       struct ieee80211_reassoc_request * req);
1129:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1130:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* This must be the last item so that it points to the data
1131:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	 * allocated beyond this structure by alloc_ieee80211 */
1132:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	u8 priv[0];
1133:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** };
1134:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1135:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE_A            (1<<0)
1136:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE_B            (1<<1)
1137:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE_G            (1<<2)
1138:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define IEEE_MODE_MASK    (IEEE_A|IEEE_B|IEEE_G)
1139:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1140:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #include <linux/version.h>	/* KERNEL_VERSION */
1141:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,12)
1142:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** static inline int is_multicast_ether_addr(const u8 *addr)
1143:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** {
1144:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****        return addr[0] & 0x01;
1145:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** }
1146:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #endif
1147:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1148:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** /* Fix for kernels < 2.6.12, since we use __nocast */
1149:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #ifndef __nocast
1150:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #define __nocast
1151:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #endif
1152:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1153:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,14)
1154:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** static inline void *kzalloc(size_t size, unsigned __nocast flags)
1155:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** {
1156:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	void *ret = kmalloc(size, flags);
1157:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	if (ret)
1158:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 		memset(ret, 0, size);
1159:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	return ret;
1160:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** }
1161:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #endif
GAS LISTING  			page 74


1162:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1163:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,15)
1164:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** static inline unsigned compare_ether_addr(const u8 *_a, const u8 *_b)
1165:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** {
1166:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	const u16 *a = (const u16 *) _a;
1167:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	const u16 *b = (const u16 *) _b;
1168:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1169:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	BUILD_BUG_ON(ETH_ALEN != 6);
1170:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	return ((a[0] ^ b[0]) | (a[1] ^ b[1]) | (a[2] ^ b[2])) != 0;
1171:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** }
1172:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #endif
1173:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1174:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** static inline void *ieee80211_priv(struct net_device *dev)
1175:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** {
1176:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	return ((struct ieee80211_device *)netdev_priv(dev))->priv;
1177:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** }
1178:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1179:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,14)
1180:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** static inline int is_broadcast_ether_addr(const u8 *addr)
1181:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** {
1182:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h ****         return (addr[0] & addr[1] & addr[2] & addr[3] & addr[4] & addr[5]) == 0xff;
1183:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** }
1184:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** #endif
1185:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1186:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** static inline int ieee80211_is_empty_essid(const char *essid, int essid_len)
1187:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** {
 874              	.loc 10 1187 0
 875 03cb 0FB6C2   	movzbl %dl,%eax
 876              	.LBE36:
 877              	.loc 1 295 0
 878 03ce 8B74240C 	movl 12(%esp),%esi
 879              	.LBB37:
 880              	.LBB38:
1188:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* Single white space is for Linksys APs */
1189:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	if (essid_len == 1 && essid[0] == ' ')
 881              	.loc 10 1189 0
 882 03d2 83F801   	cmpl $1,%eax
 883              	.LBE38:
 884              	.LBE37:
 296:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	static char escaped[IW_ESSID_MAX_SIZE * 2 + 1];
 297:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	const char *s = essid;
 885              	.loc 1 297 0
 886 03d5 89F7     	movl %esi,%edi
 298:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	char *d = escaped;
 887              	.loc 1 298 0
 888 03d7 B9200000 	movl $escaped.3,%ecx
 888      00
 889              	.LBB39:
 890              	.LBB40:
 891              	.loc 10 1189 0
 892 03dc 7505     	jne .L119
 893 03de 803E20   	cmpb $32,(%esi)
 894 03e1 EB02     	jmp .L161
 895              	.L119:
1190:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 		return 1;
1191:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 
1192:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	/* Otherwise, if the entire essid is 0, we assume it is hidden */
GAS LISTING  			page 75


1193:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 	while (essid_len) {
1194:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 		essid_len--;
1195:/home/usuario/ipw3945install/ieee80211-1.1.12/net/ieee80211.h **** 		if (essid[essid_len] != '\0')
 896              	.loc 10 1195 0
 897 03e3 85C0     	testl %eax,%eax
 898              	.L161:
 899 03e5 7409     	je .L159
 900              	.loc 10 1194 0
 901 03e7 48       	decl %eax
 902              	.loc 10 1195 0
 903 03e8 803C0600 	cmpb $0,(%esi,%eax)
 904 03ec 7511     	jne .L158
 905 03ee EBF3     	jmp .L119
 906              	.L159:
 907              	.LBE40:
 908              	.LBE39:
 909              	.LBB41:
 910              	.LBB42:
 911              	.loc 3 247 0
 912 03f0 BED40100 	movl $.LC13,%esi
 912      00
 913              	.loc 3 248 0
 914 03f5 BF200000 	movl $escaped.3,%edi
 914      00
 915              	.loc 3 264 0
 916              	
 917 03fa A5       	movsl
 918              	.loc 3 266 0
 919 03fb A5       	movsl
 920              	.loc 3 272 0
 921 03fc A4       	movsb
 922              	
 923              	.LBE42:
 924              	.LBE41:
 299:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 
 300:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	if (ieee80211_is_empty_essid(essid, essid_len)) {
 301:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 		memcpy(escaped, "<hidden>", sizeof("<hidden>"));
 302:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 		return escaped;
 925              	.loc 1 302 0
 926 03fd EB36     	jmp .L117
 927              	.L158:
 928              	.LBB43:
 303:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	}
 304:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 
 305:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	essid_len = min(essid_len, (u8) IW_ESSID_MAX_SIZE);
 929              	.loc 1 305 0
 930 03ff 80FA20   	cmpb $32,%dl
 931 0402 B8200000 	movl $32,%eax
 931      00
 932 0407 7303     	jae .L148
 933 0409 0FB6C2   	movzbl %dl,%eax
 934              	.L148:
 935              	.LBE43:
 306:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	while (essid_len--) {
 307:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 		if (*s == '\0') {
 308:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 			*d++ = '\\';
 309:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 			*d++ = '0';
GAS LISTING  			page 76


 310:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 			s++;
 311:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 		} else {
 312:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 			*d++ = *s++;
 936              	.loc 1 312 0
 937 040c 8D50FF   	leal -1(%eax),%edx
 938              	.L162:
 939 040f 80FAFF   	cmpb $-1,%dl
 940 0412 741E     	je .L157
 941              	.loc 1 307 0
 942 0414 8A07     	movb (%edi),%al
 943 0416 84C0     	testb %al,%al
 944 0418 8D7101   	leal 1(%ecx),%esi
 945 041b 8D7F01   	leal 1(%edi),%edi
 946 041e 750B     	jne .L151
 947              	.loc 1 308 0
 948 0420 C6015C   	movb $92,(%ecx)
 949 0423 89F1     	movl %esi,%ecx
 950              	.loc 1 309 0
 951 0425 41       	incl %ecx
 952 0426 C60630   	movb $48,(%esi)
 953              	.loc 1 310 0
 954 0429 EB04     	jmp .L149
 955              	.L151:
 956              	.loc 1 312 0
 957 042b 8801     	movb %al,(%ecx)
 958 042d 89F1     	movl %esi,%ecx
 959              	.L149:
 960 042f 4A       	decl %edx
 961 0430 EBDD     	jmp .L162
 962              	.L157:
 313:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 		}
 314:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	}
 315:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	*d = '\0';
 963              	.loc 1 315 0
 964 0432 C60100   	movb $0,(%ecx)
 965              	.L117:
 316:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** 	return escaped;
 317:/home/usuario/ipw3945install/ieee80211-1.1.12/ieee80211_module.c **** }
 966              	.loc 1 317 0
 967 0435 5E       	popl %esi
 968 0436 B8200000 	movl $escaped.3,%eax
 968      00
 969 043b 5F       	popl %edi
 970 043c C3       	ret
 971              	.LFE935:
 973              	.section __kcrctab,"a",@progbits
 974              	.align 4
 977              	__kcrctab_alloc_ieee80211:
 978 0000 00000000 	.long __crc_alloc_ieee80211
 979              	.section __ksymtab_strings,"a",@progbits
 982              	__kstrtab_alloc_ieee80211:
 983 0000 616C6C6F 	.string "alloc_ieee80211"
 983      635F6965 
 983      65653830 
 983      32313100 
 984              	.section __ksymtab,"a",@progbits
 985              	.align 4
GAS LISTING  			page 77


 988              	__ksymtab_alloc_ieee80211:
 989 0000 00000000 	.long alloc_ieee80211
 990 0004 00000000 	.long __kstrtab_alloc_ieee80211
 991              	.section __kcrctab
 992              	.align 4
 995              	__kcrctab_free_ieee80211:
 996 0004 00000000 	.long __crc_free_ieee80211
 997              	.section __ksymtab_strings
 1000              	__kstrtab_free_ieee80211:
 1001 0010 66726565 	.string "free_ieee80211"
 1001      5F696565 
 1001      65383032 
 1001      313100
 1002              	.section __ksymtab
 1003              	.align 4
 1006              	__ksymtab_free_ieee80211:
 1007 0008 00000000 	.long free_ieee80211
 1008 000c 10000000 	.long __kstrtab_free_ieee80211
 1009              	.section __kcrctab
 1010              	.align 4
 1013              	__kcrctab_escape_essid:
 1014 0008 00000000 	.long __crc_escape_essid
 1015              	.section __ksymtab_strings
 1018              	__kstrtab_escape_essid:
 1019 001f 65736361 	.string "escape_essid"
 1019      70655F65 
 1019      73736964 
 1019      00
 1020              	.section __ksymtab
 1021              	.align 4
 1024              	__ksymtab_escape_essid:
 1025 0010 00000000 	.long escape_essid
 1026 0014 1F000000 	.long __kstrtab_escape_essid
 1027              	.weak __crc_escape_essid
 1028              	.weak __crc_free_ieee80211
 1029              	.weak __crc_alloc_ieee80211
 1837              	.Letext0:
 36865              	.ident "GCC: (GNU) 3.4.5 20050809 (prerelease) (Ubuntu 3.4.4-6ubuntu8.1)"
GAS LISTING  			page 78


DEFINED SYMBOLS
                            *ABS*:0000000000000000 ieee80211_module.c
 {entrada estándar}:13     .modinfo:0000000000000000 __mod_version60
 {entrada estándar}:18     .modinfo:0000000000000020 __mod_description61
 {entrada estándar}:23     .modinfo:0000000000000060 __mod_author62
 {entrada estándar}:27     .modinfo:00000000000000ac __mod_license63
 {entrada estándar}:34     .text:0000000000000000 ieee80211_networks_allocate
 {entrada estándar}:124    .text:0000000000000055 ieee80211_network_reset
 {entrada estándar}:153    .text:000000000000007b ieee80211_networks_initialize
 {entrada estándar}:215    .rodata:0000000000000000 __func__.2
 {entrada estándar}:227    .text:00000000000000e1 alloc_ieee80211
 {entrada estándar}:547    .bss:0000000000000000 ieee80211_debug_level
 {entrada estándar}:396    .text:000000000000023d free_ieee80211
 {entrada estándar}:541    .bss:0000000000000008 debug
 {entrada estándar}:553    .bss:0000000000000004 ieee80211_proc
 {entrada estándar}:560    .text:000000000000030f show_debug_level
 {entrada estándar}:588    .text:000000000000032b store_debug_level
 {entrada estándar}:707    .init.text:0000000000000000 ieee80211_init
 {entrada estándar}:799    .exit.text:0000000000000000 ieee80211_exit
 {entrada estándar}:830    .data:0000000000000000 __param_str_debug
 {entrada estándar}:836    __param:0000000000000000 __param_debug
 {entrada estándar}:845    .modinfo:00000000000000b8 __mod_debugtype287
 {entrada estándar}:849    .modinfo:00000000000000cb __mod_debug288
 {entrada estándar}:799    .exit.text:0000000000000000 cleanup_module
 {entrada estándar}:707    .init.text:0000000000000000 init_module
 {entrada estándar}:856    .bss:0000000000000020 escaped.3
 {entrada estándar}:863    .text:00000000000003c5 escape_essid
 {entrada estándar}:977    __kcrctab:0000000000000000 __kcrctab_alloc_ieee80211
 {entrada estándar}:982    __ksymtab_strings:0000000000000000 __kstrtab_alloc_ieee80211
 {entrada estándar}:988    __ksymtab:0000000000000000 __ksymtab_alloc_ieee80211
 {entrada estándar}:995    __kcrctab:0000000000000004 __kcrctab_free_ieee80211
 {entrada estándar}:1000   __ksymtab_strings:0000000000000010 __kstrtab_free_ieee80211
 {entrada estándar}:1006   __ksymtab:0000000000000008 __ksymtab_free_ieee80211
 {entrada estándar}:1013   __kcrctab:0000000000000008 __kcrctab_escape_essid
 {entrada estándar}:1018   __ksymtab_strings:000000000000001f __kstrtab_escape_essid
 {entrada estándar}:1024   __ksymtab:0000000000000010 __ksymtab_escape_essid
                   .rodata.str1.1:00000000000000b4 .LC5

UNDEFINED SYMBOLS
malloc_sizes
kmem_cache_alloc
printk
kfree
alloc_etherdev
ieee80211_xmit
ieee80211_crypt_deinit_handler
free_netdev
ieee80211_crypt_quiescing
del_timer
ieee80211_crypt_deinit_entries
wake_up_process
snprintf
copy_from_user
sscanf
proc_net
proc_mkdir
create_proc_entry
GAS LISTING  			page 79


remove_proc_entry
param_set_int
param_get_int
__crc_alloc_ieee80211
__crc_free_ieee80211
__crc_escape_essid
